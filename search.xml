<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>蓄水池抽样</title>
      <link href="/post/0399dca0-c447-11ec-9a1f-a97b5b48cbc0/"/>
      <url>/post/0399dca0-c447-11ec-9a1f-a97b5b48cbc0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>水塘抽样算法，正好今天的「每日一题」是考这个算法，不写个笔记记录下感觉又快忘完了。</p></blockquote><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>说白了就是有点像时间换空间？在一段超长且长度未知的数据流中，如果需要以一个相同的概率去实时抽样，则需要用到该算法。<br>如果有一个数组 <code>data</code> ，需要随机跳出一个元素，我们之前都是通过 <code>random.nextInt(data.length)</code> 来得到这个元素的下标，从而得到该元素值。但是遇到需要在大小为 $n$ 的数组中有 $k$ 个值是相同的元素，需要以相同概率取出其中一个元素这样的问题，那就不得不先预处理，将这 $k$ 个值相同元素都放到另外的空间中，然后在调用 <code>random</code> 函数进行抽取。但如果是水塘抽样则可以做到像迭代器一样，随时可以停止，在前面的抽样的过程中，保证每个元素时被以相同的概率抽到。<br>该算法的核心就是数学公式，在一次遍历中，可以做到保证每个需要被取出的元素抽到的概率是 $\frac1k$ 。<br>简单来说就是判断 <code>random.nextInt(cnt) == 0</code> 该条件是否成立， <code>cnt</code> 等于当前加入抽奖池的个数，当 <code>cnt</code> 为 $1$ 时， 第一个元素被选中的概率是 $\frac11$ ；当 <code>cnt</code> 为 $2$ 时，第 $2$ 个元素被选中概率是 $\frac12$ ；当 <code>cnt</code> 为 $3$ 是，第 $3$ 个元素被选中概率是 $\frac13$ ；而且它并不会影响之前的元素是否被选中。当第 $k$ 个元素的概率是 $\frac1k$，而第 $1$ 个元素被选中的概率就等于 $$\frac11 \times (1 - \frac12) \times (1 - \frac13) \times ··· \times (1 - \frac1k) &#x3D; \frac1k$$<br>所以每个元素被选中的概率都是 $\frac1k$。这样就完成了随机抽样，并且可以对持续的流进行抽样。</p><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>给定一个由非重叠的轴对齐矩形的数组 <code>rects</code> ，其中 <code>rects[i] = [ai, bi, xi, yi]</code> 表示 <code>(ai, bi)</code> 是第 <code>i</code> 个矩形的左下角点，<code>(xi, yi)</code> 是第 <code>i</code> 个矩形的右上角角点。设计一个算法来挑选一个随机整数点内的空间所覆盖的一个给定的矩形。矩形周长上的一个点包含在矩形覆盖的空间中。</p><p>在一个给定的矩形覆盖的空间内任何整数点都有可能被返回。</p><p>请注意 ，整数点是具有整数坐标的点。</p><p>实现 <code>Solution</code> 类:</p><ul><li><code>Solution(int[][] rects)</code> 用给定的矩形数组 <code>rects</code> 初始化对象。</li><li><code>int[] pick()</code> 返回一个随机的整数点 <code>[u, v]</code> 在给定的矩形所覆盖的空间内。</li></ul><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><ul><li><code>1 &lt;= rects.length &lt;= 100</code></li><li><code>rects[i].length == 4</code></li><li><code>-109 &lt;= ai &lt; xi &lt;= 109</code></li><li><code>-109 &lt;= bi &lt; yi &lt;= 109</code></li><li><code>xi - ai &lt;= 2000</code></li><li><code>yi - bi &lt;= 2000</code></li><li>所有的矩形不重叠。</li><li><code>pick</code> 最多被调用 <code>104</code> 次。</li></ul><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><p><img src="https://assets.leetcode.com/uploads/2021/07/24/lc-pickrandomrec.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]</span><br><span class="line">[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]</span><br><span class="line">输出: </span><br><span class="line">[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">Solution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);</span><br><span class="line">solution.pick(); // 返回 [1, -2]</span><br><span class="line">solution.pick(); // 返回 [1, -1]</span><br><span class="line">solution.pick(); // 返回 [-1, -2]</span><br><span class="line">solution.pick(); // 返回 [-2, -2]</span><br><span class="line">solution.pick(); // 返回 [0, 0]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>只需要将所有点取出，利用 <code>TreeSet</code> 的堆排序类似二分查找随机到一个矩形，再对该矩形的 <code>x, y</code> 的最大最小值进行蓄水池抽样即可，注意边长上的点也是符合条件的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> max;</span><br><span class="line">    <span class="type">int</span>[][] rects;</span><br><span class="line">    TreeMap&lt;Integer, Integer&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(<span class="type">int</span>[][] rects)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.rects = rects;</span><br><span class="line">        <span class="built_in">this</span>.map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rects.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">curr</span> <span class="operator">=</span> (rects[i][<span class="number">2</span>] - rects[i][<span class="number">0</span>] + <span class="number">1</span>) * (rects[i][<span class="number">3</span>] - rects[i][<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            map.put(curr + prev, i);</span><br><span class="line">            prev += curr;</span><br><span class="line">            <span class="built_in">this</span>.max = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] pick() &#123;</span><br><span class="line">        Map.Entry&lt;Integer, Integer&gt; e = map.higherEntry(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(max));</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">idx</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">        <span class="type">int</span>[] rect = rects[idx];</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> rect[<span class="number">0</span>]; i &lt;= rect[<span class="number">2</span>]; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ThreadLocalRandom.current().nextInt(i - rect[<span class="number">0</span>] + <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                x = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> rect[<span class="number">1</span>]; i &lt;= rect[<span class="number">3</span>]; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ThreadLocalRandom.current().nextInt(i - rect[<span class="number">1</span>] + <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                y = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构：树状数组</title>
      <link href="/post/1c40fd80-b621-11ec-9548-87744b45139b/"/>
      <url>/post/1c40fd80-b621-11ec-9548-87744b45139b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>首先，树状数组的应用场景在哪里呢？这里摘抄三叶姐题解中的一段：</p><blockquote><p>针对不同的题目，我们有不同的方案可以选择（假设我们有一个数组）：</p><p>数组不变，求区间和：「前缀和」、「树状数组」、「线段树」<br>多次修改某个数（单点），求区间和：「树状数组」、「线段树」<br>多次修改某个区间，输出最终结果：「差分」<br>多次修改某个区间，求区间和：「线段树」、「树状数组」（看修改区间范围大小）<br>多次将某个区间变成同一个数，求区间和：「线段树」、「树状数组」（看修改区间范围大小）</p><p>作者：<a href="https://leetcode-cn.com/u/ac_oier/">宫水三叶</a></p></blockquote><p>看起来说前缀和搞不定的可以用树状数组来解决。</p><p>那么，树状数组是一种什么样的结构呢？首先它本身还是数组，不是像二叉树、字典树那样真正意义上的树了。因为没有必要做成那样的数据结构，它本身就是利用二进制的特性的来实现<strong>查询</strong>和<strong>更新</strong>操作的，数组结构已经完成可以满足<strong>分块</strong>处理的需求（太强了）。</p><p>假设有一个数组 <code>arr = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ,11, 12, 13, 14, 15, 16&#125;</code>，那么树状数组 <code>tree</code> 在实际的结构中可能存储的是如下的数据：</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/BinaryIndexedTree/tree-array.png" alt="img"></p><p>他看来还是像一颗二叉树，其中（下标从 <code>1</code> 开始）</p><ul><li><code>tree[1] = arr[1]</code></li><li><code>tree[2] = arr[1] + arr[2]</code></li><li><code>tree[3] = arr[3]</code></li><li><code>tree[4] = tree[2] + tree[3] + arr[4] = arr[1] + arr[2] + arr[3] + arr[4]</code></li><li>…</li></ul><p>简单理解 <code>tree[i]</code> 就等于其子节点的和再加上对应数组坐标的值。那么这个结构能够帮助我们做什么呢？前面我们提到了树状数组本身就是利用二进制的特性。其中这里有个算法 <code>lowbit(int x)</code>，用于取出 <code>x</code> 的最低位 <code>1</code>。</p><p>比如 $9$ 的 二进制是 $1001$，他的 <code>lowbit</code> 就是 $1$，$10$ 的二进制是 $1010$，他的 <code>lowbit</code> 就是 $10$ 也就是 $2$。他的算法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lowbit</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在 Intellij IDEA 中打了一个类名，GitHub 的 Copilot 就马上就帮我自动补全这个算法了。。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/BinaryIndexedTree/image-20220407154704044.png" style="zoom:50%;" /><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/BinaryIndexedTree/Xnip2022-04-07_16-04-41.png" style="zoom:50%;" /><p>如果有一个前缀和的数组 <code>a</code>，我们求 $l$ 到 $r$ 的区间怎么求呢？答案一般会是 <code>a[r] - a[l - 1] (l &gt;= 1)</code> 或者 <code>a[r + 1] - a[l]</code> 之类的，其实树状数组也是利用 <code>lowbit</code> 算了个前缀和，但是它的时间复杂度不是 $O(n)$，而是 $O(logn)$。</p><p>假如现在要做一个更新操作，将 $idx$ 为 $5$ 的位置更新成 $val$，如果是前缀和数组，就需要从 $5$ 到 $16$ 区间的所有前缀和都更新一遍，但是对于树状数组来说，它的过程就是如图上所示只需要把 $5、6、8、16$  这些节点更新了就行，因为他们的值都是由 $5$ 累加得到的。两者的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_updateByPre</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt; tree.length; i++) &#123;</span><br><span class="line">        tree[i] += val - arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_updateByBinaryIndexedTree</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt; tree.length; i += lowbit(i)) &#123;</span><br><span class="line">        tree[i] += val - arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200717113236761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0,size_16,color_FFFFFF,t_70" alt="img"></p><p>如果是查询呢？假设我想查找 $idx &#x3D; 15$ 的前缀和，对于前缀和数组可以在 $O(1)$ 的情况下直接得到结果，而树状数组还是得需要 $O(logn)$ 的时间复杂度。树状数组需要把 $15、14、12、8$ 这些节点的值都加起来才能得到 $idx &#x3D; 15$ 的前缀和。两者的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">_queryByPre</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> tree[idx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">_queryByBinaryIndexedTree</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &gt;= <span class="number">0</span>; i -= lowbit(i)) &#123;</span><br><span class="line">        sum += tree[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用在题目中，求区间的和树状数组怎么做呢？那就是查找到两个端点的前缀和然后相减。树状数组模板代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 默认模板;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;https://github.com/Matthew-Han&quot;&gt;Matthew Han&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/4/7 16:03 07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryIndexedTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] tree;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryIndexedTree</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tree = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            update(i + <span class="number">1</span>, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt; tree.length; i += lowBit(i)) &#123;</span><br><span class="line">            tree[i] += delta;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &gt; <span class="number">0</span>; i -= lowBit(i)) &#123;</span><br><span class="line">            res += tree[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> query(right + <span class="number">1</span>) - query(left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lowBit</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(tree);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用 <code>update</code> 方法完成对原始数组初始化前缀和相加，其中注意不能从 <code>0</code> 开始，不然会无限循环，因为 <code>lowBit(0) = 0</code>。</p><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>给你一个数组 <code>nums</code> ，请你完成两类查询。</p><ul><li>其中一类查询要求 更新 数组 <code>nums</code> 下标对应的值</li><li>另一类查询要求返回数组 <code>nums</code> 中索引 <code>left</code> 和索引 <code>right</code> 之间（ 包含 ）的 <code>nums</code> 元素的 和 ，其中 <code>left &lt;= right</code></li></ul><p>实现 <code>NumArray</code> 类：</p><ul><li><code>NumArray(int[] nums)</code> 用整数数组 <code>nums</code> 初始化对象</li><li><code>void update(int index, int val)</code> 将 <code>nums[index]</code> 的值 更新 为 <code>val</code></li><li><code>int sumRange(int left, int right)</code> 返回数组 nums 中索引 <code>left</code> 和索引 <code>right</code> 之间（ 包含 ）的 <code>nums</code> 元素的 和 （即，<code>nums[left] + nums[left + 1], ..., nums[right]</code>）</li></ul><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-100 &lt;= nums[i] &lt;= 100</code></li><li><code>0 &lt;= index &lt; nums.length</code></li><li><code>-100 &lt;= val &lt;= 100</code></li><li><code>0 &lt;= left &lt;= right &lt; nums.length</code></li><li>调用 <code>update</code> 和 <code>sumRange</code> 方法次数不大于 <code>3 * 104 </code></li></ul><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;NumArray&quot;, &quot;sumRange&quot;, &quot;update&quot;, &quot;sumRange&quot;]</span><br><span class="line">[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]</span><br><span class="line">输出：</span><br><span class="line">[null, 9, null, 8]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">NumArray numArray = new NumArray([1, 3, 5]);</span><br><span class="line">numArray.sumRange(0, 2); // 返回 1 + 3 + 5 = 9</span><br><span class="line">numArray.update(1, 2);   // nums = [1,2,5]</span><br><span class="line">numArray.sumRange(0, 2); // 返回 1 + 2 + 5 = 8</span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>树状数组可以在比较小的时间复杂度下解决这一题：<a href="https://leetcode-cn.com/problems/range-sum-query-mutable/">#307 区域和检索 - 数组可修改</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    BinaryIndexedTree bit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nums = nums;</span><br><span class="line">        <span class="built_in">this</span>.bit = <span class="keyword">new</span> <span class="title class_">BinaryIndexedTree</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        bit.update(index + <span class="number">1</span>, val - nums[index]);</span><br><span class="line">        nums[index] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bit.query(left, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣杯秋季编程大赛 2021 战队赛</title>
      <link href="/post/25c59040-2fea-11ec-a701-53779506e8d2/"/>
      <url>/post/25c59040-2fea-11ec-a701-53779506e8d2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>第一次和小伙伴一起参加战队赛，根据以往经验以为只能做出来一题，结果还真就一题。但是第一题实在是太白给了，都不能算题，所以说相当于一题都没做出来。</p><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><h3 id="第-0-题：开幕式焰火"><a href="#第-0-题：开幕式焰火" class="headerlink" title="第 0 题：开幕式焰火"></a>第 0 题：开幕式焰火</h3><p>沾点白给了，一开始觉得应该没这么简单，还反复检查确认，多少沾点懦弱哥了，递归一套就完事了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lcp44</span> &#123;</span><br><span class="line"></span><br><span class="line">    Set&lt;Integer&gt; set;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开幕式火焰</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numColor</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> set.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        set.add(root.val);</span><br><span class="line">        dfs(root.left);</span><br><span class="line">        dfs(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第-1-题：自行车炫技赛场"><a href="#第-1-题：自行车炫技赛场" class="headerlink" title="第 1 题：自行车炫技赛场"></a>第 1 题：自行车炫技赛场</h3><p>这题 byd 是真难读题啊，和小伙伴解题过程中碰到了一个小问题，解决了又来一个。不是 <code>Wrong Answer</code> 、<code>Time Limit Exceeded</code> 就是 <code>Runtime Error</code> 到比赛结束了都一致认为只要存在高度差速度就肯定会一直下降。其实，速度不一定会一直降的。可能会出现速度 <code>+1</code>、<code>-1</code> 一直重复走的情况。所以难点就是如何不走重复路，如果每次递归都开一个 <code>vis</code> 对象去判重的话，内存直接爆了，所以需要一个三维数组，三个向量分别是 <code>x</code>、 <code>y</code>、 <code>v</code> ，其中 <code>x</code>、<code>y</code> 是场地坐标，<code>v</code> 是速度。三个向量确定一个唯一值，重复跳出。我这里用的是 <code>HashSet</code>，比三维数组快一点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>[] dx = &#123;-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt; ans;</span><br><span class="line">    Set&lt;String&gt; mem;</span><br><span class="line">    <span class="type">boolean</span>[][] global;</span><br><span class="line">    <span class="type">int</span>[] p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] bicycleYard(<span class="type">int</span>[] position, <span class="type">int</span>[][] terrain, <span class="type">int</span>[][] obstacle) &#123;</span><br><span class="line">        ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        mem = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        global = <span class="keyword">new</span> <span class="title class_">boolean</span>[terrain.length][terrain[<span class="number">0</span>].length];</span><br><span class="line">        p = position;</span><br><span class="line">        bfs(<span class="number">1</span>, position[<span class="number">0</span>], position[<span class="number">1</span>], terrain, obstacle);</span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[ans.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ans.size(); i++) &#123;</span><br><span class="line">            res[i] = ans.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(res, (o1, o2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (o1[<span class="number">0</span>] == o2[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1[<span class="number">1</span>], o2[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1[<span class="number">0</span>], o2[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> curr, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span>[][] terrain, <span class="type">int</span>[][] obstacle)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt; terrain.length &amp;&amp; y &lt; terrain[<span class="number">0</span>].length) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">newX</span> <span class="operator">=</span> x + dx[i];</span><br><span class="line">                <span class="type">int</span> <span class="variable">newY</span> <span class="operator">=</span> y + dy[i];</span><br><span class="line">                <span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newX &lt; terrain.length &amp;&amp; newY &lt; terrain[<span class="number">0</span>].length) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> curr + terrain[x][y] - terrain[newX][newY] - obstacle[newX][newY];</span><br><span class="line">                    <span class="comment">// i, j, v 作为唯一 key</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">k</span> <span class="operator">=</span> newX + <span class="string">&quot;-&quot;</span> + newY + <span class="string">&quot;-&quot;</span> + next;</span><br><span class="line">                    <span class="keyword">if</span> (mem.contains(k)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    mem.add(k);</span><br><span class="line">                    <span class="keyword">if</span> (next &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (next == <span class="number">1</span> &amp;&amp; (newX != p[<span class="number">0</span>] || newY != p[<span class="number">1</span>]) &amp;&amp; !global[newX][newY]) &#123;</span><br><span class="line">                            global[newX][newY] = <span class="literal">true</span>;</span><br><span class="line">                            ans.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;newX, newY&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        bfs(next, newX, newY, terrain, obstacle);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次组队参加战队赛，虽然结果不太理想，但是和小伙伴一起思考，一起交流的过程还是非常美妙的。想起了 OG 战队的 ceb 在 Ti8 Grand Finals 最后一场开始前的一句话：</p><blockquote><p>Lose together, win together, slay together, slay together, slay together.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode #1986 完成任务的最少工作时间段</title>
      <link href="/post/041e2f70-0c8a-11ec-8fd3-4363d76d2529/"/>
      <url>/post/041e2f70-0c8a-11ec-8fd3-4363d76d2529/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>你被安排了 <code>n</code> 个任务。任务需要花费的时间用长度为 <code>n</code> 的整数数组 <code>tasks</code> 表示，第 <code>i</code> 个任务需要花费 <code>tasks[i]</code> 小时完成。一个 <strong>工作时间段</strong> 中，你可以 <strong>至多</strong> 连续工作 <code>sessionTime</code> 个小时，然后休息一会儿。</p><p>你需要按照如下条件完成给定任务：</p><ul><li><p>如果你在某一个时间段开始一个任务，你需要在 <strong>同一个</strong> 时间段完成它。</p></li><li><p>完成一个任务后，你可以 <strong>立马</strong> 开始一个新的任务。</p></li><li><p>你可以按 <strong>任意顺序</strong> 完成任务。</p></li></ul><p>给你 <code>tasks</code> 和 <code>sessionTime</code> ，请你按照上述要求，返回完成所有任务所需要的 <strong>最少</strong> 数目的 工作时间段 。</p><p>测试数据保证 <code>sessionTime</code> 大于等于 <code>tasks[i]</code> 中的 <strong>最大值</strong> 。</p><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><ul><li><code>n == tasks.length</code></li><li><code>1 &lt;= n &lt;= 14</code></li><li><code>1 &lt;= tasks[i] &lt;= 10</code></li><li><code>max(tasks[i]) &lt;= sessionTime &lt;= 15</code></li></ul><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：tasks = [1,2,3], sessionTime = 3</span><br><span class="line">输出：2</span><br><span class="line">解释：你可以在两个工作时间段内完成所有任务。</span><br><span class="line">- 第一个工作时间段：完成第一和第二个任务，花费 1 + 2 = 3 小时。</span><br><span class="line">- 第二个工作时间段：完成第三个任务，花费 3 小时。</span><br></pre></td></tr></table></figure><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：tasks = [3,1,3,1,1], sessionTime = 8</span><br><span class="line">输出：2</span><br><span class="line">解释：你可以在两个工作时间段内完成所有任务。</span><br><span class="line">- 第一个工作时间段：完成除了最后一个任务以外的所有任务，花费 3 + 1 + 3 + 1 = 8 小  时。</span><br><span class="line">- 第二个工作时间段，完成最后一个任务，花费 1 小时。</span><br></pre></td></tr></table></figure><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a><strong>示例 3：</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tasks = [1,2,3,4,5], sessionTime = 15</span><br><span class="line">输出：1</span><br><span class="line">解释：你可以在一个工作时间段以内完成所有任务。</span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>第 256 场周赛周赛第三题，那天早上没爬起来，今天尝试做下，感觉应该是状态压缩的动态规划。不过动态规划始终不会写，就尝试先画递归树，发现重复元素的路径可以压缩（一直没学过状态压缩，难道这就是状态压缩？）就先写个桶记录元素和元素个数，这样就不会走重复路径了。</p><p>然后写了个有点别扭的回溯，居然一次过了，看来以后 dp 的题，全用记忆化递归做了是要。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSessions</span><span class="params">(<span class="type">int</span>[] tasks, <span class="type">int</span> sessionTime)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> task : tasks) &#123;</span><br><span class="line">            bucket[task]++;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(bucket, <span class="number">0</span>, sessionTime, <span class="number">0</span>, tasks.length);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] bucket, <span class="type">int</span> sum, <span class="type">int</span> sessionTime, <span class="type">int</span> cnt, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            ans = Math.min(cnt + <span class="number">1</span>, ans);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucket[i] &gt; <span class="number">0</span> &amp;&amp; i + sum &lt;= sessionTime) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            dfs(bucket, <span class="number">0</span>, sessionTime, cnt + <span class="number">1</span>, len);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bucket[i] &gt; <span class="number">0</span> &amp;&amp; i + sum &lt;= sessionTime) &#123;</span><br><span class="line">                    bucket[i]--;</span><br><span class="line">                    dfs(bucket, i + sum, sessionTime, cnt, len - <span class="number">1</span>);</span><br><span class="line">                    bucket[i]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 记忆化递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode #1981 最小化目标值与所选元素的差</title>
      <link href="/post/b26c6980-04af-11ec-b84f-7162fcaf05f2/"/>
      <url>/post/b26c6980-04af-11ec-b84f-7162fcaf05f2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>给你一个大小为 <code>m x n</code> 的整数矩阵 <code>mat</code> 和一个整数 <code>target</code> 。</p><p>从矩阵的 <strong>每一行</strong> 中选择一个整数，你的目标是 <strong>最小化</strong> 所有选中元素之 <strong>和</strong> 与目标值 <code>target</code> 的 <strong>绝对差</strong> 。</p><p>返回 <strong>最小的绝对差</strong> 。</p><p><code>a</code> 和 <code>b</code> 两数字的 <strong>绝对差</strong> 是 <code>a - b</code> 的绝对值。</p><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><ul><li><code>m == mat.length</code></li><li><code>n == mat[i].length</code></li><li><code>1 &lt;= m, n &lt;= 70</code></li><li><code>1 &lt;= mat[i][j] &lt;= 70</code></li><li><code>1 &lt;= target &lt;= 800</code></li></ul><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h3><p><img src="https://assets.leetcode.com/uploads/2021/08/03/matrix1.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13</span><br><span class="line">输出：0</span><br><span class="line">解释：一种可能的最优选择方案是：</span><br><span class="line">- 第一行选出 1</span><br><span class="line">- 第二行选出 5</span><br><span class="line">- 第三行选出 7</span><br><span class="line">所选元素的和是 13 ，等于目标值，所以绝对差是 0 。</span><br></pre></td></tr></table></figure><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h3><p><img src="https://assets.leetcode.com/uploads/2021/08/03/matrix1-1.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[1],[2],[3]], target = 100</span><br><span class="line">输出：94</span><br><span class="line">解释：唯一一种选择方案是：</span><br><span class="line">- 第一行选出 1</span><br><span class="line">- 第二行选出 2</span><br><span class="line">- 第三行选出 3</span><br><span class="line">所选元素的和是 6 ，绝对差是 94 。</span><br></pre></td></tr></table></figure><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a><strong>示例 3：</strong></h3><p><img src="https://assets.leetcode.com/uploads/2021/08/03/matrix1-3.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[1,2,9,8,7]], target = 6</span><br><span class="line">输出：1</span><br><span class="line">解释：最优的选择方案是选出第一行的 7 。</span><br><span class="line">绝对差是 1 。</span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>第 255 场周赛第三题，一开始就看出来是 dp 了，不过一下子妹写出来，最后还是靠的记忆化递归过的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, Set&lt;Integer&gt;&gt; map;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最小化目标值与所选元素的差</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimizeTheDifference</span><span class="params">(<span class="type">int</span>[][] mat, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : mat) &#123;</span><br><span class="line">            Arrays.sort(ints);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(mat, target, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] mat, <span class="type">int</span> target, <span class="type">int</span> curr, <span class="type">int</span> step)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (step &gt;= mat.length) &#123;</span><br><span class="line">            ans = Math.min(Math.abs(target - curr), ans);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mat[<span class="number">0</span>].length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr + mat[step][i] - target &gt; ans) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (map.get(step) != <span class="literal">null</span> &amp;&amp; map.get(step).contains(curr + mat[step][i])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(step, map.getOrDefault(step, <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;()));</span><br><span class="line">            map.get(step).add(curr + mat[step][i]);</span><br><span class="line">            dfs(mat, target, curr + mat[step][i], step + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 记忆化递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 笔记十</title>
      <link href="/post/1e254360-eab9-11eb-9401-dda5e5a2198a/"/>
      <url>/post/1e254360-eab9-11eb-9401-dda5e5a2198a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Q：Redis主从同步与故障切换，有哪些坑？"><a href="#Q：Redis主从同步与故障切换，有哪些坑？" class="headerlink" title="Q：Redis主从同步与故障切换，有哪些坑？"></a>Q：Redis主从同步与故障切换，有哪些坑？</h1><h2 id="故障一：主从数据不一致"><a href="#故障一：主从数据不一致" class="headerlink" title="故障一：主从数据不一致"></a>故障一：主从数据不一致</h2><p>因为主从库间的命令复制是异步进行的。</p><p>一方面，主从库间的网络可能会有传输延迟，所以从库不能及时地收到主库发送的命令，从库上执行同步命令的时间就会被延后。</p><p>另一方面，即使从库及时收到了主库的命令，但是，也可能会因为正在处理其它复杂度高的命令（例如集合操作命令）而阻塞。</p><p><strong>解决方法</strong></p><p>首先，<strong>在硬件环境配置方面，我们要尽量保证主从库间的网络连接状况良好。</strong>例如，我们要避免把主从库部署在不同的机房，或者是避免把网络通信密集的应用（例如数据分析应用）和 Redis 主从库部署在一起。</p><p>另外，<strong>我们还可以开发一个外部程序来监控主从库间的复制进度。</strong></p><p>如果某个从库的进度差值大于我们预设的阈值，我们可以让客户端不再和这个从库连接进行数据读取，这样就可以减少读到不一致数据的情况。不过，为了避免出现客户端和所有从库都不能连接的情况，我们需要把复制进度差值的阈值设置得大一些。</p><h2 id="故障二：读取过期数据"><a href="#故障二：读取过期数据" class="headerlink" title="故障二：读取过期数据"></a>故障二：读取过期数据</h2><p>这个问题主要发生在从库读取数据。</p><p>首先，我们都知道 Redis 同时使用了两种策略来删除过期的数据，分别是惰性删除策略和定期删除策略。</p><p>其中定期删除策略是指，Redis 每隔一段时间（默认 100ms），就会随机选出一定数量的数据，检查它们是否过期，并把其中过期的数据删除，这样就可以及时释放一些内存。</p><p>因为从库无法删除数据，所以读到过期的数据之后，不会采用惰性删除，会导致返回过期的数据。<strong>但是只是 Redis 3.2 之前的版本，在 3.2 版本后，Redis 做了改进，如果读取的数据已经过期了，从库虽然不会删除，但是会返回空值。</strong></p><p><font color=red><em>即使使用了 Redis 3.2 后的版本，还是会出现读到过期数据的情况</em></font></p><p>因为 Redis 的过期分为两种</p><ul><li>EXPIRE 和 PEXPIRE：它们给数据设置的是从命令执行时开始计算的存活时间；</li><li>EXPIREAT 和 PEXPIREAT：它们会直接把数据的过期时间设置为具体的一个时间点。</li></ul><p>我们分开来看，<strong>如果设定的是 xx 秒&#x2F;天 之类的过期，就会因为网络拥塞、延迟导致过期时间延后。</strong>主从库全量同步花费了 2 分钟才完成。等从库开始执行这条命令时，时间已经是 9 点 2 分了。而 EXPIRE 命令是把 testkey 的过期时间设置为当前时间的 60s 后，也就是 9 点 3 分。如果客户端在 9 点 2 分 30 秒时在从库上读取 testkey，仍然可以读到 testkey 的值。但是，testkey 实际上已经过期了。</p><blockquote><p>这也太拉胯了。。。讲道理从库同步主库数据（有需要过期的 kv）应该改成同步他的过期时间，而不是时长。</p></blockquote><p><strong>如果设定的是具体的过期日期，也会因为和主库的时钟不一致，从而产生问题。</strong></p><p>所以应对过期 key 的问题，需要：</p><ol start="0"><li>保证良好网络环境，以及使用程序监控从库复制进度，一旦从库复制进度超过阈值，不让客户端连接从库。</li><li>使用 Redis 3.2 及以上版本；尽量使用 EXPIREAT&#x2F;PEXPIREAT 命令设置过期时间，避免从库上的数据过期时间滞后。</li><li>另外，主从节点上的时钟要保持一致，具体的做法是，让主从节点和相同的 NTP 服务器（时间服务器）进行时钟同步。</li></ol><h2 id="故障三：不合理配置项导致的服务挂掉"><a href="#故障三：不合理配置项导致的服务挂掉" class="headerlink" title="故障三：不合理配置项导致的服务挂掉"></a>故障三：不合理配置项导致的服务挂掉</h2><h3 id="protected-mode-配置项"><a href="#protected-mode-配置项" class="headerlink" title="protected-mode 配置项"></a>protected-mode 配置项</h3><p>这个配置项的作用是限定哨兵实例能否被其他服务器访问。当这个配置项设置为 yes 时，哨兵实例只能在部署的服务器本地进行访问。当设置为 no 时，其他服务器也可以访问这个哨兵实例。</p><p>正因为这样，如果 protected-mode 被设置为 yes，而其余哨兵实例部署在其它服务器，那么，这些哨兵实例间就无法通信。当主库故障时，哨兵无法判断主库下线，也无法进行主从切换，最终 Redis 服务不可用。</p><p><strong>所以，我们在应用主从集群时，要注意将 protected-mode 配置项设置为 no，并且将 bind 配置项设置为其它哨兵实例的 IP 地址。</strong>这样一来，只有在 bind 中设置了 IP 地址的哨兵，才可以访问当前实例，既保证了实例间能够通信进行主从切换，也保证了哨兵的安全性。</p><h3 id="cluster-node-timeout-配置项"><a href="#cluster-node-timeout-配置项" class="headerlink" title="cluster-node-timeout 配置项"></a>cluster-node-timeout 配置项</h3><p>这个配置项设置了 Redis Cluster 中实例响应心跳消息的超时时间。</p><p>如果执行主从切换的实例超过半数，而主从切换时间又过长的话，就可能有半数以上的实例心跳超时，从而可能导致整个集群挂掉。所以建议将 cluster-node-timeout 调大些（例如 10 到 20 秒）。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-92a397de1b796710a4deea103ddbbdd7b4d0d82b.jpg" alt="img" style="zoom:15%;" /><p>Q：我们把 slave-read-only 设置为 no，让从库也能直接删除数据，以此来避免读到过期数据，你觉得，这是一个好方法吗？</p><p>A：不太好，因为增加一个特性是为了解决 bug，但是采用从库也能写数据的方式无疑是会增加 bug，还是会产生数据不一致的情况。。</p><h2 id="Q：Redis支撑秒杀场景的关键技术和实践都有哪些"><a href="#Q：Redis支撑秒杀场景的关键技术和实践都有哪些" class="headerlink" title="Q：Redis支撑秒杀场景的关键技术和实践都有哪些"></a>Q：Redis支撑秒杀场景的关键技术和实践都有哪些</h2><h2 id="秒杀场景的负载特征对支撑系统的要求"><a href="#秒杀场景的负载特征对支撑系统的要求" class="headerlink" title="秒杀场景的负载特征对支撑系统的要求"></a>秒杀场景的负载特征对支撑系统的要求</h2><p>第一个特征是瞬时并发访问量非常高。</p><p>第二个特征是读多写少，而且读操作是简单的查询操作。</p><h2 id="Redis-可以在秒杀场景的哪些环节发挥作用？"><a href="#Redis-可以在秒杀场景的哪些环节发挥作用？" class="headerlink" title="Redis 可以在秒杀场景的哪些环节发挥作用？"></a>Redis 可以在秒杀场景的哪些环节发挥作用？</h2><p>我们一般可以把秒杀活动分成三个阶段。在每一个阶段，Redis 所发挥的作用也不一样。第一阶段是秒杀活动前。在这个阶段，用户会不断刷新商品详情页，这会导致详情页的瞬时请求量剧增。这个阶段的应对方案，一般是尽量把商品详情页的页面元素静态化，然后使用 CDN 或是浏览器把这些静态化的元素缓存起来。</p><p>秒杀开始什么环节可以在 Redis 中进行？</p><ol start="0"><li>大量高并发的库存查验请求，这个环节使用 Redis 保存库存量，请求可以直接从 Redis 中读取库存并进行查验。</li><li><strong>库存扣减操作，不能交给后端数据库处理。</strong><ol><li>额外的开销。Redis 中保存了库存量，而库存量的最新值又是数据库在维护，所以数据库更新后，还需要和 Redis 进行同步，这个过程增加了额外的操作逻辑，也带来了额外的开销。</li><li>下单量超过实际库存量，出现超售。由于数据库的处理速度较慢，不能及时更新库存余量，这就会导致大量库存查验的请求读取到旧的库存值，并进行下单。此时，就会出现下单数量大于实际的库存量，导致出现超售，这就不符合业务层的要求了。</li></ol></li><li>库存的扣减在 Redis 中进行。而且，为了避免请求查询到旧的库存值，库存查验和库存扣减这两个操作需要保证原子性。</li></ol><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-d53e0969044146e12634e4bbda50673722f64806.jpg" alt="img" style="zoom:15%;" /><h2 id="Redis-的哪些方法可以支撑秒杀场景？"><a href="#Redis-的哪些方法可以支撑秒杀场景？" class="headerlink" title="Redis 的哪些方法可以支撑秒杀场景？"></a>Redis 的哪些方法可以支撑秒杀场景？</h2><ul><li>支持高并发。这个很简单，Redis 本身高速处理请求的特性就可以支持高并发。而且，如果有多个秒杀商品，我们也可以使用切片集群，用不同的实例保存不同商品的库存，这样就避免，使用单个实例导致所有的秒杀请求都集中在一个实例上的问题了。不过，需要注意的是，当使用切片集群时，我们要先用 CRC 算法计算不同秒杀商品 key 对应的 Slot，然后，我们在分配 Slot 和实例对应关系时，才能把不同秒杀商品对应的 Slot 分配到不同实例上保存。</li><li>保证库存查验和库存扣减原子性执行。针对这条要求，我们就可以使用 Redis 的原子操作或是分布式锁这两个功能特性来支撑了。</li></ul><h3 id="基于原子操作支撑秒杀场景"><a href="#基于原子操作支撑秒杀场景" class="headerlink" title="基于原子操作支撑秒杀场景"></a>基于原子操作支撑秒杀场景</h3><p>虽然 Redis 具有原子性的加减，但是还有一步是查验操作，需要【查询 + 加减库存】，所以需要搞个 lua 脚本实现原子性操作。</p><h3 id="基于分布式锁来支撑秒杀场景"><a href="#基于分布式锁来支撑秒杀场景" class="headerlink" title="基于分布式锁来支撑秒杀场景"></a>基于分布式锁来支撑秒杀场景</h3><p>先让客户端向 Redis 申请分布式锁，只有拿到锁的客户端才能执行库存查验和库存扣减。这样一来，大量的秒杀请求就会在争夺分布式锁时被过滤掉。而且，库存查验和扣减也不用使用原子操作了，因为多个并发客户端只有一个客户端能够拿到锁，已经保证了客户端并发访问的互斥性。</p><p>所以，可以使用切片集群中的不同实例来分别保存分布式锁和商品库存信息。使用这种保存方式后，秒杀请求会首先访问保存分布式锁的实例。如果客户端没有拿到锁，这些客户端就不会查询商品库存，这就可以减轻保存库存信息的实例的压力了。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ol start="0"><li>前端静态页面的设计。秒杀页面上能静态化处理的页面元素，我们都要尽量静态化，这样可以充分利用 CDN 或浏览器缓存服务秒杀开始前的请求。</li><li>请求拦截和流控。在秒杀系统的接入层，对恶意请求进行拦截，避免对系统的恶意攻击，例如使用黑名单禁止恶意 IP 进行访问。如果 Redis 实例的访问压力过大，为了避免实例崩溃，我们也需要在接入层进行限流，控制进入秒杀系统的请求数量。</li><li>库存信息过期时间处理。Redis 中保存的库存信息其实是数据库的缓存，为了避免缓存击穿问题，我们不要给库存信息设置过期时间。</li><li>数据库订单异常处理。如果数据库没能成功处理订单，可以增加订单重试功能，保证订单最终能被成功处理。</li></ol><h1 id="Q：如何应对数据倾斜"><a href="#Q：如何应对数据倾斜" class="headerlink" title="Q：如何应对数据倾斜"></a>Q：如何应对数据倾斜</h1><p>数据倾斜有两类。</p><ul><li>数据量倾斜：在某些情况下，实例上的数据分布不均衡，某个实例上的数据特别多。</li><li>数据访问倾斜：虽然每个集群实例上的数据量相差不大，但是某个实例上的数据是热点数据，被访问得非常频繁。</li></ul><h2 id="数据量倾斜的成因和应对方法"><a href="#数据量倾斜的成因和应对方法" class="headerlink" title="数据量倾斜的成因和应对方法"></a>数据量倾斜的成因和应对方法</h2><p>那么，数据量倾斜是怎么产生的呢？这主要有三个原因，分别是某个实例上保存了 <strong>bigkey</strong>、<strong>Slot</strong> 分配不均衡以及 <strong>Hash Tag</strong>。</p><h3 id="bigkey-导致倾斜"><a href="#bigkey-导致倾斜" class="headerlink" title="bigkey 导致倾斜"></a>bigkey 导致倾斜</h3><p>第一个原因是，某个实例上正好保存了 bigkey。bigkey 的 value 值很大（String 类型），或者是 bigkey 保存了大量集合元素（集合类型），会导致这个实例的数据量增加，内存资源消耗也相应增加。</p><p>解决：</p><p>一个根本的应对方法是，我们在业务层生成数据时，要尽量避免把过多的数据保存在同一个键值对中。</p><p>此外，如果 bigkey 正好是集合类型，我们还有一个方法，就是把 bigkey 拆分成很多个小的集合类型数据，分散保存在不同的实例上。</p><h3 id="Slot-分配不均衡导致倾斜"><a href="#Slot-分配不均衡导致倾斜" class="headerlink" title="Slot 分配不均衡导致倾斜"></a>Slot 分配不均衡导致倾斜</h3><p>如果集群运维人员没有均衡地分配 Slot，就会有大量的数据被分配到同一个 Slot 中，而同一个 Slot 只会在一个实例上分布（该实例配置较高），这就会导致，大量数据被集中到一个实例上，造成数据倾斜。</p><p>在 Redis Cluster 中，我们可以使用 3 个命令完成 Slot 迁移。</p><ul><li>CLUSTER SETSLOT：使用不同的选项进行三种设置，分别是设置 Slot 要迁入的目标实例，Slot 要迁出的源实例，以及 Slot 所属的实例。</li><li>CLUSTER GETKEYSINSLOT：获取某个 Slot 中一定数量的 key。</li><li>MIGRATE：把一个 key 从源实例实际迁移到目标实例。</li></ul><h3 id="Hash-Tag-导致倾斜"><a href="#Hash-Tag-导致倾斜" class="headerlink" title="Hash Tag 导致倾斜"></a>Hash Tag 导致倾斜</h3><p>Hash Tag 是指加在键值对 key 中的一对花括号{}。这对括号会把 key 的一部分括起来，客户端在计算 key 的 CRC16 值时，只对 Hash Tag 花括号中的 key 内容进行计算。如果没用 Hash Tag 的话，客户端计算整个 key 的 CRC16 的值。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-bb5c8da729e6cf481825356a4e84551c75643804.jpg" alt="img" style="zoom:15%;" /><p>其中，user:profile:{3231}和 user:order:{3231}的 Hash Tag 一样，都是 3231，它们的 CRC16 计算值对 16384 取模后的值也是一样的，所以就对应映射到了相同的 Slot 1024 中。user:profile:{5328}和 user:order:{5328}也是相同的映射结果。</p><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p>通常来说，热点数据以服务读操作为主，在这种情况下，我们可以采用热点数据多副本的方法来应对。</p><p>这个方法的具体做法是，我们把热点数据复制多份，在每一个数据副本的 key 中增加一个随机前缀，让它和其它副本数据不会被映射到同一个 Slot 中。</p><p>热点数据多副本方法只能针对只读的热点数据。如果热点数据是有读有写的话，就不适合采用多副本方法了，因为要保证多副本间的数据一致性，会带来额外的开销。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-cae93449e7f9deeff622059d9103508fb882521e.jpg" alt="img" style="zoom:15%;" />]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 笔记九</title>
      <link href="/post/ed60b400-e908-11eb-9a84-25c4901703d0/"/>
      <url>/post/ed60b400-e908-11eb-9a84-25c4901703d0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Q：单机上的锁和分布式锁的联系与区别"><a href="#Q：单机上的锁和分布式锁的联系与区别" class="headerlink" title="Q：单机上的锁和分布式锁的联系与区别"></a>Q：单机上的锁和分布式锁的联系与区别</h1><p>对于在单机上运行的多线程程序来说，锁本身可以用一个变量表示。</p><ul><li>变量值为 0 时，表示没有线程获取锁；</li><li>变量值为 1 时，表示已经有线程获取到锁了。</li></ul><p>和单机上的锁类似，分布式锁同样可以用一个变量来实现。客户端加锁和释放锁的操作逻辑，也和单机上的加锁和释放锁操作逻辑一致：加锁时同样需要判断锁变量的值，根据锁变量值来判断能否加锁成功；释放锁时需要把锁变量值设置为 0，表明客户端不再持有锁。</p><p>但是，和线程在单机上操作锁不同的是，在分布式场景下，锁变量需要由一个共享存储系统来维护，只有这样，多个客户端才可以通过访问共享存储系统来访问锁变量。相应的，加锁和释放锁的操作就变成了读取、判断和设置共享存储系统中的锁变量值。</p><p>这样一来，我们就可以得出实现分布式锁的两个要求。</p><ul><li>要求一：分布式锁的加锁和释放锁的过程，涉及多个操作。所以，在实现分布式锁时，我们需要保证这些锁操作的原子性；</li><li>要求二：共享存储系统保存了锁变量，如果共享存储系统发生故障或宕机，那么客户端也就无法进行锁操作了。在实现分布式锁时，我们需要考虑保证共享存储系统的可靠性，进而保证锁的可靠性。</li></ul><h1 id="Q：基于单个-Redis-节点实现分布式锁"><a href="#Q：基于单个-Redis-节点实现分布式锁" class="headerlink" title="Q：基于单个 Redis 节点实现分布式锁"></a>Q：基于单个 Redis 节点实现分布式锁</h1><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-363a31c71fc91f862b2702c906d2860605fe2bfc.jpg?wh=2820*2250" alt="img" style="zoom:15%;" /><p>在图中，客户端 A 和 C 同时请求加锁。因为 Redis 使用单线程处理请求，所以，即使客户端 A 和 C 同时把加锁请求发给了 Redis，Redis 也会串行处理它们的请求。</p><p>我们假设 Redis 先处理客户端 A 的请求，读取 lock_key 的值，发现 lock_key 为 0，所以，Redis 就把 lock_key 的 value 置为 1，表示已经加锁了。紧接着，Redis 处理客户端 C 的请求，此时，Redis 会发现 lock_key 的值已经为 1 了，所以就返回加锁失败的信息。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-0d88c0b64070d9e4e621835af006d68e6ae26d9b.jpg?wh=3000*2250" alt="img" style="zoom:15%;" /><p>当客户端 A 持有锁时，锁变量 lock_key 的值为 1。客户端 A 执行释放锁操作后，Redis 将 lock_key 的值置为 0，表明已经没有客户端持有锁了。</p><p>要想保证操作的原子性，有两种通用的方法，分别是使用 Redis 的单命令操作和使用 Lua 脚本。</p><p>首先是 SETNX 命令，它用于设置键值对的值。具体来说，就是这个命令在执行时会判断键值对是否存在，如果不存在，就设置键值对的值，如果存在，就不做任何设置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 加锁</span><br><span class="line">SETNX lock_key 1</span><br><span class="line">// 业务逻辑</span><br><span class="line">DO THINGS</span><br><span class="line">// 释放锁</span><br><span class="line">DEL lock_key</span><br></pre></td></tr></table></figure><p>对于释放锁操作来说，我们可以在执行完业务逻辑后，使用 DEL 命令删除锁变量。不过，你不用担心锁变量被删除后，其他客户端无法请求加锁了。因为 SETNX 命令在执行时，如果要设置的键值对（也就是锁变量）不存在，SETNX 命令会先创建键值对，然后设置它的值。所以，释放锁之后，再有客户端请求加锁时，SETNX 命令会创建保存锁变量的键值对，并设置锁变量的值，完成加锁。</p><p>总结来说，我们就可以用 SETNX 和 DEL 命令组合来实现加锁和释放锁操作。下面的伪代码示例显示了锁操作的过程，你可以看下。</p><h2 id="使用-SETNX-和-DEL-命令组合实现分布锁，存在两个潜在的风险。"><a href="#使用-SETNX-和-DEL-命令组合实现分布锁，存在两个潜在的风险。" class="headerlink" title="使用 SETNX 和 DEL 命令组合实现分布锁，存在两个潜在的风险。"></a>使用 SETNX 和 DEL 命令组合实现分布锁，存在两个潜在的风险。</h2><p><strong>风险一</strong>：假如某个客户端在执行了 SETNX 命令、加锁之后，紧接着却在操作共享数据时发生了异常，结果一直没有执行最后的 DEL 命令释放锁。因此，锁就一直被这个客户端持有，其它客户端无法拿到锁，也无法访问共享数据和执行后续操作，这会给业务应用带来影响。</p><p><strong>解决</strong>：针对这个问题，一个有效的解决方法是，给锁变量设置一个过期时间。这样一来，即使持有锁的客户端发生了异常，无法主动地释放锁，Redis 也会根据锁变量的过期时间，在锁变量过期后，把它删除。其它客户端在锁变量过期后，就可以重新请求加锁，这就不会出现无法加锁的问题了。</p><p><strong>风险二</strong>：如果客户端 A 执行了 SETNX 命令加锁后，假设客户端 B 执行了 DEL 命令释放锁，此时，客户端 A 的锁就被误释放了。如果客户端 C 正好也在申请加锁，就可以成功获得锁，进而开始操作共享数据。这样一来，客户端 A 和 C 同时在对共享数据进行操作，数据就会被修改错误，这也是业务层不能接受的。</p><p><strong>解决</strong>：要能区分来自不同客户端的锁操作，可以在锁变量的值上想想办法。在使用 SETNX 命令进行加锁的方法中，我们通过把锁变量值设置为 1 或 0，表示是否加锁成功。1 和 0 只有两种状态，无法表示究竟是哪个客户端进行的锁操作。所以，我们在加锁操作时，可以让每个客户端给锁变量设置一个唯一值，这里的唯一值就可以用来标识当前操作的客户端。在释放锁操作时，客户端需要判断，当前锁变量的值是否和自己的唯一标识相等，只有在相等的情况下，才能释放锁。这样一来，就不会出现误释放锁的问题了。SET 命令在执行时还可以带上 EX 或 PX 选项，用来设置键值对的过期时间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SET key value [EX seconds | PX milliseconds]  [NX]</span><br><span class="line">// 例子</span><br><span class="line">// 加锁, unique_value作为客户端唯一性的标识</span><br><span class="line">SET lock_key unique_value NX PX 10000</span><br></pre></td></tr></table></figure><p><strong>NX：类似 SETNX，当不存在才 set 一个 kv</strong></p><p>虽然使用 SET 命令和 Lua 脚本在 Redis 单节点上实现分布式锁。但是现在只用了一个 Redis 实例来保存锁变量，如果这个 Redis 实例发生故障宕机了，那么锁变量就没有了。此时，客户端也无法进行锁操作了，这就会影响到业务的正常执行。所以，我们在实现分布式锁时，还需要保证锁的可靠性。那怎么提高呢？这就要提到基于多个 Redis 节点实现分布式锁的方式了。</p><h2 id="基于多个-Redis-节点实现高可靠的分布式锁"><a href="#基于多个-Redis-节点实现高可靠的分布式锁" class="headerlink" title="基于多个 Redis 节点实现高可靠的分布式锁"></a>基于多个 Redis 节点实现高可靠的分布式锁</h2><p>Redlock 算法的基本思路，是让客户端和多个独立的 Redis 实例依次请求加锁，如果客户端能够和半数以上的实例成功地完成加锁操作，那么我们就认为，客户端成功地获得分布式锁了，否则加锁失败。这样一来，即使有单个 Redis 实例发生故障，因为锁变量在其它实例上也有保存，所以，客户端仍然可以正常地进行锁操作，锁变量并不会丢失。</p><p><strong>第一步是，客户端获取当前时间。</strong></p><p><strong>第二步是，客户端按顺序依次向 N 个 Redis 实例执行加锁操作。</strong></p><p>这里的加锁操作和在单实例上执行的加锁操作一样，使用 SET 命令，带上 NX，EX&#x2F;PX 选项，以及带上客户端的唯一标识。当然，如果某个 Redis 实例发生故障了，为了保证在这种情况下，Redlock 算法能够继续运行，我们需要给加锁操作设置一个超时时间。</p><p>如果客户端在和一个 Redis 实例请求加锁时，一直到超时都没有成功，那么此时，客户端会和下一个 Redis 实例继续请求加锁。加锁操作的超时时间需要远远地小于锁的有效时间，一般也就是设置为几十毫秒。</p><p><strong>第三步是，一旦客户端完成了和所有 Redis 实例的加锁操作，客户端就要计算整个加锁过程的总耗时。</strong></p><p>客户端只有在满足下面的这两个条件时，才能认为是加锁成功。</p><ul><li>条件一：客户端从超过半数（大于等于 $N&#x2F;2 + 1$）的 Redis 实例上成功获取到了锁；</li><li>条件二：客户端获取锁的总耗时没有超过锁的有效时间。</li></ul><p>在满足了这两个条件后，我们需要重新计算这把锁的有效时间，计算的结果是锁的最初有效时间减去客户端为获取锁的总耗时。</p><h1 id="Q：Redis-与事务"><a href="#Q：Redis-与事务" class="headerlink" title="Q：Redis 与事务"></a>Q：Redis 与事务</h1><p>事务的执行过程包含三个步骤，Redis 提供了 MULTI、EXEC 两个命令来完成这三个步骤。</p><p>第一步，客户端要使用一个命令显式地表示一个事务的开启。在 Redis 中，这个命令就是 MULTI。</p><p>第二步，客户端把事务中本身要执行的具体操作（例如增删改数据）发送给服务器端。这些操作就是 Redis 本身提供的数据读写命令，例如 GET、SET 等。不过，这些命令虽然被客户端发送到了服务器端，但 Redis 实例只是把这些命令暂存到一个命令队列中，并不会立即执行。</p><p>第三步，客户端向服务器端发送提交事务的命令，让数据库实际执行第二步中发送的具体操作。Redis 提供的 EXEC 命令就是执行事务提交的。当服务器端收到 EXEC 命令后，才会实际执行命令队列中的所有命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将a:stock减1，</span></span><br><span class="line">127.0.0.1:6379&gt; DECR a:stock</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将b:stock减1</span></span><br><span class="line">127.0.0.1:6379&gt; DECR b:stock</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">实际执行事务</span></span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) (integer) 4</span><br><span class="line">2) (integer) 9</span><br></pre></td></tr></table></figure><h1 id="Q：Redis-与原子性"><a href="#Q：Redis-与原子性" class="headerlink" title="Q：Redis 与原子性"></a>Q：Redis 与原子性</h1><p>先说个结论：虽然在这门课中声称是事务，但是 Redis 有个锤子的事务，原子性说白了也没法保障的，拉的一批。</p><ul><li><p>情况一：在执行 EXEC 命令前，客户端发送的操作命令本身就有错误（比如语法错误，使用了不存在的命令），在命令入队时就被 Redis 实例判断出来了。<strong>那么整个事务就会被放弃，这个勉强算半个事务。</strong></p></li><li><p>情况二：事务操作入队时，命令和操作的数据类型不匹配，但 Redis 实例没有检查出错误。<strong>例如出现了一条命令成功，一条失败的情况，那么并不会回滚，而是成功的命令就成功的执行了。</strong></p><ul><li><p>Redis 中并没有提供回滚机制。虽然 Redis 提供了 DISCARD 命令，但是，这个命令只能用来主动放弃事务执行，把暂存的命令队列清空，起不到回滚的效果。</p></li><li><p>可以像如下这样主动地终结事务，反正就是没什么卵用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">读取a:stock的值4</span></span><br><span class="line">127.0.0.1:6379&gt; GET a:stock</span><br><span class="line">&quot;4&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; MULTI </span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">发送事务的第一个操作，对a:stock减1</span></span><br><span class="line">127.0.0.1:6379&gt; DECR a:stock</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行DISCARD命令，主动放弃事务</span></span><br><span class="line">127.0.0.1:6379&gt; DISCARD</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再次读取a:stock的值，值没有被修改</span></span><br><span class="line">127.0.0.1:6379&gt; GET a:stock</span><br><span class="line">&quot;4&quot;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>情况三：在执行事务的 EXEC 命令时，Redis 实例发生了故障，导致事务执行失败。在这种情况下，如果 Redis 开启了 AOF 日志，那么，只会有部分的事务操作被记录到 AOF 日志中。<strong>我们需要使用 redis-check-aof 工具检查 AOF 日志文件，这个工具可以把未完成的事务操作从 AOF 文件中去除。</strong>使用 AOF 恢复实例后，事务操作不会再被执行，从而保证了原子性。</p></li></ul><blockquote><p>总结：你看这个 Redis 啊？才搞几个命令就不回滚了，真的太逊了。这个 Redis 就是逊啦。</p></blockquote><h1 id="Q：Redis-与一致性"><a href="#Q：Redis-与一致性" class="headerlink" title="Q：Redis 与一致性"></a>Q：Redis 与一致性</h1><p>可以理解一致性就是，应用系统从一个正确的状态到另一个正确的状态，而 ACID 就是说事务能够通过 AID 来保证这个 C 的过程。C 是目的，AID 都是手段。</p><p>所以个人感觉一致性拉胯</p><h1 id="Q：Redis-与隔离性"><a href="#Q：Redis-与隔离性" class="headerlink" title="Q：Redis 与隔离性"></a>Q：Redis 与隔离性</h1><p>事务的隔离性保证，会受到和事务一起执行的并发操作的影响。而事务执行又可以分成命令入队（EXEC 命令执行前）和命令实际执行（EXEC 命令执行后）两个阶段，所以，我们就针对这两个阶段，分成两种情况来分析：</p><ul><li>并发操作在 EXEC 命令前执行，此时，隔离性的保证要使用 WATCH 机制来实现，否则隔离性无法保证；</li><li>并发操作在 EXEC 命令后执行，此时，隔离性可以保证。</li></ul><p>WATCH 机制：在事务执行前，监控一个或多个键的值变化情况，当事务调用 EXEC 命令执行时，WATCH 机制会先检查监控的键是否被其它客户端修改了。如果修改了，就放弃事务执行，避免事务的隔离性被破坏。然后，客户端可以再次执行事务，此时，如果没有并发修改事务数据的操作了，事务就能正常执行，隔离性也得到了保证。</p><ul><li><p>情况一：一个事务的 EXEC 命令还没有执行时，事务的命令操作是暂存在命令队列中的。此时，如果有其它的并发操作，我们就需要看事务是否使用了 WATCH 机制。</p><ul><li>开启了 WATCH 机制（可以保证隔离性）：<img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-7ca1e4b12fe0dcd21ef9a9b13172ea4d044698ed.jpg" alt="img" style="zoom:15%;" /></li><li>未开启 WATCH 机制（无法保证隔离性）：<img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-c2252825080ed3d9a92ab17d313136202511341c.jpg" alt="img" style="zoom:15%;" /></li></ul></li><li><p>情况二：并发操作在 EXEC 命令之后被服务器端接收并执行。因为 Redis 是用单线程执行命令，而且，EXEC 命令执行后，Redis 会保证先把命令队列中的所有命令执行完。所以，在这种情况下，并发操作不会破坏事务的隔离性。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-f71276031be1b7be328bd5d4af477a7e7d40fee4.jpg" alt="img" style="zoom:15%;" /></li></ul><h1 id="Q：Redis-与持久性"><a href="#Q：Redis-与持久性" class="headerlink" title="Q：Redis 与持久性"></a>Q：Redis 与持久性</h1><p>如果 Redis 没有使用 RDB 或 AOF，那么事务的持久化属性肯定得不到保证。如果 Redis 使用了 RDB 模式，那么，在一个事务执行后，而下一次的 RDB 快照还未执行前，如果发生了实例宕机，这种情况下，事务修改的数据也是不能保证持久化的。</p><p>如果 Redis 采用了 AOF 模式，因为 AOF 模式的三种配置选项 no、everysec 和 always 都会存在数据丢失的情况，所以，事务的持久性属性也还是得不到保证。</p><p>所以，不管 Redis 采用什么持久化模式，事务的持久性属性是得不到保证的。</p><h1 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h1><p>Redis 通过 MULTI、EXEC、DISCARD 和 WATCH 四个命令来支持事务机制。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-3ca8592719eb0e01868ab0ab6398a897b64968af.jpg" alt="img" style="zoom:20%;" /><h2 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h2><p>Q：在执行事务时，如果 Redis 实例发生故障，而 Redis 使用了 RDB 机制，那么，事务的原子性还能得到保证吗？</p><p>A：可能能，RDB一般没这么快生成，所以理论上可以回滚到上一个 RDB 的版本。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 笔记八</title>
      <link href="/post/61c327b0-e841-11eb-88f0-e9ea35f6ec9b/"/>
      <url>/post/61c327b0-e841-11eb-88f0-e9ea35f6ec9b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Q：什么是缓存污染"><a href="#Q：什么是缓存污染" class="headerlink" title="Q：什么是缓存污染"></a>Q：什么是缓存污染</h1><p>那什么是缓存污染呢？在一些场景下，有些数据被访问的次数非常少，甚至只会被访问一次。当这些数据服务完访问请求后，如果还继续留存在缓存中的话，就只会白白占用缓存空间。这种情况，就是缓存污染。</p><h2 id="如何解决缓存污染？"><a href="#如何解决缓存污染？" class="headerlink" title="如何解决缓存污染？"></a>如何解决缓存污染？</h2><h3 id="LRU-的不足："><a href="#LRU-的不足：" class="headerlink" title="LRU 的不足："></a>LRU 的不足：</h3><p>因为只看数据的访问时间，使用 LRU 策略在处理扫描式单次查询操作时，无法解决缓存污染。所谓的扫描式单次查询操作，就是指应用对大量的数据进行一次全体读取，每个数据都会被读取，而且只会被读取一次。此时，因为这些被查询的数据刚刚被访问过，所以 LRU 字段值都很大。</p><h3 id="LFU-的优化"><a href="#LFU-的优化" class="headerlink" title="LFU 的优化"></a>LFU 的优化</h3><p>LFU 缓存策略是在 LRU 策略基础上，为每个数据增加了一个计数器，来统计这个数据的访问次数。</p><p>当使用 LFU 策略筛选淘汰数据时，首先会根据数据的访问次数进行筛选，把访问次数最低的数据淘汰出缓存。如果两个数据的访问次数相同，LFU 策略再比较这两个数据的访问时效性，把距离上一次访问时间更久的数据淘汰出缓存。</p><p>为了避免操作链表的开销，Redis 在实现 LRU 策略时使用了两个近似方法：</p><ul><li>Redis 是用 RedisObject 结构来保存数据的，RedisObject 结构中设置了一个 lru 字段，用来记录数据的访问时间戳；</li><li>Redis 并没有为所有的数据维护一个全局的链表，而是通过随机采样方式，选取一定数量（例如 10 个）的数据放入候选集合，后续在候选集合中根据 lru 字段值的大小进行筛选。</li></ul><p>在此基础上，Redis 在实现 LFU 策略的时候，只是把原来 24bit 大小的 lru 字段，又进一步拆分成了两部分。</p><ol start="0"><li>ldt 值：lru 字段的前 16bit，表示数据的访问时间戳；</li><li>counter 值：lru 字段的后 8bit，表示数据的访问次数。</li></ol><p><strong>总结一下：当 LFU 策略筛选数据时，Redis 会在候选集合中，根据数据 lru 字段的后 8bit 选择访问次数最少的数据进行淘汰。当访问次数相同时，再根据 lru 字段的前 16bit 值大小，选择访问时间最久远的数据进行淘汰。</strong></p><h3 id="Redis-只使用了-8bit-记录数据的访问次数，而-8bit-记录的最大值是-255"><a href="#Redis-只使用了-8bit-记录数据的访问次数，而-8bit-记录的最大值是-255" class="headerlink" title="Redis 只使用了 8bit 记录数据的访问次数，而 8bit 记录的最大值是 255"></a>Redis 只使用了 8bit 记录数据的访问次数，而 8bit 记录的最大值是 255</h3><p>Redis 也注意到了这个问题。因此，在实现 LFU 策略时，Redis 并没有采用数据每被访问一次，就给对应的 counter 值加 1 的计数规则，而是采用了一个更优化的计数规则。</p><p>简单来说，LFU 策略实现的计数规则是：每当数据被访问一次时，首先，用计数器当前的值乘以配置项 lfu_log_factor 再加 1，再取其倒数，得到一个 p 值；然后，把这个 p 值和一个取值范围在（0，1）间的随机数 r 值比大小，只有 p 值大于 r 值时，计数器才加 1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> r = (<span class="type">double</span>)rand()/RAND_MAX;</span><br><span class="line">...</span><br><span class="line"><span class="type">double</span> p = <span class="number">1.0</span>/(baseval*server.lfu_log_factor+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (r &lt; p) counter++;</span><br></pre></td></tr></table></figure><p>以下是记录了当 lfu_log_factor 取不同值时，在不同的实际访问次数情况下，计数器的值是如何变化的。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-3062001c9c445f09a748198bbad85a925124591e.jpg" alt="img" style="zoom:15%;" /><p>正是因为使用了<strong>非线性递增的计数器方法</strong>，即使缓存数据的访问次数成千上万，LFU 策略也可以有效地区分不同的访问次数，从而进行合理的数据筛选。从刚才的表中，我们可以看到，当 lfu_log_factor 取值为 10 时，百、千、十万级别的访问次数对应的 counter 值已经有明显的区分了。</p><p>我们在应用 LFU 策略时，一般可以将 lfu_log_factor 取值为 10。</p><p>在实际业务应用中，LRU 和 LFU 两个策略都有应用。LRU 和 LFU 两个策略关注的数据访问特征各有侧重，LRU 策略更加关注数据的时效性，而 LFU 策略更加关注数据的访问频次。通常情况下，实际应用的负载具有较好的时间局部性，所以 LRU 策略的应用会更加广泛。但是，在扫描式查询的应用场景中，LFU 策略就可以很好地应对缓存污染问题了。</p><h1 id="Q：Redis如何应对并发访问"><a href="#Q：Redis如何应对并发访问" class="headerlink" title="Q：Redis如何应对并发访问"></a>Q：Redis如何应对并发访问</h1><p>这里是指的是多条 Redis 命令不具备原子性，Redis 是单线程执行单条指令时当然不会被发生竞争的问题。</p><p>为了保证并发访问的正确性，Redis 提供了两种方法，分别是加锁和原子操作。</p><p>原子操作是另一种提供并发访问控制的方法。原子操作是指执行过程保持原子性的操作，而且原子操作执行时并不需要再加锁，实现了无锁操作。这样一来，既能保证并发控制，还能减少对系统并发性能的影响。</p><h2 id="并发访问中需要对什么进行控制？"><a href="#并发访问中需要对什么进行控制？" class="headerlink" title="并发访问中需要对什么进行控制？"></a>并发访问中需要对什么进行控制？</h2><p>并发访问控制对应的操作主要是数据修改操作。当客户端需要修改数据时，基本流程分成两步：</p><ol start="0"><li>客户端先把数据读取到本地，在本地进行修改；</li><li>客户端修改完数据后，再写回 Redis。</li></ol><p>我们把这个流程叫做“读取 - 修改 - 写回”操作（Read-Modify-Write，简称为 RMW 操作）。当有多个客户端对同一份数据执行 RMW 操作的话，我们就需要让 RMW 操作涉及的代码以原子性方式执行。访问同一份数据的 RMW 操作代码，就叫做临界区代码。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-60369294d82adaa9e2f69a3a5c5185c14f12d55a.jpg" alt="img" style="zoom:15%;" /><p>可以看到，客户端 A 在 t1 时读取库存值 10 并扣减 1，在 t2 时，客户端 A 还没有把扣减后的库存值 9 写回 Redis，而在此时，客户端 B 读到库存值 10，也扣减了 1，B 记录的库存值也为 9 了。等到 t3 时，A 往 Redis 写回了库存值 9，而到 t4 时，B 也写回了库存值 9。如果按正确的逻辑处理，客户端 A 和 B 对库存值各做了一次扣减，库存值应该为 8。所以，这里的库存值明显更新错了。</p><h2 id="Redis-的两种原子操作方法"><a href="#Redis-的两种原子操作方法" class="headerlink" title="Redis 的两种原子操作方法"></a>Redis 的两种原子操作方法</h2><p>为了实现并发控制要求的临界区代码互斥执行，Redis 的原子操作采用了两种方法：</p><ol start="0"><li>把多个操作在 Redis 中实现成一个操作，也就是单命令操作；</li><li>把多个操作写到一个 Lua 脚本中，以原子性方式执行单个 Lua 脚本。</li></ol><p>我们先来看下 Redis 本身的单命令操作。Redis 是使用单线程来串行处理客户端的请求操作命令的，所以，当 Redis 执行某个命令操作时，其他命令是无法执行的，这相当于命令操作是互斥执行的。当然，Redis 的快照生成、AOF 重写这些操作，可以使用后台线程或者是子进程执行，也就是和主线程的操作并行执行。不过，这些操作只是读取数据，不会修改数据，所以，我们并不需要对它们做并发控制。</p><p><strong>Redis 提供了 INCR&#x2F;DECR 命令，把这三个操作转变为一个原子操作了。INCR&#x2F;DECR 命令可以对数据进行增值 &#x2F; 减值操作，而且它们本身就是单个命令操作，Redis 在执行它们时，本身就具有互斥性。</strong></p><p>所以，如果我们执行的 RMW 操作是对数据进行增减值的话，Redis 提供的原子操作 INCR 和 DECR 可以直接帮助我们进行并发控制。</p><h2 id="lua-脚本"><a href="#lua-脚本" class="headerlink" title="lua 脚本"></a>lua 脚本</h2><p>Redis 的 Lua 脚本可以包含多个操作，这些操作都会以原子性的方式执行，绕开了单命令操作的限制。不过，如果把很多操作都放在 Lua 脚本中原子执行，会导致 Redis 执行脚本的时间增加，同样也会降低 Redis 的并发性能。所以建议在编写 Lua 脚本时，避免把不需要做并发控制的操作写入脚本中。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 笔记七</title>
      <link href="/post/ba05d6d0-e53e-11eb-908d-87267ebfe3de/"/>
      <url>/post/ba05d6d0-e53e-11eb-908d-87267ebfe3de/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Q：缓存异常（上）：解决缓存和数据库的数据不一致问题"><a href="#Q：缓存异常（上）：解决缓存和数据库的数据不一致问题" class="headerlink" title="Q：缓存异常（上）：解决缓存和数据库的数据不一致问题"></a>Q：缓存异常（上）：解决缓存和数据库的数据不一致问题</h1><h2 id="缓存和数据库的数据不一致是如何发生的？"><a href="#缓存和数据库的数据不一致是如何发生的？" class="headerlink" title="缓存和数据库的数据不一致是如何发生的？"></a>缓存和数据库的数据不一致是如何发生的？</h2><p>首先，我们得清楚“数据的一致性”具体是啥意思。其实，这里的“一致性”包含了两种情况：</p><ul><li><p>缓存中有数据，那么，缓存的数据值需要和数据库中的值相同；</p></li><li><p>缓存中本身没有数据，那么，数据库中的值必须是最新值。</p></li></ul><p>不符合这两种情况的，就属于缓存和数据库的数据不一致问题了。</p><p>对于读写缓存来说，如果要对数据进行增删改，就需要在缓存中进行，同时还要根据采取的写回策略，决定是否同步写回到数据库中。</p><ul><li>同步直写策略：写缓存时，也同步写数据库，缓存和数据库中的数据一致；</li><li>异步写回策略：写缓存时不同步写数据库，等到数据从缓存中淘汰时，再写回数据库。使用这种策略时，如果数据还没有写回数据库，缓存就发生了故障，那么，此时，数据库就没有最新的数据了。</li></ul><h3 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h3><p>如果是新增数据，数据会直接写到数据库中，不用对缓存做任何操作，此时，缓存中本身就没有新增数据，而数据库中是最新值，这种情况符合我们刚刚所说的一致性的第 2 种情况，所以，此时，缓存和数据库的数据是一致的。</p><h3 id="删改数据"><a href="#删改数据" class="headerlink" title="删改数据"></a>删改数据</h3><p>情况一：</p><p>我们假设应用先删除缓存，再更新数据库，如果缓存删除成功，但是数据库更新失败，那么，应用再访问数据时，缓存中没有数据，就会发生缓存缺失。然后，应用再访问数据库，但是数据库中的值为旧值，应用就访问到旧值了。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-854bce262c60eb54ec8b66c63ef2ad7486d73ef7.jpg" alt="img" style="zoom:15%;" /><p>应用要把数据 X 的值从 10 更新为 3，先在 Redis 缓存中删除了 X 的缓存值，但是更新数据库却失败了。如果此时有其他并发的请求访问 X，会发现 Redis 中缓存缺失，紧接着，请求就会访问数据库，读到的却是旧值 10。</p><p>情况二：</p><p>我们先更新数据库，再删除缓存中的值。应用要把数据 X 的值从 10 更新为 3，先成功更新了数据库，然后在 Redis 缓存中删除 X 的缓存，但是这个操作却失败了，这个时候，数据库中 X 的新值为 3，Redis 中的 X 的缓存值为 10，这肯定是不一致的。如果刚好此时有其他客户端也发送请求访问 X，会先在 Redis 中查询，该客户端会发现缓存命中，但是读到的却是旧值 10。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-e3435dcb86f9e2d236ec15f049b6e8192b775d72.jpg" alt="img" style="zoom:15%;" /><p>总结：</p><p>在更新数据库和删除缓存值的过程中，无论这两个操作的执行顺序谁先谁后，只要有一个操作失败了，就会导致客户端读取到旧值。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-9f4855399ff31fee5a5ac407a59e62d897644818.jpg" alt="img" style="zoom:15%;" /><h2 id="如何解决数据不一致问题？"><a href="#如何解决数据不一致问题？" class="headerlink" title="如何解决数据不一致问题？"></a>如何解决数据不一致问题？</h2><blockquote><p>首先，没有银弹，没有完美的解决方案和手段，无法做到 100% 解决一致性问题。只能是根据业务的实际情况去选择相对最优的方案。</p></blockquote><h3 id="重试机制"><a href="#重试机制" class="headerlink" title="重试机制"></a>重试机制</h3><p>具体来说，可以把要删除的缓存值或者是要更新的数据库值暂存到消息队列中（例如使用 Kafka 消息队列）。当应用没有能够成功地删除缓存值或者是更新数据库值时，可以从消息队列中重新读取这些值，然后再次进行删除或更新。</p><p>如果能够成功地删除或更新，我们就要把这些值从消息队列中去除，以免重复操作，此时，我们也可以保证数据库和缓存的数据一致了。否则的话，我们还需要再次进行重试。如果重试超过的一定次数，还是没有成功，我们就需要向业务层发送报错信息了。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-4b56b498c159cecba3c57006c5fe47999794b5c7.jpg" alt="img" style="zoom:15%;" /><p>说白了就是把需要更新的数据的消息存在 MQ 中，只有成功操作了（更新 Redis、数据库），才在 MQ 中消费弹出。</p><p>当然引进了 MQ 是为了解决一致性的问题，但是还是会引来新的问题，就是 MQ 的消费与执行的一致性。。。</p><h3 id="高并发下的问题"><a href="#高并发下的问题" class="headerlink" title="高并发下的问题"></a>高并发下的问题</h3><p>在高并发的场景下，无论先更新 Redis 还是先更新 database 都会有一点的时间差，这段时间差，如果有其他线程进行读写数据，依然存在数据不一致的问题。</p><p>因为 Redis 的 database 两者的操作就不符合原子性，所以直接躺平吧。</p><h1 id="Q：缓存异常（下）：解决缓存雪崩、击穿、穿透难题"><a href="#Q：缓存异常（下）：解决缓存雪崩、击穿、穿透难题" class="headerlink" title="Q：缓存异常（下）：解决缓存雪崩、击穿、穿透难题"></a>Q：缓存异常（下）：解决缓存雪崩、击穿、穿透难题</h1><blockquote><p>沾点老八股了</p></blockquote><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩是指大量的应用请求无法在 Redis 缓存中进行处理，紧接着，应用将大量请求发送到数据库层，导致数据库层的压力激增。</p><p><strong>说白了就是大量 kv 在同一时刻过期，而该时刻正是业务高峰期。</strong></p><p><strong>当然 Redis 的突然宕机也会造成缓存雪崩。</strong></p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-03e2219415811640c931ab71fdcaeb6a86bee38f.jpg" alt="img" style="zoom:15%;" /><h3 id="事前应对"><a href="#事前应对" class="headerlink" title="事前应对"></a>事前应对</h3><ul><li>避免给大量的数据设置相同的过期时间。如果业务层的确要求有些数据同时失效。</li><li>可以在用 EXPIRE 命令给每个数据设置过期时间时，给这些数据的过期时间增加一个较小的随机数（例如，随机增加 1~3 分钟），这样一来，不同数据的过期时间有所差别，但差别又不会太大，既避免了大量数据同时过期，同时也保证了这些数据基本在相近的时间失效，仍然能满足业务需求。</li></ul><h3 id="事后应对"><a href="#事后应对" class="headerlink" title="事后应对"></a>事后应对</h3><p>通过服务降级，来应对缓存雪崩。</p><p>所谓的服务降级，是指发生缓存雪崩时，针对不同的数据采取不同的处理方式。</p><ul><li>当业务应用访问的是非核心数据（例如电商商品属性）时，暂时停止从缓存中查询这些数据，而是直接返回预定义信息、空值或是错误信息；</li><li>当业务应用访问的是核心数据（例如电商商品库存）时，仍然允许查询缓存，如果缓存缺失，也可以继续通过数据库读取。</li></ul><p>当 Redis 出现突然宕机的情况</p><ul><li>在业务系统中实现服务熔断或请求限流机制。</li><li>主从节点切换恢复 Redis 服务</li></ul><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>缓存击穿是指，针对某个访问非常频繁的热点数据的请求，无法在缓存中进行处理，紧接着，访问该数据的大量请求，一下子都发送到了后端数据库，导致了数据库压力激增，会影响数据库处理其他请求。缓存击穿的情况，经常发生在热点数据过期失效时。</p><p>说白了就是热点 key，本身的流量就大，但是 Redis 里却没有数据</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-b9e9d004817c8b84cb1e1d8aeb19d0580d2e712a.jpg" alt="img" style="zoom:15%;" /><h3 id="如何对敌？"><a href="#如何对敌？" class="headerlink" title="如何对敌？"></a>如何对敌？</h3><p>为了避免缓存击穿给数据库带来的激增压力，我们的解决方法也比较直接，<strong>对于访问特别频繁的热点数据，我们就不设置过期时间了。</strong>这样一来，对热点数据的访问请求，都可以在缓存中进行处理，而 Redis 数万级别的高吞吐量可以很好地应对大量的并发请求访问。</p><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透是指要访问的数据既不在 Redis 缓存中，也不在数据库中，导致请求在访问缓存时，发生缓存缺失，再去访问数据库时，发现数据库中也没有要访问的数据。</p><p>跟缓存雪崩、缓存击穿这两类问题相比，缓存穿透的影响更大一些。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-73a11dbf64448ffcb0e793a789ed67515caf9ac9.jpg" alt="img" style="zoom:15%;" /><p>那么，缓存穿透会发生在什么时候呢？一般来说，有两种情况。</p><ul><li>业务层误操作：缓存中的数据和数据库中的数据被误删除了，所以缓存和数据库中都没有数据；</li><li>恶意攻击：专门访问数据库中没有的数据。</li></ul><h3 id="如何对敌？-1"><a href="#如何对敌？-1" class="headerlink" title="如何对敌？"></a>如何对敌？</h3><p><strong>第一种方案是，缓存空值或缺省值。</strong></p><p>一旦发生缓存穿透，我们就可以针对查询的数据，在 Redis 中缓存一个空值或是和业务层协商确定的缺省值（例如，库存的缺省值可以设为 0）。紧接着，应用发送的后续请求再进行查询时，就可以直接从 Redis 中读取空值或缺省值，返回给业务应用了，避免了把大量请求发送给数据库处理，保持了数据库的正常运行。</p><p><strong>使用布隆过滤器快速判断数据是否存在</strong></p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-416bdd26610adf1ac6cfbc3e600fcbe512eb72b5.jpg" alt="img" style="zoom:15%;" /><p>我们可以在把数据写入数据库时，使用布隆过滤器做个标记。当缓存缺失后，应用查询数据库时，可以通过查询布隆过滤器快速判断数据是否存在。如果不存在，就不用再去数据库中查询了。</p><p><strong>在请求入口的前端进行请求检测</strong></p><p>前端拦截恶意的请求</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-2ff5c4527331cecaff4a44e62ea5149d215b9780.jpg" alt="img" style="zoom:25%;" /><ul><li>针对缓存雪崩，合理地设置数据过期时间，以及搭建高可靠缓存集群；</li><li>针对缓存击穿，在缓存访问非常频繁的热点数据时，不要设置过期时间；</li><li>针对缓存穿透，提前在入口前端实现恶意请求检测，或者规范数据库的数据删除操作，避免误删除。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 笔记六</title>
      <link href="/post/1cae1360-e47c-11eb-8456-9d0bf7563314/"/>
      <url>/post/1cae1360-e47c-11eb-8456-9d0bf7563314/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Q：什么是内存碎片"><a href="#Q：什么是内存碎片" class="headerlink" title="Q：什么是内存碎片"></a>Q：什么是内存碎片</h1><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-b7e68251e007c60af39783483e9f7a7e1e93d3f5.jpg" alt="img" style="zoom:15%;" /><p>我们可以把这些分散的空座位叫作“车厢座位碎片”，知道了这一点，操作系统的内存碎片就很容易理解了。虽然操作系统的剩余内存空间总量足够，<strong>但是应用申请的是一块连续地址空间的 N 字节</strong>，但在剩余的内存空间中，没有大小为 <strong>N</strong> 字节的连续空间了，那么，这些剩余空间就是内存碎片（比如上图中的“空闲 2 字节”和“空闲 1 字节”，就是这样的碎片）。</p><h1 id="Q：内存碎片是如何形成的"><a href="#Q：内存碎片是如何形成的" class="headerlink" title="Q：内存碎片是如何形成的"></a>Q：内存碎片是如何形成的</h1><p>其实，内存碎片的形成有内因和外因两个层面的原因。简单来说，内因是操作系统的内存分配机制，外因是 Redis 的负载特征。</p><h2 id="内因：内存分配器的分配策略"><a href="#内因：内存分配器的分配策略" class="headerlink" title="内因：内存分配器的分配策略"></a>内因：内存分配器的分配策略</h2><p>Redis 可以使用 libc、jemalloc、tcmalloc 多种内存分配器来分配内存，默认使用 jemalloc。</p><p>jemalloc 的分配策略之一，是按照一系列固定的大小划分内存空间，例如 8 字节、16 字节、32 字节、48 字节，…, 2KB、4KB、8KB 等。当程序申请的内存最接近某个固定值时，jemalloc 会给它分配相应大小的空间。</p><p>这样的分配方式本身是为了减少分配次数。例如，Redis 申请一个 20 字节的空间保存数据，jemalloc 就会分配 32 字节，此时，如果应用还要写入 10 字节的数据，Redis 就不用再向操作系统申请空间了，因为刚才分配的 32 字节已经够用了，这就避免了一次分配操作。</p><h2 id="外因：键值对大小不一样和删改操作"><a href="#外因：键值对大小不一样和删改操作" class="headerlink" title="外因：键值对大小不一样和删改操作"></a>外因：键值对大小不一样和删改操作</h2><p>应用 A 保存 6 字节数据，jemalloc 按分配策略分配 8 字节。如果应用 A 不再保存新数据，那么，这里多出来的 2 字节空间就是内存碎片了。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-9e03668425b59fa47a79ca78645c4d916780e2ff.jpg" alt="img" style="zoom:15%;" /><p>第二个外因是，这些键值对会被修改和删除，这会导致空间的扩容和释放。具体来说，一方面，如果修改后的键值对变大或变小了，就需要占用额外的空间或者释放不用的空间。另一方面，删除的键值对就不再需要内存空间了，此时，就会把空间释放出来，形成空闲空间。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-cd062c22994d9906bb53ae0112ed2e5e79f4b7e9.jpg" alt="img" style="zoom:15%;" /><p>一开始，应用 A、B、C、D 分别保存了 3、1、2、4 字节的数据，并占据了相应的内存空间。然后，应用 D 删除了 1 个字节，这个 1 字节的内存空间就空出来了。紧接着，应用 A 修改了数据，从 3 字节变成了 4 字节。为了保持 A 数据的空间连续性，操作系统就需要把 B 的数据拷贝到别的空间，比如拷贝到 D 刚刚释放的空间中。此时，应用 C 和 D 也分别删除了 2 字节和 1 字节的数据，整个内存空间上就分别出现了 2 字节和 1 字节的空闲碎片。如果应用 E 想要一个 3 字节的连续空间，显然是不能得到满足的。因为，虽然空间总量够，但却是碎片空间，并不是连续的。</p><h2 id="如何判断是否有内存碎片？"><a href="#如何判断是否有内存碎片？" class="headerlink" title="如何判断是否有内存碎片？"></a>如何判断是否有内存碎片？</h2><p>Redis 自身提供了 INFO 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INFO memory</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Memory</span></span><br><span class="line">used_memory:1073741736</span><br><span class="line">used_memory_human:1024.00M</span><br><span class="line">used_memory_rss:1997159792</span><br><span class="line">used_memory_rss_human:1.86G</span><br><span class="line">…</span><br><span class="line">mem_fragmentation_ratio:1.86</span><br></pre></td></tr></table></figure><p>这里有一个 mem_fragmentation_ratio 的指标，它表示的就是 Redis 当前的内存碎片率。那么，这个碎片率是怎么计算的呢？其实，就是上面的命令中的两个指标 used_memory_rss 和 used_memory 相除的结果。</p><p><code>mem_fragmentation_ratio = used_memory_rss/ used_memory</code></p><ul><li>used_memory_rss 是操作系统实际分配给 Redis 的物理内存空间，里面就包含了碎片；</li><li>used_memory 是 Redis 为了保存数据实际申请使用的空间。</li></ul><p>经验之谈：</p><ul><li>mem_fragmentation_ratio 大于 1 但小于 1.5。这种情况是合理的。这是因为，刚才介绍的那些因素是难以避免的。毕竟，内因的内存分配器是一定要使用的，分配策略都是通用的，不会轻易修改；而外因由 Redis 负载决定，也无法限制。所以，存在内存碎片也是正常的。</li><li>mem_fragmentation_ratio 大于 1.5 。这表明内存碎片率已经超过了 50%。一般情况下，这个时候，我们就需要采取一些措施来降低内存碎片率了。</li><li>mem_fragmentation_ratio 小于 1，发生了 swap</li></ul><blockquote><p>Matthew Han：mem_fragmentation_ratio 小于 1的情况，还可能会触发内存淘汰机制，删除大量的 key，阻塞主线程。</p></blockquote><h2 id="如何清理内存碎片？"><a href="#如何清理内存碎片？" class="headerlink" title="如何清理内存碎片？"></a>如何清理内存碎片？</h2><ol start="0"><li>直接重启 Redis 实例（但是没有持久化AOF、RDB，数据就会丢失）</li><li>从 4.0-RC3 版本以后，Redis 自身提供了一种内存碎片自动清理的方法。</li></ol><p>内存碎片清理，简单来说，就是“搬家让位，合并空间”。</p><blockquote><p>Matthew Han：沾点 JVM GC 的标记 -整理了</p></blockquote><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-2d9ed7f9b6be42e8e45a92e7d69a07dd2091c6b2.jpg" alt="img" style="zoom:15%;" /><p>需要注意的是：<strong>碎片清理是有代价的</strong>，操作系统需要把多份数据拷贝到新位置，把原有空间释放出来，这会带来时间开销。</p><p>首先，Redis 需要启用自动内存碎片清理，可以把 activedefrag 配置项设置为 yes，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config set activedefrag yes</span><br></pre></td></tr></table></figure><p>我们可以通过设置参数，来控制碎片清理的开始和结束时机，以及占用的 CPU 比例，从而减少碎片清理对 Redis 本身请求处理的性能影响。</p><p>这两个参数分别设置了触发内存清理的一个条件，如果同时满足这两个条件，就开始清理。在清理的过程中，只要有一个条件不满足了，就停止自动清理。</p><ul><li>active-defrag-ignore-bytes 100mb：表示内存碎片的字节数达到 100MB 时，开始清理；</li><li>active-defrag-threshold-lower 10：表示内存碎片空间占操作系统分配给 Redis 的总空间比例达到 10% 时，开始清理。</li></ul><p>为了尽可能减少碎片清理对 Redis 正常请求处理的影响，自动内存碎片清理功能在执行时，还会监控清理操作占用的 CPU 时间，而且还设置了两个参数，分别用于控制清理操作占用的 CPU 时间比例的上、下限，既保证清理工作能正常进行，又避免了降低 Redis 性能。这两个参数具体如下：</p><ul><li>active-defrag-cycle-min 25： 表示自动清理过程所用 CPU 时间的比例不低于 25%，保证清理能正常开展；</li><li>active-defrag-cycle-max 75：表示自动清理过程所用 CPU 时间的比例不高于 75%，一旦超过，就停止清理，从而避免在清理时，大量的内存拷贝阻塞 Redis，导致响应延迟升高。</li></ul><h1 id="Q：缓冲区引发的惨案"><a href="#Q：缓冲区引发的惨案" class="headerlink" title="Q：缓冲区引发的惨案"></a>Q：缓冲区引发的惨案</h1><h2 id="客户端输入和输出缓冲区"><a href="#客户端输入和输出缓冲区" class="headerlink" title="客户端输入和输出缓冲区"></a>客户端输入和输出缓冲区</h2><p>为了避免客户端和服务器端的请求发送和处理速度不匹配，服务器端给每个连接的客户端都设置了一个输入缓冲区和输出缓冲区，我们称之为客户端输入缓冲区和输出缓冲区。</p><p>输入缓冲区会先把客户端发送过来的命令暂存起来，Redis 主线程再从输入缓冲区中读取命令，进行处理。当 Redis 主线程处理完数据后，会把结果写入到输出缓冲区，再通过输出缓冲区返回给客户端。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-74493064a498e0d1b5514152b723f98269b44e41.jpg" alt="img" style="zoom:15%;" /><h2 id="如何应对输入缓冲区溢出？"><a href="#如何应对输入缓冲区溢出？" class="headerlink" title="如何应对输入缓冲区溢出？"></a>如何应对输入缓冲区溢出？</h2><ul><li>写入了 bigkey，比如一下子写入了多个百万级别的集合类型数据；</li><li>服务器端处理请求的速度过慢，例如，Redis 主线程出现了间歇性阻塞，无法及时处理正常发送的请求，导致客户端发送的请求在缓冲区越积越多。</li></ul><p>避免输入缓冲区溢出。我们可以从两个角度去考虑如何避免，一是把缓冲区调大，二是从数据命令的发送和处理速度入手。</p><p><strong>输入缓冲区没法调大</strong></p><h2 id="如何应对输出缓冲区溢出？"><a href="#如何应对输出缓冲区溢出？" class="headerlink" title="如何应对输出缓冲区溢出？"></a>如何应对输出缓冲区溢出？</h2><ul><li>服务器端返回 bigkey 的大量结果；</li><li>执行了 MONITOR 命令；</li><li>缓冲区大小设置得不合理。</li></ul><p>和输入缓冲区不同，我们可以通过 client-output-buffer-limit 配置项，来设置输出缓冲区的大小。</p><h2 id="主从集群中的缓冲区"><a href="#主从集群中的缓冲区" class="headerlink" title="主从集群中的缓冲区"></a>主从集群中的缓冲区</h2><blockquote><p>全量同步</p></blockquote><p>在全量复制过程中，主节点在向从节点传输 RDB 文件的同时，会继续接收客户端发送的写命令请求。这些写命令就会先保存在复制缓冲区中，等 RDB 文件传输完成后，再发送给从节点去执行。主节点上会为每个从节点都维护一个复制缓冲区，来保证主从节点间的数据同步。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-fd374c2d1c0d9102a97268ce7e05a83242a5d929.jpg" alt="img" style="zoom:15%;" /><p>复制缓冲区一旦发生溢出，主节点也会直接关闭和从节点进行复制操作的连接，导致全量复制失败。</p><h2 id="复制积压缓冲区的溢出问题"><a href="#复制积压缓冲区的溢出问题" class="headerlink" title="复制积压缓冲区的溢出问题"></a>复制积压缓冲区的溢出问题</h2><blockquote><p>增量同步</p></blockquote><p>我们再来看下增量复制时使用的缓冲区，这个缓冲区称为复制积压缓冲区。主节点在把接收到的写命令同步给从节点时，同时会把这些写命令写入复制积压缓冲区。一旦从节点发生网络闪断，再次和主节点恢复连接后，从节点就会从复制积压缓冲区中，读取断连期间主节点接收到的写命令，进而进行增量同步。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-03a3039183306e5adbfad71841cc02bc0c676001.jpg" alt="img" style="zoom:15%;" /><p>其实他就是 repl_backlog_buffer，复制积压缓冲区是一个大小有限的环形缓冲区。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 笔记五</title>
      <link href="/post/3414aaf0-e46d-11eb-9597-7d5c165039f4/"/>
      <url>/post/3414aaf0-e46d-11eb-9597-7d5c165039f4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Q：如何应对变慢的Redis（总结）"><a href="#Q：如何应对变慢的Redis（总结）" class="headerlink" title="Q：如何应对变慢的Redis（总结）"></a>Q：如何应对变慢的Redis（总结）</h1><blockquote><p>个人总结版本</p></blockquote><ol start="0"><li>AOF 重写问题，比如设置了 everysec ，上一次还妹写完，下一次又来了</li><li>发生了 swap 内存交换</li><li>查看基线性能</li><li>查看延迟的绝对值</li><li>是否有慢查询</li><li>是否会出现同一时刻大批量 kv 的过期</li><li>是否存在 bigkey</li><li>是否存在透明大页</li><li>是否出现频繁切换 socket，需要绑核</li><li>主从集群下是否主库过大，导致 RDB 载入阻塞</li></ol><blockquote><p>老师总结版本</p></blockquote><ol start="0"><li>获取 Redis 实例在当前环境下的基线性能。</li><li>是否用了慢查询命令？如果是的话，就使用其他命令替代慢查询命令，或者把聚合计算命令放在客户端做。</li><li>是否对过期 key 设置了相同的过期时间？对于批量删除的 key，可以在每个 key 的过期时间上加一个随机数，避免同时删除。</li><li>是否存在 bigkey？ 对于 bigkey 的删除操作，如果你的 Redis 是 4.0 及以上的版本，可以直接利用异步线程机制减少主线程阻塞；如果是 Redis 4.0 以前的版本，可以使用 SCAN 命令迭代删除；对于 bigkey 的集合查询和聚合操作，可以使用 SCAN 命令在客户端完成。</li><li>Redis AOF 配置级别是什么？业务层面是否的确需要这一可靠性级别？如果我们需要高性能，同时也允许数据丢失，可以将配置项 no-appendfsync-on-rewrite 设置为 yes，避免 AOF 重写和 fsync 竞争磁盘 IO 资源，导致 Redis 延迟增加。当然， 如果既需要高性能又需要高可靠性，最好使用高速固态盘作为 AOF 日志的写入盘。</li><li>Redis 实例的内存使用是否过大？发生 swap 了吗？如果是的话，就增加机器内存，或者是使用 Redis 集群，分摊单机 Redis 的键值对数量和内存压力。同时，要避免出现 Redis 和其他内存需求大的应用共享机器的情况。</li><li>在 Redis 实例的运行环境中，是否启用了透明大页机制？如果是的话，直接关闭内存大页机制就行了。</li><li>是否运行了 Redis 主从集群？如果是的话，把主库实例的数据量大小控制在 2~4GB，以免主从复制时，从库因加载大的 RDB 文件而阻塞。</li><li>是否使用了多核 CPU 或 NUMA 架构的机器运行 Redis 实例？使用多核 CPU 时，可以给 Redis 实例绑定物理核；使用 NUMA 架构时，注意把 Redis 实例和网络中断处理程序运行在同一个 CPU Socket 上。</li></ol><h1 id="Q：如何应对变慢的Redis（SUB：Redis-自身）"><a href="#Q：如何应对变慢的Redis（SUB：Redis-自身）" class="headerlink" title="Q：如何应对变慢的Redis（SUB：Redis 自身）"></a>Q：如何应对变慢的Redis（SUB：Redis 自身）</h1><ol start="0"><li>如何判断 Redis 是不是真的变慢了。一个最直接的方法，<strong>就是查看 Redis 的响应延迟。</strong></li><li><strong>看基线性能。</strong>基于当前环境下的 Redis 基线性能做判断。所谓的基线性能，就是一个系统在低压力、无干扰下的基本性能，这个性能只由当前的软硬件配置决定。</li></ol><h2 id="如何应对-Redis-变慢？"><a href="#如何应对-Redis-变慢？" class="headerlink" title="如何应对 Redis 变慢？"></a>如何应对 Redis 变慢？</h2><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-9fa20e213cd4bd80a6d464fdb25d3a4e520a7f68.jpg" alt="img" style="zoom:15%;" /><h3 id="Redis-自身操作特性的影响"><a href="#Redis-自身操作特性的影响" class="headerlink" title="Redis 自身操作特性的影响"></a>Redis 自身操作特性的影响</h3><ol start="0"><li><p><strong>慢查询命令</strong></p><ol><li><p>例子：Value 类型为 String 时，GET&#x2F;SET 操作主要就是操作 Redis 的哈希表索引。这个操作复杂度基本是固定的，即 $O(1)$。但是，当 Value 类型为 Set 时，SORT、SUNION&#x2F;SMEMBERS 操作复杂度分别为 $O(N+M*log(M))$ 和 $O(N)$。其中，$N$ 为 Set 中的元素个数，$M$ 为 SORT 操作返回的元素个数。这个复杂度就增加了很多。</p></li><li><p>解决手段</p><ol><li><p>用其他高效命令代替。比如说，如果你需要返回一个 SET 中的所有成员时，不要使用 SMEMBERS 命令，而是要使用 SSCAN 多次迭代返回，避免一次返回大量数据，造成线程阻塞。</p></li><li><p>当你需要执行排序、交集、并集操作时，可以在客户端完成，而不要用 SORT、SUNION、SINTER 这些命令，以免拖慢 Redis 实例。</p></li><li><p>keys 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">KEYS *name*</span></span><br><span class="line">1) &quot;lastname&quot;</span><br><span class="line">2) &quot;firstname&quot;</span><br></pre></td></tr></table></figure><p><strong>因为 KEYS 命令需要遍历存储的键值对</strong>，所以操作延时高。如果你不了解它的实现而使用了它，就会导致 Redis 性能变慢。所以，<strong>KEYS 命令一般不被建议用于生产环境中。</strong></p></li></ol></li></ol></li><li><p><strong>过期 key 操作（删除操作是阻塞的，Redis 4.0 后可以用异步线程机制来减少阻塞影响）</strong></p><ol><li>默认情况下，Redis 每 100 毫秒会删除一些过期 key。具体算法：<ol><li>采样 ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP 个数的 key，并将其中过期的 key 全部删除；</li><li>如果超过 25% 的 key 过期了，则重复删除的过程，直到过期 key 的比例降至 25% 以下。</li></ol></li><li>频繁使用带有相同时间参数的 EXPIREAT 命令设置过期 key</li><li>解决手段：如果一批 key 的确是同时过期，你还可以在 EXPIREAT 和 EXPIRE 的过期时间参数上，加上一个一定大小范围内的随机数，这样，既保证了 key 在一个邻近时间范围内被删除，又避免了同时过期造成的压力。</li></ol><blockquote><p>说白了就是不要出现同一时刻大量 key 过期导致的雪崩。</p></blockquote></li></ol><h1 id="Q：如何应对变慢的Redis（SUB：文件系统：AOF）"><a href="#Q：如何应对变慢的Redis（SUB：文件系统：AOF）" class="headerlink" title="Q：如何应对变慢的Redis（SUB：文件系统：AOF）"></a>Q：如何应对变慢的Redis（SUB：文件系统：AOF）</h1><p><strong>always 策略并不使用后台子线程来执行。</strong></p><p>当主线程使用后台子线程执行了一次 fsync，需要再次把新接收的操作记录写回磁盘时，如果主线程发现上一次的 fsync 还没有执行完，那么它就会阻塞。所以，如果后台子线程执行的 fsync 频繁阻塞的话（比如 AOF 重写占用了大量的磁盘 IO 带宽），主线程也会阻塞，导致 Redis 性能变慢。</p><h1 id="Q：如何应对变慢的Redis（SUB：操作系统-swap）"><a href="#Q：如何应对变慢的Redis（SUB：操作系统-swap）" class="headerlink" title="Q：如何应对变慢的Redis（SUB：操作系统 swap）"></a>Q：如何应对变慢的Redis（SUB：操作系统 swap）</h1><p>内存 swap 是操作系统里将内存数据在内存和磁盘间来回换入和换出的机制。</p><p>通常，触发 swap 的原因主要是物理机器内存不足，对于 Redis 而言，有两种常见的情况：</p><ul><li>Redis 实例自身使用了大量的内存，导致物理机器的可用内存不足；</li><li>Redis 实例在同一台机器上运行的其他进程，在进行大量的文件读写操作。文件读写本身会占用系统内存，这会导致分配给 Redis 实例的内存量变少，进而触发 Redis 发生 swap。</li></ul><p>针对这个问题，我也给你提供一个解决思路：增加机器的内存或者使用 Redis 集群。</p><h1 id="Q：如何应对变慢的Redis（SUB：操作系统内存大页）"><a href="#Q：如何应对变慢的Redis（SUB：操作系统内存大页）" class="headerlink" title="Q：如何应对变慢的Redis（SUB：操作系统内存大页）"></a>Q：如何应对变慢的Redis（SUB：操作系统内存大页）</h1><p>除了内存 swap，还有一个和内存相关的因素，即内存大页机制（Transparent Huge Page, THP），也会影响 Redis 性能。</p><p>Linux 内核从 2.6.38 开始支持内存大页机制，该机制支持 2MB 大小的内存页分配，而常规的内存页分配是按 4KB 的粒度来执行的。</p><p>如果采用了内存大页，那么，即使客户端请求只修改 100B 的数据，Redis 也需要拷贝 2MB 的大页。相反，如果是常规内存页机制，只用拷贝 4KB。两者相比，你可以看到，当客户端请求修改或新写入数据较多时，内存大页机制将导致大量的拷贝，这就会影响 Redis 正常的访存操作，最终导致性能变慢。</p><p>出现问题之后该机制可以关闭。</p><h1 id="Q：缓存满了怎么办"><a href="#Q：缓存满了怎么办" class="headerlink" title="Q：缓存满了怎么办"></a>Q：缓存满了怎么办</h1><p>Redis 有一个重要机制，即缓存数据的淘汰机制。</p><p>可以设置一个最大容量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG SET maxmemory 4gb</span><br></pre></td></tr></table></figure><h2 id="Redis-缓存有哪些淘汰策略？"><a href="#Redis-缓存有哪些淘汰策略？" class="headerlink" title="Redis 缓存有哪些淘汰策略？"></a>Redis 缓存有哪些淘汰策略？</h2><ul><li>在设置了过期时间的数据中进行淘汰，包括 volatile-random、volatile-ttl、volatile-lru、volatile-lfu（Redis 4.0 后新增）四种。</li><li>在所有数据范围内进行淘汰，包括 allkeys-lru、allkeys-random、allkeys-lfu（Redis 4.0 后新增）三种。</li></ul><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-dc8c6cac077386a7e3ea23bcd4de3059a3718e5f.jpg" alt="img" style="zoom:30%;" /><p>3.0 之后的默认情况下，Redis 在使用的内存空间超过 maxmemory 值时，并不会淘汰数据，也就是设定的 <strong>noeviction</strong> 策略。对应到 Redis 缓存，也就是指，一旦缓存被写满了，再有写请求来时，Redis 不再提供服务，而是直接返回错误。</p><p><em><em>volatile</em> 这种淘汰策略。它们筛选的候选数据范围，被限制在已经设置了过期时间的键值对上。</em>*</p><ul><li>volatile-ttl 在筛选时，会针对设置了过期时间的键值对，根据过期时间的先后进行删除，越早过期的越先被删除。</li><li>volatile-random 就像它的名称一样，在设置了过期时间的键值对中，进行随机删除。</li><li>volatile-lru 会使用 LRU 算法筛选设置了过期时间的键值对。</li><li>volatile-lfu 会使用 LFU 算法选择设置了过期时间的键值对。</li></ul><p><em><em>allkeys</em> 这种淘汰策略的备选淘汰数据范围，就扩大到了所有键值对，无论这些键值对是否设置了过期时间。</em>*</p><ul><li>allkeys-random 策略，从所有键值对中随机选择并删除数据；</li><li>allkeys-lru 策略，使用 LRU 算法在所有数据中进行筛选。</li><li>allkeys-lfu 策略，使用 LFU 算法在所有数据中进行筛选。</li></ul><p>在 Redis 中，LRU 算法被做了简化，以减轻数据淘汰对缓存性能的影响。具体来说，Redis 默认会记录每个数据的最近一次访问的时间戳（由键值对数据结构 RedisObject 中的 lru 字段记录）。然后，Redis 在决定淘汰的数据时，第一次会随机选出 N 个数据，把它们作为一个候选集合。接下来，Redis 会比较这 N 个数据的 lru 字段，把 lru 字段值最小的数据从缓存中淘汰出去。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 笔记四</title>
      <link href="/post/20dc2440-e2dd-11eb-b58c-3b03d3077551/"/>
      <url>/post/20dc2440-e2dd-11eb-b58c-3b03d3077551/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Q：异步机制"><a href="#Q：异步机制" class="headerlink" title="Q：异步机制"></a>Q：异步机制</h1><h2 id="Redis-实例有哪些阻塞点？"><a href="#Redis-实例有哪些阻塞点？" class="headerlink" title="Redis 实例有哪些阻塞点？"></a>Redis 实例有哪些阻塞点？</h2><p>Redis 实例在运行时，要和许多对象进行交互，这些不同的交互就会涉及不同的操作，下面我们来看看和 Redis 实例交互的对象，以及交互时会发生的操作。</p><pre><code>0. 客户端：网络 IO，键值对增删改查操作，数据库操作；0. 磁盘：生成 RDB 快照，记录 AOF 日志，AOF 日志重写；0. 主从节点：主库生成、传输 RDB 文件，从库接收 RDB 文件、清空数据库、加载 RDB 文件；0. 切片集群实例：向其他实例传输哈希槽信息，数据迁移。</code></pre><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-65fb622ac8af7fb29b8a40d875fc07bd9500966f.jpg" alt="img" style="zoom:15%;" /><h3 id="0-和客户端交互时的阻塞点"><a href="#0-和客户端交互时的阻塞点" class="headerlink" title="0. 和客户端交互时的阻塞点"></a>0. 和客户端交互时的阻塞点</h3><p>网络 IO 有时候会比较慢，但是 Redis 使用了 IO 多路复用机制，避免了主线程一直处在等待网络连接或请求到来的状态，所以，网络 IO 不是导致 Redis 阻塞的因素。</p><p>Redis 中涉及集合的操作复杂度通常为 $O(N)$，我们要在使用时重视起来。例如集合元素全量查询操作 HGETALL、SMEMBERS，以及集合的聚合统计操作，例如求交、并和差集。这些操作可以作为 Redis 的第一个阻塞点：<strong>集合全量查询和聚合操作</strong>。</p><p><strong>bigkey 删除操作就是 Redis 的第二个阻塞点</strong>。删除操作对 Redis 实例性能的负面影响很大，而且在实际业务开发时容易被忽略，所以一定要重视它。既然频繁删除键值对都是潜在的阻塞点了，那么，在 Redis 的数据库级别操作中，清空数据库（例如 FLUSHDB 和 FLUSHALL 操作）必然也是一个潜在的阻塞风险，因为它涉及到删除和释放所有的键值对。所以，这就是 Redis 的第三个阻塞点：<strong>清空数据库</strong>。</p><h3 id="1-和磁盘交互时的阻塞点"><a href="#1-和磁盘交互时的阻塞点" class="headerlink" title="1. 和磁盘交互时的阻塞点"></a>1. 和磁盘交互时的阻塞点</h3><p>Redis 的第四个阻塞点了：AOF 日志同步写。</p><h3 id="2-主从节点交互时的阻塞点"><a href="#2-主从节点交互时的阻塞点" class="headerlink" title="2. 主从节点交互时的阻塞点"></a>2. 主从节点交互时的阻塞点</h3><p>在主从集群中，主库需要生成 RDB 文件，并传输给从库。主库在复制的过程中，创建和传输 RDB 文件都是由子进程来完成的，不会阻塞主线程。<strong>但是，对于从库来说，它在接收了 RDB 文件后，需要使用 FLUSHDB 命令清空当前数据库，这就正好撞上了刚才我们分析的第三个阻塞点</strong>。此外，从库在清空当前数据库后，还需要把 RDB 文件加载到内存，这个过程的快慢和 RDB 文件的大小密切相关，RDB 文件越大，加载过程越慢，所以，<strong>加载 RDB 文件就成为了 Redis 的第五个阻塞点</strong>。</p><h3 id="3-切片集群实例交互时的阻塞点"><a href="#3-切片集群实例交互时的阻塞点" class="headerlink" title="3. 切片集群实例交互时的阻塞点"></a>3. 切片集群实例交互时的阻塞点</h3><p>当我们部署 Redis 切片集群时，每个 Redis 实例上分配的哈希槽信息需要在不同实例间进行传递，同时，当需要进行负载均衡或者有实例增删时，数据会在不同的实例间进行迁移。不过，哈希槽的信息量不大，而数据迁移是渐进式执行的，所以，一般来说，这两类操作对 Redis 主线程的阻塞风险不大。</p><p>除非迁移的是 bigkey。</p><p><strong>五个阻塞点：</strong></p><ol start="0"><li>集合全量查询和聚合操作；</li><li>bigkey 删除；</li><li>清空数据库；</li><li>AOF 日志同步写；</li><li>从库加载 RDB 文件。</li></ol><h2 id="哪些阻塞点可以异步执行？"><a href="#哪些阻塞点可以异步执行？" class="headerlink" title="哪些阻塞点可以异步执行？"></a>哪些阻塞点可以异步执行？</h2><p>如果一个操作能被异步执行，就意味着，它并不是 Redis 主线程的关键路径上的操作。我再解释下关键路径上的操作是啥。这就是说，客户端把请求发送给 Redis 后，等着 Redis 返回数据结果的操作。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-c24c620a61da2f7fb089987c99d79c0f9bfe1a26.jpg" alt="img" style="zoom:15%;" /><p>对于 Redis 来说，<strong>读操作是典型的关键路径操作</strong>，因为客户端发送了读操作之后，就会等待读取的数据返回，以便进行后续的数据处理。而 Redis 的第一个阻塞点“集合全量查询和聚合操作”都涉及到了读操作，所以，它们是不能进行异步操作了。</p><p>我们再来看看删除操作。删除操作并不需要给客户端返回具体的数据结果，所以不算是关键路径操作。而我们刚才总结的第二个阻塞点“bigkey 删除”，和第三个阻塞点“清空数据库”，都是对数据做删除，并不在关键路径上。因此，我们可以使用后台子线程来异步执行删除操作。</p><p>对于第四个阻塞点“AOF 日志同步写”来说，为了保证数据可靠性，Redis 实例需要保证 AOF 日志中的操作记录已经落盘，这个操作虽然需要实例等待，但它并不会返回具体的数据结果给实例。所以，我们也可以启动一个子线程来执行 AOF 日志的同步写，而不用让主线程等待 AOF 日志的写完成。</p><p><strong>对于 Redis 的五大阻塞点来说，除了“集合全量查询和聚合操作”和“从库加载 RDB 文件”，其他三个阻塞点涉及的操作都不在关键路径上，所以，我们可以使用 Redis 的异步子线程机制来实现 bigkey 删除，清空数据库，以及 AOF 日志同步写。</strong></p><h2 id="异步的子线程机制"><a href="#异步的子线程机制" class="headerlink" title="异步的子线程机制"></a>异步的子线程机制</h2><p>Redis 主线程启动后，会使用操作系统提供的 pthread_create 函数创建 3 个子线程，分别由它们负责 AOF 日志写操作、键值对删除以及文件关闭的异步执行。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-9e362e8f1902958f3abfcc63cc1f9ffe75bc2c95.jpg" alt="img" style="zoom:15%;" /><p>异步的键值对删除和数据库清空操作是 Redis 4.0 后提供的功能，Redis 也提供了新的命令来执行这两个操作。</p><ul><li><p>键值对删除：当你的集合类型中有大量元素（例如有百万级别或千万级别元素）需要删除时，我建议你使用 UNLINK 命令。</p></li><li><p>清空数据库：可以在 FLUSHDB 和 FLUSHALL 命令后加上 ASYNC 选项，这样就可以让后台子线程异步地清空数据库，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FLUSHDB ASYNC</span><br><span class="line">FLUSHALL AYSNC</span><br></pre></td></tr></table></figure></li></ul><h1 id="Q：CPU-与-Redis"><a href="#Q：CPU-与-Redis" class="headerlink" title="Q：CPU 与 Redis"></a>Q：CPU 与 Redis</h1><h2 id="主流的-CPU-架构"><a href="#主流的-CPU-架构" class="headerlink" title="主流的 CPU 架构"></a>主流的 CPU 架构</h2><p>一个 CPU 处理器中一般有多个运行核心，我们把一个运行核心称为一个物理核，每个物理核都可以运行应用程序。每个物理核都拥有私有的一级缓存（Level 1 cache，简称 L1 cache），包括一级指令缓存和一级数据缓存，以及私有的二级缓存（Level 2 cache，简称 L2 cache）。不同的物理核还会共享一个共同的三级缓存（Level 3 cache，简称为 L3 cache）。</p><p>另外，现在主流的 CPU 处理器中，每个物理核通常都会运行两个超线程，也叫作逻辑核。同一个物理核的逻辑核会共享使用 L1、L2 缓存。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-268b727271cd8da1cf2db62c8620805c13d87c7e.jpg" alt="img" style="zoom:15%;" /><p>在主流的服务器上，一个 CPU 处理器会有 10 到 20 多个物理核。同时，为了提升服务器的处理能力，服务器上通常还会有多个 CPU 处理器（也称为多 CPU Socket），每个处理器有自己的物理核（包括 L1、L2 缓存），L3 缓存，以及连接的内存，同时，不同处理器间通过总线连接。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-64cab13df3aa69439287b908360c8da6dac29edd.jpg" alt="img" style="zoom:15%;" /><p>在多 CPU 架构上，应用程序可以在不同的处理器上运行。在刚才的图中，Redis 可以先在 Socket 1 上运行一段时间，然后再被调度到 Socket 2 上运行。</p><p>但是，有个地方需要注意一下：如果应用程序先在一个 Socket 上运行，并且把数据保存到了内存，然后被调度到另一个 Socket 上运行，此时，应用程序再进行内存访问时，就需要访问之前 Socket 上连接的内存，这种访问属于远端内存访问。和访问 Socket 直接连接的内存相比，远端内存访问会增加应用程序的延迟。</p><p>在多 CPU 架构下，一个应用程序访问所在 Socket 的本地内存和访问远端内存的延迟并不一致，所以，我们也把这个架构称为非统一内存访问架构（Non-Uniform Memory Access，NUMA 架构）。</p><h2 id="CPU-多核对-Redis-性能的影响"><a href="#CPU-多核对-Redis-性能的影响" class="headerlink" title="CPU 多核对 Redis 性能的影响"></a>CPU 多核对 Redis 性能的影响</h2><p>CPU 的 context switch 次数比较多会影响 Redis 的读写性能。</p><p>context switch 是指线程的上下文切换，这里的上下文就是线程的运行时信息。在 CPU 多核的环境中，一个线程先在一个 CPU 核上运行，之后又切换到另一个 CPU 核上运行，这时就会发生 context switch。</p><p>如果在 CPU 多核场景下，Redis 实例被频繁调度到不同 CPU 核上运行的话，那么，对 Redis 实例的请求处理时间影响就更大了。每调度一次，一些请求就会受到运行时信息、指令和数据重新加载过程的影响，这就会导致某些请求的延迟明显高于其他请求。</p><p>我们可以使用 taskset 命令把一个程序绑定在一个核上运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskset -c 0 ./redis-server</span><br></pre></td></tr></table></figure><h2 id="CPU-的-NUMA-架构对-Redis-性能的影响"><a href="#CPU-的-NUMA-架构对-Redis-性能的影响" class="headerlink" title="CPU 的 NUMA 架构对 Redis 性能的影响"></a>CPU 的 NUMA 架构对 Redis 性能的影响</h2><p>如果网络中断处理程序和 Redis 实例各自所绑的 CPU 核不在同一个 CPU Socket 上，那么，Redis 实例读取网络数据时，就需要跨 CPU Socket 访问内存，这个过程会花费较多时间。</p><p>所以，为了避免 Redis 跨 CPU Socket 访问网络数据，我们最好把网络中断程序和 Redis 实例绑在同一个 CPU Socket 上，这样一来，Redis 实例就可以直接从本地内存读取网络数据了。</p><p>在 CPU 的 NUMA 架构下，对 CPU 核的编号规则，并不是先把一个 CPU Socket 中的所有逻辑核编完，再对下一个 CPU Socket 中的逻辑核编码，而是先给每个 CPU Socket 中每个物理核的第一个逻辑核依次编号，再给每个 CPU Socket 中的物理核的第二个逻辑核依次编号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lscpu</span><br><span class="line"></span><br><span class="line">Architecture: x86_64</span><br><span class="line">...</span><br><span class="line">NUMA node0 CPU(s): 0-5,12-17</span><br><span class="line">NUMA node1 CPU(s): 6-11,18-23</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="绑核的风险和解决方案"><a href="#绑核的风险和解决方案" class="headerlink" title="绑核的风险和解决方案"></a>绑核的风险和解决方案</h2><p>把 Redis 实例和物理核绑定，可以让主线程、子进程、后台线程共享使用 2 个逻辑核，可以在一定程度上缓解 CPU 资源竞争。但是，因为只用了 2 个逻辑核，它们相互之间的 CPU 竞争仍然还会存在。</p><p>另一种方案：修改 Redis 源码（略）</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 笔记三</title>
      <link href="/post/04c289c0-e2dd-11eb-9088-bdddfe01ee68/"/>
      <url>/post/04c289c0-e2dd-11eb-9088-bdddfe01ee68/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Q：万金油的-String-不一定好用"><a href="#Q：万金油的-String-不一定好用" class="headerlink" title="Q：万金油的 String 不一定好用"></a>Q：万金油的 String 不一定好用</h1><p>场景：</p><p>开发一个图片存储系统，要求这个系统能快速地记录图片 ID 和图片在存储系统中保存时的 ID（可以直接叫作图片存储对象 ID）。同时，还要能够根据图片 ID 快速查找到图片存储对象 ID。</p><p>用 10 位数来表示图片 ID 和图片存储对象 ID，例如，图片 ID 为 1101000051，它在存储系统中对应的 ID 号是 3301000051。</p><p><strong>初始设计：</strong></p><p>图片 ID 和图片存储对象 ID 正好一一对应，是典型的“键 - 单值”模式。所谓的“单值”，就是指键值对中的值就是一个值，而不是一个集合，这和 String 类型提供的“一个键对应一个值的数据”的保存形式刚好契合。</p><p>刚开始，我们保存了 1 亿张图片，大约用了 6.4GB 的内存。但是，随着图片数据量的不断增加，我们的 Redis 内存使用量也在增加，结果就遇到了大内存 Redis 实例因为生成 RDB 而响应变慢的问题。很显然，String 类型并不是一种好的选择，我们还需要进一步寻找能节省内存开销的数据类型方案。</p><h2 id="内存使用量大的原因"><a href="#内存使用量大的原因" class="headerlink" title="内存使用量大的原因"></a>内存使用量大的原因</h2><p>String 类型并不是适用于所有场合的，它有一个明显的短板，就是它保存数据时所消耗的内存空间较多。</p><p>其实，除了记录实际数据，String 类型还需要额外的内存空间记录数据长度、空间使用等信息，这些信息也叫作元数据。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-0f63d2438a538cc91cd4fdc033c87f9dff484657.jpg" alt="img" style="zoom:15%;" /><p>反正就是除了本身的应存的数据之外，还保留很多其他的元数据，所以占用内存较大。</p><h2 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h2><p>在保存单值的键值对时，可以采用基于 Hash 类型的二级编码方法。这里说的二级编码，就是把一个单值的数据拆分成两部分，前一部分作为 Hash 集合的 key，后一部分作为 Hash 集合的 value，这样一来，我们就可以把单值数据保存到 Hash 集合中了。</p><p>以图片 ID 1101000060 和图片存储对象 ID 3302000080 为例，我们可以把图片 ID 的前 7 位（1101000）作为 Hash 类型的键，把图片 ID 的最后 3 位（060）和图片存储对象 ID 分别作为 Hash 类型值中的 key 和 value。</p><p>二级编码一定要把图片 ID 的前 7 位作为 Hash 类型的键，把最后 3 位作为 Hash 类型值中的 key 吗？其实，二级编码方法中采用的 ID 长度是有讲究的。</p><p>Redis Hash 类型的两种底层实现结构，分别是压缩列表和哈希表。那么，Hash 类型底层结构什么时候使用压缩列表，什么时候使用哈希表呢？其实，Hash 类型设置了用压缩列表保存数据时的两个阈值，一旦超过了阈值，Hash 类型就会用哈希表来保存数据了。</p><p>这两个阈值分别对应以下两个配置项：</p><ul><li><p>hash-max-ziplist-entries：表示用压缩列表保存时哈希集合中的最大元素个数。</p></li><li><p>hash-max-ziplist-value：表示用压缩列表保存时哈希集合中单个元素的最大长度。</p></li></ul><p>如果我们往 Hash 集合中写入的元素个数超过了 hash-max-ziplist-entries，或者写入的单个元素大小超过了 hash-max-ziplist-value，Redis 就会自动把 Hash 类型的实现结构由压缩列表转为哈希表。一旦从压缩列表转为了哈希表，Hash 类型就会一直用哈希表进行保存，而不会再转回压缩列表了。在节省内存空间方面，哈希表就没有压缩列表那么高效了。</p><p>为了能充分使用压缩列表的精简内存布局，我们一般要控制保存在 Hash 集合中的元素个数。所以，在刚才的二级编码中，我们只用图片 ID 最后 3 位作为 Hash 集合的 key，也就保证了 Hash 集合的元素个数不超过 1000，同时，我们把 hash-max-ziplist-entries 设置为 1000，这样一来，Hash 集合就可以一直使用压缩列表来节省内存空间了。</p><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><p>这篇就是说了 String 在大量的键值对方面内存容量上有点拉胯，可以抽取出这些 key 的共性，再搞一个集合类型作为 value。当然如果 key 各个都不太一样就不太好搞了。</p><p>另外，教你了怎么采用压缩列表能够更大程度的节省空间。然后这个何时采用压缩列表何时采用其他的数据结构，配置项可配的。</p><p>另外，压缩列表是一块连续内存，对 CPU cache 也友好，CPU 命中率也不错，所以读取速度也非常快。</p><h1 id="Q：有一亿个keys要统计，应该用哪种集合"><a href="#Q：有一亿个keys要统计，应该用哪种集合" class="headerlink" title="Q：有一亿个keys要统计，应该用哪种集合"></a>Q：有一亿个keys要统计，应该用哪种集合</h1><ul><li>在移动应用中，需要统计每天的新增用户数和第二天的留存用户数；</li><li>在电商网站的商品评论中，需要统计评论列表中的最新评论；</li><li>在签到打卡中，需要统计一个月内连续打卡的用户数；</li><li>在网页访问记录中，需要统计独立访客（Unique Visitor，UV）量。</li></ul><h2 id="聚合统计"><a href="#聚合统计" class="headerlink" title="聚合统计"></a>聚合统计</h2><blockquote><p>统计手机 App 每天的新增用户数和第二天的留存用户数</p></blockquote><p>所谓的聚合统计，就是指统计多个集合元素的聚合结果，包括：统计多个集合的共有元素（交集统计）；把两个集合相比，统计其中一个集合独有的元素（差集统计）；统计多个集合的所有元素（并集统计）。</p><p>我们还需要把每一天登录的用户 ID，记录到一个新集合中，我们把这个集合叫作每日用户 Set，它有两个特点：key 是 user:id 以及当天日期，例如 <code>user:id:20200803</code>；value 是 Set 集合，记录当天登录的用户 ID。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-7cbaddb64afe43cc42fe5b2c2519a13dfe2ad8b3.jpg" alt="img" style="zoom:15%;" /><p>当要计算 8 月 4 日的留存用户时，我们只需要再计算 <code>user:id:20200803</code> 和 <code>user:id:20200804</code> 两个 Set 的交集，就可以得到同时在这两个集合中的用户 ID 了，这些就是在 8 月 3 日登录，并且在 8 月 4 日留存的用户。</p><p>执行的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SINTERSTORE user:id:rem user:id:20200803 user:id:20200804</span><br></pre></td></tr></table></figure><p>Set 的差集、并集和交集的计算复杂度较高，在数据量较大的情况下，如果直接执行这些计算，会导致 Redis 实例阻塞。所以，分享一个小建议：<strong>你可以从主从集群中选择一个从库，让它专门负责聚合计算，或者是把数据读取到客户端，在客户端来完成聚合统计</strong>，这样就可以规避阻塞主库实例和其他从库实例的风险了。</p><h2 id="排序统计"><a href="#排序统计" class="headerlink" title="排序统计"></a>排序统计</h2><blockquote><p>电商网站上提供最新评论列表</p></blockquote><p>List 是按照元素进入 List 的顺序进行排序的，而 Sorted Set 可以根据元素的权重来排序，我们可以自己来决定每个元素的权重值。比如说，我们可以根据元素插入 Sorted Set 的时间确定权重值，先插入的元素权重小，后插入的元素权重大。</p><p>这样会出现翻页过程中，新插入元素，导致第二页出现重复数据的情况（其实这种情况因被允许，我看很多网站其实都是存在该现象）</p><p><strong>如果不想出现这样的情况，就用 Sorted Set，因为他的取的权重还是老的，所以不会出现新的元素。除非你又获取了新的元素，拿到的新的权重，不然就是老的权重。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANGEBYSCORE comments N-9 N</span><br></pre></td></tr></table></figure><h2 id="二值状态统计"><a href="#二值状态统计" class="headerlink" title="二值状态统计"></a>二值状态统计</h2><blockquote><p>签到打卡的场景</p></blockquote><p>Bitmap 提供了 GETBIT&#x2F;SETBIT 操作，使用一个偏移值 offset 对 bit 数组的某一个 bit 位进行读和写。不过，需要注意的是，Bitmap 的偏移量是从 0 开始算的，也就是说 offset 的最小值是 0。当使用 SETBIT 对一个 bit 位进行写操作时，这个 bit 位会被设置为 1。Bitmap 还提供了 BITCOUNT 操作，用来统计这个 bit 数组中所有“1”的个数。</p><p>那么，具体该怎么用 Bitmap 进行签到统计呢？</p><p>借助一个具体的例子来说明。假设我们要统计 ID 3000 的用户在 2020 年 8 月份的签到情况，就可以按照下面的步骤进行操作。</p><p>第一步，执行下面的命令，记录该用户 8 月 3 号已签到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETBIT uid:sign:3000:202008 2 1</span><br></pre></td></tr></table></figure><p>第二步，检查该用户 8 月 3 日是否签到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GETBIT uid:sign:3000:202008 3</span><br></pre></td></tr></table></figure><p>第三步，统计该用户在 8 月份的签到次数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BITCOUNT uid:sign:3000:202008</span><br></pre></td></tr></table></figure><p>所以，如果只需要统计数据的二值状态，例如商品有没有、用户在不在等，就可以使用 Bitmap，因为它只用一个 bit 位就能表示 0 或 1。在记录海量数据时，Bitmap 能够有效地节省内存空间。</p><h2 id="基数统计"><a href="#基数统计" class="headerlink" title="基数统计"></a>基数统计</h2><blockquote><p>统计网页的 UV</p></blockquote><p>网页 UV 的统计有个独特的地方，就是需要去重，一个用户一天内的多次访问只能算作一次。在 Redis 的集合类型中，Set 类型默认支持去重，所以看到有去重需求时，我们可能第一时间就会想到用 Set 类型。</p><p>我们来结合一个例子看一看用 Set 的情况。有一个用户 user1 访问 page1 时，你把这个信息加到 Set 中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SADD page1:uv user1</span><br></pre></td></tr></table></figure><p>但是，如果 page1 非常火爆，UV 达到了千万，这个时候，一个 Set 就要记录千万个用户 ID。对于一个搞大促的电商网站而言，这样的页面可能有成千上万个，如果每个页面都用这样的一个 Set，就会消耗很大的内存空间。</p><p>这时候，就要用到 Redis 提供的 HyperLogLog 了。HyperLogLog 是一种用于统计基数的数据集合类型，它的最大优势就在于，当集合元素数量非常多时，它计算基数所需的空间总是固定的，而且还很小。</p><p>在统计 UV 时，你可以用 PFADD 命令（用于向 HyperLogLog 中添加新元素）把访问页面的每个用户都添加到 HyperLogLog 中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PFADD page1:uv user1 user2 user3 user4 user5</span><br></pre></td></tr></table></figure><p>接下来，就可以用 PFCOUNT 命令直接获得 page1 的 UV 值了，这个命令的作用就是返回 HyperLogLog 的统计结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PFCOUNT page1:uv</span><br></pre></td></tr></table></figure><p>**HyperLogLog 的统计规则是基于概率完成的，所以它给出的统计结果是有一定误差的，标准误算率是 0.81%**。这也就意味着，你使用 HyperLogLog 统计的 UV 是 100 万，但实际的 UV 可能是 101 万。虽然误差率不算大，但是，如果你需要精确统计结果的话，最好还是继续用 Set 或 Hash 类型。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-7d9ae33f5295299379b8c4e81a9585cc3578a6e3.jpg" alt="img" style="zoom:15%;" /><h1 id="Q：GEO-是怎么搞定位置信息服务的"><a href="#Q：GEO-是怎么搞定位置信息服务的" class="headerlink" title="Q：GEO 是怎么搞定位置信息服务的"></a>Q：GEO 是怎么搞定位置信息服务的</h1><p>实际上，GEO 类型的底层数据结构就是用 Sorted Set 来实现的。</p><p>为了能高效地对经纬度进行比较，Redis 采用了业界广泛使用的 GeoHash 编码方法，这个方法的基本原理就是“二分区间，区间编码”。</p><p>就是每次划分成两个区间，左 0 右 1。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-087bd587b868ff5cdac6653f2641c76ea1d0284a.jpg" alt="img" style="zoom:15%;" /><p>对纬度的编码方式，和对经度的一样，只是纬度的范围是[-90，90]，下面这张表显示了对纬度值 39.86 的编码过程。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-c3949ea4fcbebaa9be76a403eab0dca873bed72f.jpg" alt="img" style="zoom:15%;" /><p>对进度和维度进行 N 次的二分法。</p><p>我们刚刚计算的经纬度（116.37，39.86）的各自编码值是 11010 和 10111，组合之后，第 0 位是经度的第 0 位 1，第 1 位是纬度的第 0 位 1，第 2 位是经度的第 1 位 1，第 3 位是纬度的第 1 位 0，以此类推，就能得到最终编码值 1110011101，如下图所示：</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-797b10532d5aea64340fc6512912f6caaec0826e.jpg" alt="img" style="zoom:15%;" /><p>地理空间被划分成了一个个方格</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-d69993567d8f774b9d38c9983b0710399e07d2f1.jpg" alt="img" style="zoom:15%;" /><p>不同位的做 GEOHASH 编码，可以得到精度不同的方格。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-ebc4cadde7c394f18ffe17cd251725a9d30435e3.jpg" alt="img" style="zoom:15%;" /><h2 id="如何操作-GEO-类型？"><a href="#如何操作-GEO-类型？" class="headerlink" title="如何操作 GEO 类型？"></a>如何操作 GEO 类型？</h2><p>在使用 GEO 类型时，我们经常会用到两个命令，分别是 GEOADD 和 GEORADIUS。</p><p>GEOADD 命令：用于把一组经纬度信息和相对应的一个 ID 记录到 GEO 类型集合中；</p><p>GEORADIUS 命令：会根据输入的经纬度位置，查找以这个经纬度为中心的一定范围内的其他元素。</p><p>以叫车应用的车辆匹配场景为例，假设车辆 ID 是 33，经纬度位置是（116.034579，39.030452），我们可以用一个 GEO 集合保存所有车辆的经纬度，集合 key 是 cars:locations。执行下面的这个命令，就可以把 ID 号为 33 的车辆的当前经纬度位置存入 GEO 集合中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GEOADD cars:locations 116.034579 39.030452 33</span><br></pre></td></tr></table></figure><p>LBS 应用执行下面的命令时，Redis 会根据输入的用户的经纬度信息（116.054579，39.030452 ），查找以这个经纬度为中心的 5 公里内的车辆信息，并返回给 LBS 应用。当然， 你可以修改“5”这个参数，来返回更大或更小范围内的车辆信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GEORADIUS cars:locations 116.054579 39.030452 5 km ASC COUNT 10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 笔记二</title>
      <link href="/post/d9851020-dfd0-11eb-9b07-0d08f44604fc/"/>
      <url>/post/d9851020-dfd0-11eb-9b07-0d08f44604fc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Q：什么是主从模式"><a href="#Q：什么是主从模式" class="headerlink" title="Q：什么是主从模式"></a>Q：什么是主从模式</h1><p>那我们总说的 Redis 具有高可靠性，又是什么意思呢？</p><p>其实，这里有两层含义：一是数据尽量少丢失，二是服务尽量少中断。AOF 和 RDB 保证了前者，而对于后者，Redis 的做法就是增加副本冗余量，将一份数据同时保存在多个实例上。即使有一个实例出现了故障，需要过一段时间才能恢复，其他实例也可以对外提供服务，不会影响业务使用。</p><p>实际上，Redis 提供了主从库模式，以保证数据副本的一致，主从库之间采用的是读写分离的方式。</p><ul><li>读操作：主库、从库都可以接收；</li><li>写操作：首先到主库执行，然后，主库将写操作同步给从库。</li></ul><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-f6b36750619c4a34b531c6beeb5f6107b8705ed7.jpg" alt="img" style="zoom:15%;" /><h1 id="Q：主从之间什么时候进行第一次同步"><a href="#Q：主从之间什么时候进行第一次同步" class="headerlink" title="Q：主从之间什么时候进行第一次同步"></a>Q：主从之间什么时候进行第一次同步</h1><p>当我们启动多个 Redis 实例的时候，它们相互之间就可以通过 replicaof（Redis 5.0 之前使用 slaveof）命令形成主库和从库的关系，之后会按照三个阶段完成数据的第一次同步。</p><p>例如，现在有实例 1（ip：172.16.19.3）和实例 2（ip：172.16.19.5），我们在实例 2 上执行以下这个命令后，实例 2 就变成了实例 1 的从库，并从实例 1 上复制数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replicaof 172.16.19.3 6379</span><br></pre></td></tr></table></figure><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-5f7f97d340f941db18d36b83b7d761a4b14d0cd3.jpg" alt="img" style="zoom:15%;" /><p>简单来说就是以下流程：</p><ol start="0"><li><p>第一阶段，主从库间建立连接、协商同步的过程，主要是为全量复制做准备</p></li><li><p>第二阶段，主库将所有数据同步给从库。从库收到数据后，在本地完成数据加载。这个过程依赖于内存快照生成的 RDB 文件。</p></li><li><p>第三阶段，主库会把第二阶段执行过程中新收到的写命令，再发送给从库。具体的操作是，当主库完成 RDB 文件发送后，就会把此时 replication buffer 中的修改操作发给从库，从库再重新执行这些操作。这样一来，主从库就实现同步了。</p></li></ol><p>也就是说从库全量复制完了之后，之后都是增量同步。查考下文的<code>repl_backlog_buffer</code>。</p><h1 id="Q：主从级联模式分担全量复制时的主库压力"><a href="#Q：主从级联模式分担全量复制时的主库压力" class="headerlink" title="Q：主从级联模式分担全量复制时的主库压力"></a>Q：主从级联模式分担全量复制时的主库压力</h1><p>一主多从的模式下，所有的从库都要和主库进行全量复制的话，就会导致主库忙于 fork 子进程生成 RDB 文件，进行数据全量同步。fork 这个操作会阻塞主线程处理正常请求，从而导致主库响应应用程序的请求速度变慢。此外，传输 RDB 文件也会占用主库的网络带宽，同样会给主库的资源使用带来压力。</p><p>那么，有没有好的解决方法可以分担主库压力呢？</p><p>主 - 从 - 从模式。这个过程也称为基于长连接的命令传播，可以避免频繁建立连接的开销。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replicaof 所选从库的IP 6379</span><br></pre></td></tr></table></figure><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-3d64bc4ebc575fbf4625e7416cbe700d95c5126d.jpg" alt="img" style="zoom:15%;" /><h1 id="Q：主从库间网络断了怎么办？"><a href="#Q：主从库间网络断了怎么办？" class="headerlink" title="Q：主从库间网络断了怎么办？"></a>Q：主从库间网络断了怎么办？</h1><p>采用增量模式同步</p><p>当主从库断连后，主库会把断连期间收到的写操作命令，写入 replication buffer，同时也会把这些操作命令也写入 repl_backlog_buffer 这个缓冲区。</p><p>repl_backlog_buffer 是一个环形缓冲区，主库会记录自己写到的位置，从库则会记录自己已经读到的位置。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-b527fa3a57208c9d98e80b5e47c155deed6034c2.jpg" alt="img" style="zoom:15%;" /><p>不过，有一个地方我要强调一下，因为 repl_backlog_buffer 是一个环形缓冲区，所以在缓冲区写满后，主库会继续写入，此时，就会覆盖掉之前写入的操作。如果从库的读取速度比较慢，就有可能导致从库还未读取的操作被主库新写的操作覆盖了，这会导致主从库间的数据不一致。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-cfb066dafe6cd4a1a9abb9ab740b9012f643a5fc.jpg" alt="img" style="zoom:15%;" /><p>所以恢复的过程精髓在于 repl_backlog_buffer，对于该值不能太小，导致圆环被覆写。</p><h1 id="Q：哨兵机制的基本流程"><a href="#Q：哨兵机制的基本流程" class="headerlink" title="Q：哨兵机制的基本流程"></a>Q：哨兵机制的基本流程</h1><p>哨兵主要负责的就是三个任务：监控、选主（选择主库）和通知。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-9431ebeb5f750462fa55476508d7f58970e47d3d.jpg" alt="img" style="zoom:15%;" /><p>在监控和选主这两个任务中，哨兵需要做出两个决策：</p><ul><li>在监控任务中，哨兵需要判断主库是否处于下线状态；</li><li>在选主任务中，哨兵也要决定选择哪个从库实例作为主库。</li></ul><h2 id="主观下线与客观下线"><a href="#主观下线与客观下线" class="headerlink" title="主观下线与客观下线"></a>主观下线与客观下线</h2><p>哨兵进程会使用 PING 命令检测它自己和主、从库的网络连接情况，用来判断实例的状态。如果哨兵发现主库或从库对 PING 命令的响应超时了，那么，哨兵就会先把它标记为“主观下线”。</p><p>哨兵机制通常会采用多实例组成的集群模式进行部署，这也被称为哨兵集群。引入多个哨兵实例一起来判断，就可以避免单个哨兵因为自身网络状况不好，而误判主库下线的情况。</p><p>在判断主库是否下线时，不能由一个哨兵说了算，只有大多数的哨兵实例，都判断主库已经“主观下线”了，主库才会被标记为“客观下线”</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-450fda1ef8def065305ce5b0399898df76d8f29b.jpg" alt="img" style="zoom:15%;" /><p>简单来说，“客观下线”的标准就是，当有 N 个哨兵实例时，最好要有 N&#x2F;2 + 1 个实例判断主库为“主观下线”，才能最终判定主库为“客观下线”。</p><p>所以最好采用奇数个（大于等于 3）个哨兵节点。</p><h2 id="如何筛选-打分？"><a href="#如何筛选-打分？" class="headerlink" title="如何筛选 + 打分？"></a>如何筛选 + 打分？</h2><ol><li>选择优先级最高的<ol><li>用户可以通过 slave-priority 配置项，给不同的从库设置不同优先级。比如，你有两个从库，它们的内存大小不一样，你可以手动给内存大的实例设置一个高优先级。在选主时，哨兵会给优先级高的从库打高分，如果有一个从库优先级最高，那么它就是新主库了。如果从库的优先级都一样，那么哨兵开始第二轮打分。</li></ol></li><li>和旧主库同步程度最接近的从库得分高。<ol><li>repl_backlog_buffer 中的位置，而从库会用 slave_repl_offset 这个值记录当前的复制进度。就像下图所示，旧主库的 master_repl_offset 是 1000，从库 1、2 和 3 的 slave_repl_offset 分别是 950、990 和 900，那么，从库 2 就应该被选为新主库。</li><li>如右图：<img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-3add115cf107998d46fe4d2557eb413c187a868a.jpg" alt="img" style="zoom:15%;" /></li></ol></li><li>ID 号小的从库得分高。<ol><li>在优先级和复制进度都相同的情况下，ID 号最小的从库得分最高，会被选为新主库。</li><li>也就是保证一定能选出一个从库来当新主库</li></ol></li></ol><h1 id="Q：哨兵之间的选举"><a href="#Q：哨兵之间的选举" class="headerlink" title="Q：哨兵之间的选举"></a>Q：哨兵之间的选举</h1><h2 id="基于-pub-sub-机制的哨兵集群组成"><a href="#基于-pub-sub-机制的哨兵集群组成" class="headerlink" title="基于 pub&#x2F;sub 机制的哨兵集群组成"></a>基于 pub&#x2F;sub 机制的哨兵集群组成</h2><p>哨兵实例之间可以相互发现，要归功于 Redis 提供的 pub&#x2F;sub 机制，也就是发布 &#x2F; 订阅机制。</p><p>只有订阅了同一个频道的应用，才能通过发布的消息进行信息交换。</p><p>在主从集群中，主库上有一个名为 <code>__sentinel__:hello</code> 的频道，不同哨兵就是通过它来相互发现，实现互相通信的。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-1445b2836e76b28630155c904f2719081b472358.jpg" alt="img" style="zoom:15%;" /><p>这样哨兵节点之间就完成了彼此的通信建立。</p><h2 id="基于-pub-sub-机制的哨兵集群与主从库连接"><a href="#基于-pub-sub-机制的哨兵集群与主从库连接" class="headerlink" title="基于 pub&#x2F;sub 机制的哨兵集群与主从库连接"></a>基于 pub&#x2F;sub 机制的哨兵集群与主从库连接</h2><p>这是由哨兵向主库发送 INFO 命令来完成的。就像下图所示，哨兵 2 给主库发送 INFO 命令，主库接受到这个命令后，就会把从库列表返回给哨兵。接着，哨兵就可以根据从库列表中的连接信息，和每个从库建立连接，并在这个连接上持续地对从库进行监控。哨兵 1 和 3 可以通过相同的方法和从库建立连接。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-c56175b0ddb16be4a21802fbf1ad6d57e23b66ae.jpg" alt="img" style="zoom:15%;" /><h2 id="基于-pub-sub-机制的客户端事件通知"><a href="#基于-pub-sub-机制的客户端事件通知" class="headerlink" title="基于 pub&#x2F;sub 机制的客户端事件通知"></a>基于 pub&#x2F;sub 机制的客户端事件通知</h2><p>哨兵就是一个运行在特定模式下的 Redis 实例，只不过它并不服务请求操作，只是完成监控、选主和通知的任务。所以，每个哨兵实例也提供 pub&#x2F;sub 机制，客户端可以从哨兵订阅消息。哨兵提供的消息订阅频道有很多，不同频道包含了主从库切换过程中的不同关键事件。</p><p>有了 pub&#x2F;sub 机制，哨兵和哨兵之间、哨兵和从库之间、哨兵和客户端之间就都能建立起连接了。</p><h2 id="由哪个哨兵执行主从切换？"><a href="#由哪个哨兵执行主从切换？" class="headerlink" title="由哪个哨兵执行主从切换？"></a>由哪个哨兵执行主从切换？</h2><p>切换新主库需要选出一个 leader 来进行操作。</p><p>具体步骤（个人总结）：</p><ol><li>先判断主观下线，发送主观下线的命令，等待其他哨兵节点回应。</li><li>收到其他哨兵节点的回应，当主观下线的票数大于 N &#x2F; 2 + 1 时，标记主库是客观下线的事实，此时，这个哨兵就可以再给其他哨兵发送命令，表明希望由自己来执行主从切换，并让所有其他哨兵进行投票。</li><li>发送这个命令时会先投自己一票，并且只能投一次赞成票，后面接收到这个选 leader 的命令都是否决票</li><li>在投票过程中，任何一个想成为 Leader 的哨兵，要满足两个条件：第一，拿到半数以上的赞成票；第二，拿到的票数同时还需要大于等于哨兵配置文件中的 quorum 值。</li></ol><p>投票选 leader 中的细节：</p><p>其他哨兵收到投票请求后，由于自己还没有询问进入判定“客观下线”的流程，所以该哨兵是可以直接投票给“先做事”的哨兵，不会投 leader 票给自己。</p><p>存在的问题（我在群里的提问）：</p><blockquote><p>我提出的问题：假如哨兵集群主库挂了，所有哨兵实例在同一时刻判断主观下线，然后同时接收到其他哨兵的消息，都到了客观下线的这一步，然后同时给自己投上一票 leader 票，是不是就没法选出 leader 了。。这种小概率会发生吗？</p></blockquote><p>收到群友们的热心解答：</p><div><img float:left src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/image-20210708161819035.png" alt="image-20210708161819035" style="zoom:25%;" /><img float:left src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/image-20210708162028283.png" alt="image-20210708162028283" style="zoom:25%;" /><img float:left src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/image-20210708162146118.png" alt="image-20210708162146118" style="zoom:25%;" /></div><ul><li><p>Q：假设有一个 Redis 集群，是“一主四从”，同时配置了包含 5 个哨兵实例的集群，quorum 值设为 2。在运行过程中，如果有 3 个哨兵实例都发生故障了，此时，Redis 主库如果有故障，还能正确地判断主库“客观下线”吗？如果可以的话，还能进行主从库自动切换吗？</p></li><li><p>A：这种情况，无论投票是怎么样，都没选出 leader 进行主从切换，因为哨兵实例数太少了，不满足大于等于 3。</p></li></ul><p>最后，一个经验：要保证所有哨兵实例的配置是一致的，尤其是主观下线的判断值 down-after-milliseconds。在项目中，因为这个值在不同的哨兵实例上配置不一致，导致哨兵集群一直没有对有故障的主库形成共识，也就没有及时切换主库，最终的结果就是集群服务不稳定。</p><h1 id="Q：切片集群（Redis-官网集群模式）"><a href="#Q：切片集群（Redis-官网集群模式）" class="headerlink" title="Q：切片集群（Redis 官网集群模式）"></a>Q：切片集群（Redis 官网集群模式）</h1><h2 id="Redis-如何保存更多数据？"><a href="#Redis-如何保存更多数据？" class="headerlink" title="Redis 如何保存更多数据？"></a>Redis 如何保存更多数据？</h2><ul><li>纵向扩展：升级单个 Redis 实例的资源配置，包括增加内存容量、增加磁盘容量、使用更高配置的 CPU。就像下图中，原来的实例内存是 8GB，硬盘是 50GB，纵向扩展后，内存增加到 24GB，磁盘增加到 150GB。</li><li>横向扩展：横向增加当前 Redis 实例的个数，就像下图中，原来使用 1 个 8GB 内存、50GB 磁盘的实例，现在使用三个相同配置的实例。</li></ul><h2 id="数据切片和实例的对应分布关系"><a href="#数据切片和实例的对应分布关系" class="headerlink" title="数据切片和实例的对应分布关系"></a>数据切片和实例的对应分布关系</h2><p>具体来说，Redis Cluster 方案采用哈希槽（Hash Slot，接下来我会直接称之为 Slot），来处理数据和实例之间的映射关系。在 Redis Cluster 方案中，一个切片集群共有 16384 个哈希槽，这些哈希槽类似于数据分区，每个键值对都会根据它的 key，被映射到一个哈希槽中。</p><p>具体的映射过程分为两大步：首先根据键值对的 key，按照CRC16 算法计算一个 16 bit 的值；然后，再用这个 16bit 值对 16384 取模，得到 0~16383 范围内的模数，每个模数代表一个相应编号的哈希槽。</p><p>手动指定每个实例上的哈希槽数量：使用 cluster meet 命令手动建立实例间的连接，形成集群，再使用 cluster addslots 命令，指定每个实例上的哈希槽个数。</p><p><strong>在手动分配哈希槽时，需要把 16384 个槽都分配完，否则 Redis 集群无法正常工作。</strong></p><h2 id="客户端如何定位数据？"><a href="#客户端如何定位数据？" class="headerlink" title="客户端如何定位数据？"></a>客户端如何定位数据？</h2><p>Redis 实例会把自己的哈希槽信息发给和它相连接的其它实例，来完成哈希槽分配信息的扩散。当实例之间相互连接后，每个实例就有所有哈希槽的映射关系了。</p><p>客户端收到哈希槽信息后，会把哈希槽信息缓存在本地。当客户端请求键值对时，会先计算键所对应的哈希槽，然后就可以给相应的实例发送请求了。</p><p>在集群中，实例和哈希槽的对应关系并不是一成不变的，最常见的变化有两个：</p><ul><li>在集群中，实例有新增或删除，Redis 需要重新分配哈希槽；</li><li>为了负载均衡，Redis 需要把哈希槽在所有实例上重新分布一遍。</li></ul><blockquote><p>说白了就是，客户端先存一个默认值（默认该值在某个实例上），但是哈希槽会移动，所以请求的结果不一定会直接得到数据，需要对返回的结果进行二次请求。</p></blockquote><p>Redis Cluster 方案提供了一种重定向机制，所谓的“重定向”，就是指，客户端给一个实例发送数据读写操作时，这个实例上并没有相应的数据，客户端要再给一个新实例发送操作命令。</p><h3 id="MOVED命令"><a href="#MOVED命令" class="headerlink" title="MOVED命令"></a>MOVED命令</h3><p>实例给客户端返回下面的 MOVED 命令响应结果，这个结果中就包含了新实例的访问地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET hello:key</span><br><span class="line">(error) MOVED 13320 172.16.19.5:6379</span><br></pre></td></tr></table></figure><p>其中，MOVED 命令表示，客户端请求的键值对所在的哈希槽 13320，实际是在 172.16.19.5 这个实例上。通过返回的 MOVED 命令，就相当于把哈希槽所在的新实例的信息告诉给客户端了。这样一来，客户端就可以直接和 172.16.19.5 连接，并发送操作请求了。</p><p><strong>会改变本地缓存，下次会直接请求正确的实例，如果哈希槽没变的话。</strong></p><h3 id="ASK-命令"><a href="#ASK-命令" class="headerlink" title="ASK 命令"></a>ASK 命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET hello:key</span><br><span class="line">(error) ASK 13320 172.16.19.5:6379</span><br></pre></td></tr></table></figure><p>这个结果中的 ASK 命令就表示，客户端请求的键值对所在的哈希槽 13320，在 172.16.19.5 这个实例上，但是这个哈希槽正在迁移。此时，客户端需要先给 172.16.19.5 这个实例发送一个 ASKING 命令。这个命令的意思是，让这个实例允许执行客户端接下来发送的命令。然后，客户端再向这个实例发送 GET 命令，以读取数据。</p><p>不同点：</p><p>客户端ASK重定向命令和 MOVED 命令不同，ASK 命令并不会更新客户端缓存的哈希槽分配信息。所以，在上图中，如果客户端再次请求 Slot 2 中的数据，它还是会给实例 2 发送请求。这也就是说，<strong>ASK 命令的作用只是让客户端能给新实例发送一次请求，而不像 MOVED 命令那样，会更改本地缓存，让后续所有命令都发往新实例</strong>。</p><h2 id="Redis-Cluster-不采用把-key-直接映射到实例的方式，而采用哈希槽的方式原因"><a href="#Redis-Cluster-不采用把-key-直接映射到实例的方式，而采用哈希槽的方式原因" class="headerlink" title="Redis Cluster 不采用把 key 直接映射到实例的方式，而采用哈希槽的方式原因"></a>Redis Cluster 不采用把 key 直接映射到实例的方式，而采用哈希槽的方式原因</h2><blockquote><p>摘自评论区 @Kaito</p></blockquote><ol start="0"><li>整个集群存储key的数量是无法预估的，key的数量非常多时，直接记录每个key对应的实例映射关系，这个映射表会非常庞大，这个映射表无论是存储在服务端还是客户端都占用了非常大的内存空间。</li><li>Redis Cluster采用无中心化的模式（无proxy，客户端与服务端直连），客户端在某个节点访问一个key，如果这个key不在这个节点上，这个节点需要有纠正客户端路由到正确节点的能力（MOVED响应），这就需要节点之间互相交换路由表，每个节点拥有整个集群完整的路由关系。如果存储的都是key与实例的对应关系，节点之间交换信息也会变得非常庞大，消耗过多的网络资源，而且就算交换完成，相当于每个节点都需要额外存储其他节点的路由表，内存占用过大造成资源浪费。</li><li>当集群在扩容、缩容、数据均衡时，节点之间会发生数据迁移，迁移时需要修改每个key的映射关系，维护成本高。</li><li>而在中间增加一层哈希槽，可以把数据和节点解耦，key通过Hash计算，只需要关心映射到了哪个哈希槽，然后再通过哈希槽和节点的映射表找到节点，相当于消耗了很少的CPU资源，不但让数据分布更均匀，还可以让这个映射表变得很小，利于客户端和服务端保存，节点之间交换信息时也变得轻量。</li><li>当集群在扩容、缩容、数据均衡时，节点之间的操作例如数据迁移，都以哈希槽为基本单位进行操作，简化了节点扩容、缩容的难度，便于集群的维护和管理。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 笔记一</title>
      <link href="/post/8b513a00-dfd0-11eb-b078-eb0d993c7e2d/"/>
      <url>/post/8b513a00-dfd0-11eb-b078-eb0d993c7e2d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Q：Redis-变慢的原因一"><a href="#Q：Redis-变慢的原因一" class="headerlink" title="Q：Redis 变慢的原因一"></a>Q：Redis 变慢的原因一</h1><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-4cf5fc6e06152e409de6fa33b92b4445745aa77e.jpg" alt="img" style="zoom: 25%;" /><blockquote><p>类似 Java GC  S0&#x2F;S1 的复制算法</p></blockquote><p>这里存在一个问题，哈希冲突链上的元素只能通过指针逐一查找再操作。如果哈希表里写入的数据越来越多，哈希冲突可能也会越来越多，这就会导致某些哈希冲突链过长，进而导致这个链上的元素查找耗时长，效率降低。对于追求“快”的 Redis 来说，这是不太能接受的。</p><p>所以，Redis 会对哈希表做 rehash 操作。rehash 也就是增加现有的哈希桶数量，让逐渐增多的 entry 元素能在更多的桶之间分散保存，减少单个桶中的元素数量，从而减少单个桶中的冲突。那具体怎么做呢？</p><p>其实，为了使 rehash 操作更高效，Redis 默认使用了两个全局哈希表：哈希表 1 和哈希表 2。一开始，当你刚插入数据时，默认使用哈希表 1，此时的哈希表 2 并没有被分配空间。随着数据逐步增多，Redis 开始执行 rehash，这个过程分为三步：</p><p>给哈希表 2 分配更大的空间，例如是当前哈希表 1 大小的两倍；</p><p>把哈希表 1 中的数据重新映射并拷贝到哈希表 2 中；</p><p>释放哈希表 1 的空间。</p><p>到此，我们就可以从哈希表 1 切换到哈希表 2，用增大的哈希表 2 保存更多数据，而原来的哈希表 1 留作下一次 rehash 扩容备用。</p><h1 id="Q：渐进式-rehash-拷贝"><a href="#Q：渐进式-rehash-拷贝" class="headerlink" title="Q：渐进式 rehash 拷贝"></a>Q：渐进式 rehash 拷贝</h1><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-d050b609a1772189306e6bd2d584dab60549b591.jpg" alt="img" style="zoom: 25%;" /><p>简单来说就是在第二步拷贝数据时，Redis 仍然正常处理客户端请求，每处理一个请求时，从哈希表 1 中的第一个索引位置开始，顺带着将这个索引位置上的所有 entries 拷贝到哈希表 2 中；等处理下一个请求时，再顺带拷贝哈希表 1 中的下一个索引位置的 entries。</p><p>因为在进行渐进式 rehash 的过程中， 字典会同时使用 ht[0] 和 ht[1] 两个哈希表， 所以在渐进式 rehash 进行期间， 字典的删除（delete）、查找（find）、更新（update）等操作会在两个哈希表上进行： 比如说， 要在字典里面查找一个键的话， 程序会先在 ht[0] 里面进行查找， 如果没找到的话， 就会继续到 ht[1] 里面进行查找， 诸如此类。</p><p>另外， 在渐进式 rehash 执行期间， 新添加到字典的键值对一律会被保存到 ht[1] 里面， 而 ht[0] 则不再进行任何添加操作： 这一措施保证了 ht[0] 包含的键值对数量会只减不增， 并随着 rehash 操作的执行而最终变成空表。</p><p><strong>Redis 会执行定时任务，定时任务中就包含了 rehash 操作。所谓的定时任务，就是按照一定频率（例如每 100ms&#x2F; 次）执行的任务。</strong></p><h1 id="Q：Redis-的几种数据结构"><a href="#Q：Redis-的几种数据结构" class="headerlink" title="Q：Redis 的几种数据结构"></a>Q：Redis 的几种数据结构</h1><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/image-20210706164818950.png" alt="image-20210706164818950" style="zoom:25%;" /><p>大类型下对应多种实现转换规则是基于一个key的数据大小和元素个数，配置文件中可配。</p><h1 id="Q：为什么说-Redis-单线程这么快"><a href="#Q：为什么说-Redis-单线程这么快" class="headerlink" title="Q：为什么说 Redis 单线程这么快"></a>Q：为什么说 Redis 单线程这么快</h1><p>我们通常说，Redis 是单线程，主要是指 Redis 的网络 IO 和键值对读写是由一个线程来完成的，这也是 Redis 对外提供键值存储服务的主要流程。但 Redis 的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执行的。</p><p>多线程的坏处：</p><ol start="0"><li><p>为了保证共享资源的正确性，就需要有额外的机制进行保证，而这个额外的机制，就会带来额外的开销。</p></li><li><p>并发访问控制也是难点，降低系统代码的易调试性和可维护性</p></li></ol><p>单线程快的原因：</p><ol start="0"><li>高效的数据结构（哈希表、跳表）</li><li>多路复用机制</li></ol><h2 id="什么是多路复用机制？"><a href="#什么是多路复用机制？" class="headerlink" title="什么是多路复用机制？"></a>什么是多路复用机制？</h2><p>基本 IO 模型与阻塞点：以 Get 请求为例，为了处理一个 Get 请求，需要监听客户端请求（bind&#x2F;listen），和客户端建立连接（accept），从 socket 中读取请求（recv），解析客户端发送请求（parse），根据请求类型读取键值数据（get），最后给客户端返回结果，即向 socket 中写回数据（send）。</p><p>但是，在这里的网络 IO 操作中，有潜在的阻塞点，分别是 accept() 和 recv()。当 Redis 监听到一个客户端有连接请求，但一直未能成功建立起连接时，会阻塞在 accept() 函数这里，导致其他客户端无法和 Redis 建立连接。类似的，当 Redis 通过 recv() 从一个客户端读取数据时，如果数据一直没有到达，Redis 也会一直阻塞在 recv()。</p><p>这就导致 Redis 整个线程阻塞，无法处理其他客户端请求，效率很低。不过，幸运的是，socket 网络模型本身支持<strong>非阻塞模式</strong>。</p><p>针对监听套接字，我们可以设置非阻塞模式：当 Redis 调用 accept() 但一直未有连接请求到达时，Redis 线程可以返回处理其他操作，而不用一直等待。但是，你要注意的是，调用 accept() 时，已经存在监听套接字了。</p><p>Linux 中的 IO 多路复用机制是指一个线程处理多个 IO 流，就是我们经常听到的 select&#x2F;epoll 机制。简单来说，在 Redis 只运行单线程的情况下，该机制允许内核中，同时存在多个监听套接字和已连接套接字。内核会一直监听这些套接字上的连接请求或数据请求。一旦有请求到达，就会交给 Redis 线程处理，这就实现了一个 Redis 线程处理多个 IO 流的效果。</p><p>也就是说，不会阻塞在某一个特定的客户端请求处理上。正因为此，Redis 可以同时和多个客户端连接并处理请求，从而提升并发性。</p><p>现在，我们知道了，Redis 单线程是指它对网络 IO 和数据读写的操作采用了一个线程，而采用单线程的一个核心原因是避免多线程开发的并发控制问题。单线程的 Redis 也能获得高性能，跟多路复用的 IO 模型密切相关，因为这避免了 accept() 和 send()&#x2F;recv() 潜在的网络 IO 操作阻塞点。</p><h1 id="Q：AOF"><a href="#Q：AOF" class="headerlink" title="Q：AOF"></a>Q：AOF</h1><p>AOF 写日志是主线程发起，在命令执行后才记录日志，所以不会阻塞当前的写操作。</p><p>其次，AOF 虽然避免了对当前命令的阻塞，但可能会给下一个操作带来阻塞风险。这是因为，AOF 日志也是在主线程中执行的，如果在把日志文件写入磁盘时，磁盘写压力大，就会导致写盘很慢，进而导致后续的操作也无法执行了。</p><h2 id="三种写回策略"><a href="#三种写回策略" class="headerlink" title="三种写回策略"></a>三种写回策略</h2><p>也就是 AOF 配置项 appendfsync 的三个可选值。</p><ul><li>Always，同步写回：每个写命令执行完，立马同步地将日志写回磁盘；</li><li>Everysec，每秒写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘；</li><li>No，操作系统控制的写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘。</li></ul><p>我们一定要小心 AOF 文件过大带来的性能问题。如何解决？利用 AOF 重写机制</p><p>重写机制具有“多变一”功能。所谓的“多变一”，也就是说，旧日志文件中的多条命令，在重写后的新日志中变成了一条命令。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-1054c824c2aab81296cfa052ae13fe89884f9b3f.jpg" alt="img" style="zoom:15%;" /><h2 id="AOF-重写会阻塞吗？"><a href="#AOF-重写会阻塞吗？" class="headerlink" title="AOF 重写会阻塞吗？"></a>AOF 重写会阻塞吗？</h2><p><strong>和 AOF 日志由主线程写回不同</strong>，重写过程是由后台子进程 bgrewriteaof 来完成的，这也是为了避免阻塞主线程，导致数据库性能下降。</p><p>我把重写的过程总结为“一个拷贝，两处日志”。</p><p>“一个拷贝”就是指，每次执行重写时，主线程 fork 出后台的 bgrewriteaof 子进程。此时，fork 会把主线程的内存拷贝一份给 bgrewriteaof 子进程，这里面就包含了数据库的最新数据。然后，bgrewriteaof 子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志。</p><p>“两处日志”又是什么呢？</p><p>因为主线程未阻塞，仍然可以处理新来的操作。此时，如果有写操作，第一处日志就是指正在使用的 AOF 日志，Redis 会把这个操作写到它的缓冲区。这样一来，即使宕机了，这个 AOF 日志的操作仍然是齐全的，可以用于恢复。</p><p>而第二处日志，就是指新的 AOF 重写日志。这个操作也会被写到重写日志的缓冲区。这样，重写日志也不会丢失最新的操作。等到拷贝数据的所有操作记录重写完成后，重写日志记录的这些最新操作也会写入新的 AOF 文件，以保证数据库最新状态的记录。此时，我们就可以用新的 AOF 文件替代旧文件了。</p><p><strong>主线程 fork 子线程的一瞬间是会发生阻塞的</strong></p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-474b0b86db4987b658825492e6597c29ad491413.jpg" alt="img" style="zoom:15%;" /><h1 id="Q：RDB（Redis-DataBase）-快照"><a href="#Q：RDB（Redis-DataBase）-快照" class="headerlink" title="Q：RDB（Redis DataBase） 快照"></a>Q：RDB（Redis DataBase） 快照</h1><h2 id="RDB-重写会阻塞吗？如何做快照？"><a href="#RDB-重写会阻塞吗？如何做快照？" class="headerlink" title="RDB 重写会阻塞吗？如何做快照？"></a>RDB 重写会阻塞吗？如何做快照？</h2><p>Redis 提供了两个命令来生成 RDB 文件，分别是 save 和 bgsave。</p><ul><li>save：在主线程中执行，会导致阻塞；</li><li>bgsave：创建一个子进程，专门用于写入 RDB 文件，避免了主线程的阻塞，这也是 Redis RDB 文件生成的默认配置。</li></ul><p>简单来说，bgsave 子进程是由主线程 fork 生成的，可以共享主线程的所有内存数据。</p><p>bgsave 子进程运行后，开始读取主线程的内存数据，并把它们写入 RDB 文件。此时，如果主线程对这些数据也都是读操作（例如图中的键值对 A），那么，主线程和 bgsave 子进程相互不影响。但是，如果主线程要修改一块数据（例如图中的键值对 C），那么，这块数据就会被复制一份，生成该数据的副本（键值对 C’）。然后，主线程在这个数据副本上进行修改。同时，bgsave 子进程可以继续把原来的数据（键值对 C）写入 RDB 文件。</p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-4b408b5ab30079ee483dc79c763200d352f3ee60.jpg" alt="img" style="zoom:5%;" /><blockquote><p>这里对数据的快照，我觉得很妙。</p><p>当存在在「快照备份的过程」中（T 时刻），如果是读操作无所谓，写操作的话，需要先将该数据复制一份副本，然后主线程在该副本上进行修改，这样子线程存储的数据则是「老」的数据，这样的话，在「快照备份的过程中」能保证快照的数据都是 T 时刻的数据了，无论该过程结束的时间是 T + N 秒。</p></blockquote><h2 id="多久做快照？"><a href="#多久做快照？" class="headerlink" title="多久做快照？"></a>多久做快照？</h2><p>虽然 bgsave 执行时不阻塞主线程，但是，如果频繁地执行全量快照，也会带来两方面的开销。</p><p>一方面，频繁将全量数据写入磁盘，会给磁盘带来很大压力，多个快照竞争有限的磁盘带宽，前一个快照还没有做完，后一个又开始做了，容易造成恶性循环。</p><p>另一方面，bgsave 子进程需要通过 fork 操作从主线程创建出来。虽然，子进程在创建后不会再阻塞主线程，但是，fork 这个创建过程本身会阻塞主线程，而且主线程的内存越大，阻塞时间越长。如果频繁 fork 出 bgsave 子进程，这就会频繁阻塞主线程了（所以，在 Redis 中如果有一个 bgsave 在运行，就不会再启动第二个 bgsave 子进程）</p><blockquote><p>原文中「所以，在 Redis 中如果有一个 bgsave 在运行，就不会再启动第二个 bgsave 子进程」指的是 Redis 实际的机制，并不会出现多个 bgsave 子进程来用于快照。</p></blockquote><p>优化</p><p>Redis 4.0 中提出了一个混合使用 AOF 日志和内存快照的方法。简单来说，内存快照以一定的频率执行，在两次快照之间，使用 AOF 日志记录这期间的所有命令操作。混</p><p>合使用 RDB 和 AOF，正好可以取两者之长，避两者之短，以较小的性能开销保证数据可靠性和性能。</p><h2 id="关于混合使用个人感想"><a href="#关于混合使用个人感想" class="headerlink" title="关于混合使用个人感想"></a>关于混合使用个人感想</h2><blockquote><p>By Matthew Han</p></blockquote><p>关于 AOF 和 RDB，AOF 有点像一个软件的小版本升级，version 1.1 &#x3D;&#x3D;&gt; version 1.2，可能只有几条数据的更新，此时采用 AOF 进行数据更新比较好，但是到了一个大的版本，比如 version 3.8，此时最好重新下一个最新版本的客户端了，所以对于 Redis 来说利用 RDB 比较好。</p><p>很多人要说了，诶？AOF 不是会重写操作记录实现 All In One 吗？那这样理解的话，无论数据怎么更新、增加、删除， AOF 的操作都应该比 RDB 这种全量的少啊？我看评论区 Kaito 的发言：</p><blockquote><p>RDB 文件内容是经过压缩的二进制数据（不同数据类型数据做了针对性优化），文件很小。</p></blockquote><p>觉得应该是如果一段时间后数据几乎全改了，此时的 AOF 文件一定是比 RDB 大的，恢复速度肯定也比不上 RDB。而且删除操作多的话，RDB 更占优势，AOF 应该会记录删除的操作记录。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大容量数组随机读写的效率问题</title>
      <link href="/post/5311af30-da0d-11eb-a7d5-3f834b7c5511/"/>
      <url>/post/5311af30-da0d-11eb-a7d5-3f834b7c5511/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>昨天在刷 AcWing 每日一题的第 <a href="https://www.acwing.com/problem/content/description/3735/">3732</a> 题「矩阵复原」时，发现在大容量数组作为缓存时提交无限 TLE，但是该用 HashMap 就 ac 了。</p><p>在我浅薄的知识勺中，一直认为数组的下标作为 key 随机访问其下标的元素数据时是要快于一些集合的，HashMap 有着复杂的数据结构，底层也是数组、链表和红黑树，怎么样都不会比一维数组作为缓存来的快吧，但实际上在该背景下确实是 HashMap 的效率更高。</p><p>来看这段算法的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (k-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span>[][] mat1 = <span class="keyword">new</span> <span class="title class_">int</span>[n][m];</span><br><span class="line">            <span class="type">int</span>[][] mat2 = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">            <span class="comment">// int[] cache = new int[250001];</span></span><br><span class="line">            Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][m];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    mat1[i][j] = sc.nextInt();</span><br><span class="line">                    <span class="comment">// cache[mat1[i][j]] = j;</span></span><br><span class="line">                    map.put(mat1[i][j], j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    mat2[i][j] = sc.nextInt();</span><br><span class="line">                    <span class="comment">// res[j][cache[mat2[i][j]]] = mat2[i][j];</span></span><br><span class="line">                    res[j][map.get(mat2[i][j])] = mat2[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                sb.setLength(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    sb.append(res[i][j]).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(sb.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注释的地方是原先 TLE 的代码</strong>，只通过了大概 9 个 case（一共 11 个）。为什么会出现这样的情况呢？查阅了网上少量的资料和群友的解释大概是 CPU 高速缓存的命中问题，初始化需要分配的连续内存太大，造成CPU高速缓存整个缓存行失效，大大的降低了高速缓存的命中性。</p><p>可惜大学学的东西早忘完了，寻址算法都记不清了。这次正好也让我学习了在算法题中对于大数组的使用要谨慎，并非使用数组利用下标读写就是效率最高的。</p><h2 id="2021-7-2-更新"><a href="#2021-7-2-更新" class="headerlink" title="2021.7.2 更新"></a>2021.7.2 更新</h2><p>以上那段代码，我尝试在 HashMap 的初始化设定一个容量，就像这样：<code>Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(250000 * 4 / 3 + 1);</code> 发现这样果然超时了，感觉 TLE 的原因就在于初始化分配的大小。在数据量较小的 case 上，「一直扩容」是会比初始化过大的容量（250000）快的， TLE 应该是在一些数据量较小的 case 上。</p><p><code>Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(n * m * 4 / 3 + 1)</code> 这样写性能是最强的，用时最少。所以效率排名是这样的：</p><ol start="0"><li><code>Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(n * m * 4 / 3 + 1)</code> </li><li><code>Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;()</code> </li><li><code>int[] cache = new int[n * m + 1];</code></li><li><code>int[] cache = new int[250001];</code></li></ol><p>HashMap 居然比数组随机读写的速度还要快，泪目，HashMap 永远滴神！</p><h2 id="2021-7-6-更新"><a href="#2021-7-6-更新" class="headerlink" title="2021.7.6 更新"></a>2021.7.6 更新</h2><p>在复习《Redis核心技术与实战》这门课的时候，评论区的同学都非常厉害，老师抛出了一个问题：</p><blockquote><p>如果在数组上是随机访问，对CPU高速缓存还友好不？</p></blockquote><p>虽然是关于 Redis 的数据结构，但是其实本质和我们这道算法题碰到的问题类似，其中一个同学的解答非常好，我就直接在抄过来了</p><blockquote><p>@irats:</p><p>数组通过下标访问数据虽然是O(1)，但是由于cpu读取数据从高速缓存读，而高速缓存的容量很小。</p><p>比如cpu要读取nums[0]，cpu发现高速缓存没有nums[0]，就会从内存把num[0]以及nums[0]附近的数据(比如还拖取了nums[1])都拖取到高速缓存中。如果接下来cpu要读取nums[1]，由于nums[1]已经在告诉缓存中，那么cpu能马上拿到数据。但如果cpu想要读取nums[100]，显然高速缓存中没有这个数据，然后就又要到内存中把nums[100]和他附近的数据拖到高速缓存。假设高速缓存只能存两个数字。那么因为读取nums[100]，就会把原本在nums[0]的数据替换掉。如果接下来cpu又读nums[0]。。那么就又要从内存中获取。</p><p>也就是说，老师问的对cpu友好，说的并不是你理解的时间复杂度。而是对于这种从高速缓存读取数据的行为。顺便说一句，在《深入理解操作系统中》中把要读取的数据附近的数据一起拖到高速缓存的行为，叫空间局部性。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 第 243 场周赛</title>
      <link href="/post/7f7138a0-c736-11eb-a4ac-bd3aa37357c3/"/>
      <url>/post/7f7138a0-c736-11eb-a4ac-bd3aa37357c3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><ul><li><p>给你两个下标从 <code>0</code> 开始的整数数组 <code>servers</code> 和 <code>tasks</code> ，长度分别为 <code>n</code> 和 <code>m</code> 。<code>servers[i]</code> 是第 <code>i</code> 台服务器的<strong>权重</strong> ，而 <code>tasks[j] </code>是处理第 <code>j</code> 项任务<strong>所需要的时间</strong>（单位：秒）。</p></li><li><p>你正在运行一个仿真系统，在处理完所有任务后，该系统将会关闭。每台服务器只能同时处理一项任务。第 <code>0</code> 项任务在第 <code>0</code> 秒可以开始处理，相应地，第 <code>j</code> 项任务在第 <code>j</code> 秒可以开始处理。处理第 <code>j</code> 项任务时，你需要为它分配一台<strong>权重最小</strong>的空闲服务器。如果存在多台相同权重的空闲服务器，请选择<strong>下标最小</strong>的服务器。如果一台空闲服务器在第 <code>t</code> 秒分配到第 <code>j</code> 项任务，那么在 <code>t + tasks[j]</code> 时它将恢复空闲状态。</p></li><li><p>如果没有空闲服务器，则必须等待，直到出现一台空闲服务器，并<strong>尽可能早</strong>地处理剩余任务。 如果有多项任务等待分配，则按照<strong>下标递增</strong>的顺序完成分配。</p></li><li><p>如果同一时刻存在多台空闲服务器，可以同时将多项任务分别分配给它们。</p></li><li><p>构建长度为 <code>m</code> 的答案数组 <code>ans</code> ，其中 <code>ans[j]</code> 是第 <code>j</code> 项任务分配的服务器的下标。</p></li><li><p>返回答案数组 <code>ans</code> 。</p></li></ul><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><ul><li><code>servers.length == n</code></li><li><code>tasks.length == m</code></li><li><code>1 &lt;= n, m &lt;= 2 * 105</code></li><li><code>1 &lt;= servers[i], tasks[j] &lt;= 2 * 105</code></li></ul><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><ul><li><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：servers = [3,3,2], tasks = [1,2,3,2,1,2]</span><br><span class="line">输出：[2,2,0,2,1,2]</span><br><span class="line">解释：事件按时间顺序如下：</span><br><span class="line"></span><br><span class="line">0 秒时，第 0 项任务加入到任务队列，使用第 2 台服务器处理到 1 秒。</span><br><span class="line">1 秒时，第 2 台服务器空闲，第 1 项任务加入到任务队列，使用第 2 台服务器处理到 3 秒。</span><br><span class="line">2 秒时，第 2 项任务加入到任务队列，使用第 0 台服务器处理到 5 秒。</span><br><span class="line">3 秒时，第 2 台服务器空闲，第 3 项任务加入到任务队列，使用第 2 台服务器处理到 5 秒。</span><br><span class="line">4 秒时，第 4 项任务加入到任务队列，使用第 1 台服务器处理到 5 秒。</span><br><span class="line">5 秒时，所有服务器都空闲，第 5 项任务加入到任务队列，使用第 2 台服务器处理到 7 秒。</span><br></pre></td></tr></table></figure></li><li><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]</span><br><span class="line">输出：[1,4,1,4,1,3,2]</span><br><span class="line">解释：事件按时间顺序如下：</span><br><span class="line"></span><br><span class="line">0 秒时，第 0 项任务加入到任务队列，使用第 1 台服务器处理到 2 秒。</span><br><span class="line">1 秒时，第 1 项任务加入到任务队列，使用第 4 台服务器处理到 2 秒。</span><br><span class="line">2 秒时，第 1 台和第 4 台服务器空闲，第 2 项任务加入到任务队列，使用第 1 台服务器处理到 4 秒。</span><br><span class="line">3 秒时，第 3 项任务加入到任务队列，使用第 4 台服务器处理到 7 秒。</span><br><span class="line">4 秒时，第 1 台服务器空闲，第 4 项任务加入到任务队列，使用第 1 台服务器处理到 9 秒。</span><br><span class="line">5 秒时，第 5 项任务加入到任务队列，使用第 3 台服务器处理到 7 秒。</span><br><span class="line">6 秒时，第 6 项任务加入到任务队列，使用第 2 台服务器处理到 7 秒。</span><br></pre></td></tr></table></figure></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>第 243 场周赛的第三题，虽然这场没参加（周赛基本都起不来），不过后来做了下还挺有趣，<code>TLE</code> 了一发，感觉很适合拿来面试的考察求职者的代码设计以及优化能力。主要考察堆排序、队列、多任务处理这些点。</p><blockquote><p>甚至我都快想要开多个线程来做了。</p></blockquote><p>这题可以直接模拟，模拟法需要注意的三个地方吧，不然会超时：</p><ol start="0"><li>注意存在某个时刻会出现多个任务可被执行</li><li>防止 TLE ：直接跳转到运行队列中的最先空闲下来的服务器时间节点</li><li>防止 TLE ：两个优先队列处理（运行态和就绪态）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] assignTasks(<span class="type">int</span>[] servers, <span class="type">int</span>[] tasks) &#123;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[tasks.length];</span><br><span class="line">        <span class="comment">// 运行态</span></span><br><span class="line">        <span class="comment">// 运行中的服务器, 之前这里是 Queue, 没有及时 break, 所以拉了</span></span><br><span class="line">        <span class="comment">// int[]: 长度为 2, 第 1 位是 serverId, 第 2 位是当前时间 + task 需要执行的时长</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; runtimeServerQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(o1[<span class="number">1</span>], o2[<span class="number">1</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 就绪态</span></span><br><span class="line">        <span class="comment">// 等待被分配的服务器</span></span><br><span class="line">        <span class="comment">// int[]: 长度为 2, 第 1 位是 serverId, 第 2 位是服务器权重</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pendingServerQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 先判权重升序, 权重一样, 则按照下标升序</span></span><br><span class="line">            <span class="keyword">if</span> (o1[<span class="number">1</span>] == o2[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1[<span class="number">0</span>], o2[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1[<span class="number">1</span>], o2[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 先将所有的服务器塞到等待队列中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; servers.length; i++) &#123;</span><br><span class="line">            pendingServerQueue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, servers[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每秒需要被执行的任务</span></span><br><span class="line">        Queue&lt;Integer&gt; taskQueue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> t : tasks) &#123;</span><br><span class="line">            taskQueue.offer(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sec</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">trueSec</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!taskQueue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">            <span class="comment">// step0. 先处理在运行的 serverQueue</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> runtimeServerQueue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">                <span class="type">int</span>[] task = runtimeServerQueue.poll();</span><br><span class="line">                <span class="comment">// 根据当前和当前储存的预期完成时间比较, 一致则说明任务完成</span></span><br><span class="line">                <span class="keyword">if</span> (task[<span class="number">1</span>] == trueSec) &#123;</span><br><span class="line">                    <span class="comment">// 加入到等待队列</span></span><br><span class="line">                    pendingServerQueue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;task[<span class="number">0</span>], servers[task[<span class="number">0</span>]]&#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// b: 运行中的服务器中最先会空闲的预期时间</span></span><br><span class="line">                    b = Math.min(b, task[<span class="number">1</span>]);</span><br><span class="line">                    runtimeServerQueue.offer(task);</span><br><span class="line">                    <span class="comment">// 因为是优先队列, 一旦 else 了, Queue 后面服务器都不可能是这个时间节点完成</span></span><br><span class="line">                    <span class="comment">// 所以这里可以 break, 不然会 TLE</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// step1. 选择 空闲 / 权重最小 / 下标最小 的服务器</span></span><br><span class="line">            <span class="comment">// 存在空闲服务器</span></span><br><span class="line">            <span class="keyword">if</span> (!pendingServerQueue.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// 因为可能轮转了很多轮, 所以 taskQueue 里面的很多任务都可以在当前时间执行了(可能会有多个任务可执行)</span></span><br><span class="line">                <span class="keyword">while</span> (sec &lt; trueSec &amp;&amp; !taskQueue.isEmpty() &amp;&amp; !pendingServerQueue.isEmpty()) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">task</span> <span class="operator">=</span> taskQueue.poll();</span><br><span class="line">                    <span class="type">int</span>[] runnableServer = pendingServerQueue.poll();</span><br><span class="line">                    ans[sec++] = runnableServer[<span class="number">0</span>];</span><br><span class="line">                    <span class="comment">// 将 空闲的服务器 加入到 运行的服务器队列 中</span></span><br><span class="line">                    runtimeServerQueue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;runnableServer[<span class="number">0</span>], trueSec + task&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                trueSec++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 防止 TLE 关键, 跳转到 runtime 服务器最先空闲的时间节点</span></span><br><span class="line">                trueSec = b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 队列 </tag>
            
            <tag> 堆排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算算法题小技巧</title>
      <link href="/post/ec90b090-774b-11eb-ac09-a1bcb7588087/"/>
      <url>/post/ec90b090-774b-11eb-ac09-a1bcb7588087/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><p>位运算的效率就不说了，每次学会一些小技巧就忘了，还是基础不够扎实吧。。</p><ol><li>计算某个 <code>int</code> 值的第 <code>i</code> 位（二进制位）是什么，可以用 <code>num &gt;&gt; i;</code> 有符号右移，不要在用 <code>Integer</code> 的 API 了</li><li>0 与 1 的转换（仅存在 1 与 0），<code>num = 1 - num;</code></li><li>汉明码常用：<code>for (int i = 0; i &lt; 32; i++) &#123;&#125;</code> 懂得都懂</li><li>汉明码常用：多个数计算汉明码距离，只要找到 1 的个数和 0 的个数相乘即可</li><li><code>num1</code> 与 <code>num2</code> 不用缓存 tmp 的交换，<code>num1 ^= num2;</code> <code>num2 ^= num1;</code> <code>num1 ^= num2;</code> 但是要记住 <code>num1</code> 与 <code>num2</code> 不能相等，不然会直接等于 0</li><li>判断奇偶这个老是记不住，<code>(num &amp; 1 == 0);</code> 因为任何二进制位和 1 做 <code>&amp;</code> 运算都是本身，偶数的末尾是 0</li><li><code>x ^ y ^ x = y</code>，<code>x ^ 0 = x</code>这个经常多用用，前缀和、异或的题属于是考麻了！</li><li>后续再更…</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务与 Seata 初探</title>
      <link href="/post/2752cd30-3a98-11eb-b0c9-0b16b97a2613/"/>
      <url>/post/2752cd30-3a98-11eb-b0c9-0b16b97a2613/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><p>布式事务的实现有很多种，最具有代表性的是由<strong>Oracle Tuxedo</strong>系统提出的<strong>XA</strong>分布式事务协议。</p><p>XA协议包含<strong>两阶段提交</strong>（2PC）和<strong>三阶段提交</strong>（3PC）两种实现。</p><p>当然该协议主要是一种理论方式，具体落地有相应的组件（Seata等）或者代码中自行实现。</p><h2 id="二段式提交"><a href="#二段式提交" class="headerlink" title="二段式提交"></a>二段式提交</h2><p><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/NtO5sialJZGp2Ny2lbXKGqaNjy4cbhqofVRL815UNR3mnXpYf81U5Lv5WtNiamohdu792UPtCuHhNLkg7FGMvicFw/640?wx_fmt=png"></p><p>当队员收到就位确认提示后，如果已经就位，就选择“是”，如果还没就位，就选择“否”。</p><p><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/NtO5sialJZGp2Ny2lbXKGqaNjy4cbhqofqPopLXT6ALzBz6elibzNxT8XoQSaEgXdJjYuRbkKV65HtVDLFibeWvVw/640?wx_fmt=png"></p><p>相应的，在队长发起就位确认的时候，有可能某些队员还并没有就位。</p><p><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/NtO5sialJZGp2Ny2lbXKGqaNjy4cbhqofYaNSnxNnZfsXwxhdicfIrx0bD8BY5GiaVBqxphFcdsuJgrdPX1iaetuOg/640?wx_fmt=png"></p><p><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/NtO5sialJZGp2Ny2lbXKGqaNjy4cbhqofqxmWafL4tcIcMFcHhAcR1AX3QvS9Fw5JCC0dPTOYvtlUSJic4uibuZHg/640?wx_fmt=png"></p><p>那么XA协议究竟是什么样子呢？在XA协议中包含着两个角色：<strong>事务协调者</strong>和<strong>事务参与者</strong>。</p><h3 id="成功的流程"><a href="#成功的流程" class="headerlink" title="成功的流程"></a>成功的流程</h3><p>让我们来看一看他们之间的交互流程：</p><p>在XA分布式事务的第一阶段，作为事务协调者的节点会首先向所有的参与者节点发送Prepare请求。</p><p>在接到Prepare请求之后，每一个参与者节点会各自执行与事务有关的数据更新，写入Undo Log和Redo Log。如果参与者执行成功，暂时不提交事务，而是向事务协调节点返回“完成”消息。</p><p>当事务协调者接到了所有参与者的返回消息，整个分布式事务将会进入第二阶段。</p><p>在XA分布式事务的第二阶段，如果事务协调节点在之前所收到都是正向返回，那么它将会向所有事务参与者发出Commit请求。</p><p>接到Commit请求之后，事务参与者节点会各自进行本地的事务提交，并释放锁资源。当本地事务完成提交后，将会向事务协调者返回“完成”消息。</p><p>当事务协调者接收到所有事务参与者的“完成”反馈，整个分布式事务完成。</p><h3 id="失败的流程"><a href="#失败的流程" class="headerlink" title="失败的流程"></a>失败的流程</h3><p>在XA的第一阶段，如果某个事务参与者反馈失败消息，说明该节点的本地事务执行不成功，必须回滚。</p><p>于是在第二阶段，事务协调节点向所有的事务参与者发送Abort请求。接收到Abort请求之后，各个事务参与者节点需要在本地进行事务的回滚操作，回滚操作依照Undo Log来进行。</p><p>以上就是XA两阶段提交协议的详细过程。</p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>首先 2PC 是一个<strong>同步阻塞协议</strong>，像第一阶段协调者会等待所有参与者响应才会进行下一步操作，当然第一阶段的<strong>协调者有超时机制</strong>，假设因为网络原因没有收到某参与者的响应或某参与者挂了，那么超时后就会判断事务失败，向所有参与者发送回滚命令。</p><h3 id="二段式提交的不足"><a href="#二段式提交的不足" class="headerlink" title="二段式提交的不足"></a>二段式提交的不足</h3><ol><li><strong>性能问题</strong></li></ol><p>XA协议遵循强一致性。在事务执行过程中，各个节点占用着数据库资源，只有当所有节点准备完毕，事务协调者才会通知提交，参与者提交后释放资源。这样的过程有着非常明显的性能问题。</p><ol start="2"><li><strong>协调者单点故障问题</strong></li></ol><p>事务协调者是整个XA模型的核心，一旦事务协调者节点挂掉，参与者收不到提交或是回滚通知，参与者会一直处于中间状态无法完成事务。（参与者不具备超时机制）</p><ol start="3"><li><strong>丢失消息导致的不一致问题。</strong></li></ol><p>在XA协议的第二个阶段，如果发生局部网络问题，一部分事务参与者收到了提交消息，另一部分事务参与者没收到提交消息，那么就导致了节点之间数据的不一致。</p><h2 id="三段式提交"><a href="#三段式提交" class="headerlink" title="三段式提交"></a>三段式提交</h2><ol><li><strong>MQ事务</strong></li></ol><p>利用消息中间件来异步完成事务的后一半更新，实现系统的最终一致性。这个方式避免了像XA协议那样的性能问题。</p><ol start="2"><li><strong>XA三阶段提交</strong></li></ol><p>XA三阶段提交在两阶段提交的基础上增加了CanCommit阶段，并且引入了超时机制。一旦事物参与者迟迟没有接到协调者的commit请求，会自动进行本地commit。这样有效解决了协调者单点故障的问题。但是性能问题和不一致的问题仍然没有根本解决。</p><p><img src="https://pic3.zhimg.com/80/v2-885daf4ba34102d6e1047b0b67910652_1440w.jpg"></p><ol start="3"><li><strong>TCC事务</strong></li></ol><p>TCC事务是Try - Confirm - Cancel三种指令的缩写，其逻辑模式类似于XA两阶段提交，但是实现方式是在代码层面来人为实现。</p><p>其实从思想上看和 2PC 差不多，都是先试探性的执行，如果都可以那就真正的执行，如果不行就回滚。</p><p><strong>比如说一个事务要执行A、B、C三个操作，那么先对三个操作执行预留动作。如果都预留成功了那么就执行确认操作，如果有一个预留失败那就都执行撤销动作。</strong></p><p><img src="https://pic4.zhimg.com/80/v2-90179fa933c0a389ffa6ac04e244a58f_1440w.jpg"></p><p>TCC 对业务代码的侵入较大，开发量也比较大但是提供了较好的性能。</p><h4 id="XA-和-TCC-的区别"><a href="#XA-和-TCC-的区别" class="headerlink" title="XA 和 TCC 的区别"></a>XA 和 TCC 的区别</h4><p>XA 是一整个长事务，对数据库进行加锁，所以性能拉胯而且会有长事务风险。但是 TCC 是几个小事务（本地事务），最终一致性，不会出现长事务的锁风险，保证分布式性能。</p><p>在 Seata 中如需改造成 TCC 模式，需要加上核心注解<code>@LocalTCC</code>，并写三个接口，分别对应 Try - Confirm - Cancel，如<code>saveOrder()</code>、<code>commit()</code>、<code>rollbackTcc()</code>方法。代码量确实会大一些，并且后期维护加重。</p><h2 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h2><p>TC：seata 服务端</p><p>TM：<code>@GlobalTransactional</code>注解的方法，事务的发起方</p><p>RM：一个数据库就是 RM，事务的参与方</p><p>TM 开启分布式事务，TM 向 TC 注册全局事务记录</p><p>业务场景，编排数据库，服务等事务内资源，RM 向 TC 报备资源准备状态</p><p>TM 结束分布式事务，事务一阶段结束（TM 通知 TC 提交或回滚分布式事务）</p><p>TC 汇总事务信息，决定分布式事务是提交还是回滚</p><p>TC 通知所有 RM 提交或回滚资源，事务二阶段结束</p>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
            <tag> Seata </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构：字典树</title>
      <link href="/post/23cb19a0-2d3d-11eb-a175-c13ddf029711/"/>
      <url>/post/23cb19a0-2d3d-11eb-a175-c13ddf029711/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Trie (发音为 “try”) 或前缀树是一种树数据结构，用于检索字符串数据集中的键。这一高效的数据结构有多种应用：</p><ol><li><p><strong>自动补全</strong></p><blockquote><p>谷歌搜索建议</p></blockquote><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/trie/one.png" alt="谷歌的搜索建议" style="zoom: 67%;" /></li><li><p><strong>拼写检查</strong></p><blockquote><p>文字处理软件中的拼写检查</p></blockquote><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/trie/two.png" alt="文字处理软件中的拼写检查" style="zoom: 67%;" /></li><li><p><strong>IP 路由 (最长前缀匹配)</strong></p><blockquote><p>使用Trie树的最长前缀匹配算法，Internet 协议（IP）路由中利用转发表选择路径</p></blockquote><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/trie/three.gif" alt="使用Trie树的最长前缀匹配算法，Internet 协议（IP）路由中利用转发表选择路径" style="zoom: 50%;" /></li><li><p><strong>T9 (九宫格) 打字预测</strong></p><blockquote><p>T9（九宫格输入），在 20 世纪 90 年代常用于手机输入。</p></blockquote><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/trie/four.jpeg" alt="T9（九宫格输入），在 20 世纪 90 年代常用于手机输入" style="zoom:;" /></li><li><p><strong>单词游戏</strong></p><blockquote><p> Trie 树可通过剪枝搜索空间来高效解决 Boggle 单词游戏</p></blockquote><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/trie/five.png" alt="Trie 树可通过剪枝搜索空间来高效解决 Boggle 单词游戏" style="zoom: 25%;" /></li></ol><p>还有其他的数据结构，如平衡树和哈希表，使我们能够在字符串数据集中搜索单词。为什么我们还需要 Trie 树呢？尽管哈希表可以在 <em>O</em>(1) 时间内寻找键值，却无法高效的完成以下操作：</p><ul><li><p>找到具有同一前缀的全部键值。</p></li><li><p>按词典序枚举字符串的数据集。</p></li></ul><p>Trie 树优于哈希表的另一个理由是，随着哈希表大小增加，会出现大量的冲突，时间复杂度可能增加到 <em>O</em>(<em>n</em>)，其中 <em>n</em> 是插入的键的数量。与哈希表相比，Trie 树在存储多个具有相同前缀的键时可以使用较少的空间。此时 Trie 树只需要 <em>O</em>(<em>m</em>)  的时间复杂度，其中 <em>m</em> 为键长。而在平衡树中查找键值需要<em>O</em>(<em>m</em>log<em>n</em>)  时间复杂度。</p><h2 id="数据结构图"><a href="#数据结构图" class="headerlink" title="数据结构图"></a>数据结构图</h2><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/trie/six.png" alt="数据结构图"></p><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>实现一个 Trie (前缀树)，包含 <code>insert</code>, <code>search</code>, 和 <code>startsWith</code> 这三个操作。</p><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><ul><li>你可以假设所有的输入都是由小写字母 <code>a-z</code> 构成的。</li><li>保证所有输入均为非空字符串。</li></ul><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Trie trie = new Trie();</span><br><span class="line"></span><br><span class="line">trie.insert(&quot;apple&quot;);</span><br><span class="line">trie.search(&quot;apple&quot;);   // 返回 true</span><br><span class="line">trie.search(&quot;app&quot;);     // 返回 false</span><br><span class="line">trie.startsWith(&quot;app&quot;); // 返回 true</span><br><span class="line">trie.insert(&quot;app&quot;);   </span><br><span class="line">trie.search(&quot;app&quot;);     // 返回 true</span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>利用前缀树就能很好的解决这一题 <a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree">#208 实现 Trie (前缀树)</a>。</p><p>首先构建一个前缀树的数据结构模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TireTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isEnd;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TireTree[] data;</span><br><span class="line">    <span class="keyword">private</span> Character ele;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">CAPACITY</span> <span class="operator">=</span> <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TireTree</span><span class="params">(<span class="type">char</span> ele)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ele = ele;</span><br><span class="line">        <span class="built_in">this</span>.data = <span class="keyword">new</span> <span class="title class_">TireTree</span>[CAPACITY];</span><br><span class="line">        <span class="built_in">this</span>.isEnd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TireTree&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;isEnd=&quot;</span> + isEnd +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + Arrays.toString(data) +</span><br><span class="line">                <span class="string">&quot;, ele=&quot;</span> + ele +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然还可以扩展出<code>set</code>、<code>get</code>方法以供方便调用。</p><p>继续完善解决该题，难点在于<code>insert</code>方法，当插入某串字符串的子串时，需要将末尾节点的<code>isEnd</code>标记为置<code>true</code>；如果出现新的字符，需要插入一个新的节点。<code>search</code>方法只要递归判断末尾节点标记位是否为<code>true</code>即可，而<code>startsWith</code>只要递归判断<code>prefix</code>能否在该树下走完。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImplementTriePrefixTreeII</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TireTree</span> &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> isEnd;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TireTree[] data;</span><br><span class="line">        <span class="keyword">private</span> Character ele;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CAPACITY</span> <span class="operator">=</span> <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TireTree</span><span class="params">(<span class="type">char</span> ele)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.ele = ele;</span><br><span class="line">            data = <span class="keyword">new</span> <span class="title class_">TireTree</span>[CAPACITY];</span><br><span class="line">            isEnd = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;TireTree&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;isEnd=&quot;</span> + isEnd +</span><br><span class="line">                    <span class="string">&quot;, data=&quot;</span> + Arrays.toString(data) +</span><br><span class="line">                    <span class="string">&quot;, ele=&quot;</span> + ele +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TireTree tireTree;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * #208 实现 Trie (前缀树)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 执行用时： 37 ms , 在所有 Java 提交中击败了 99.72% 的用户</span></span><br><span class="line"><span class="comment">     * 内存消耗： 48.6 MB , 在所有 Java 提交中击败了 55.22% 的用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImplementTriePrefixTreeII</span><span class="params">()</span> &#123;</span><br><span class="line">        tireTree = <span class="keyword">new</span> <span class="title class_">TireTree</span>(<span class="string">&#x27;$&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(TireTree tireTree, String target, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= target.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> <span class="variable">curr</span> <span class="operator">=</span> target.charAt(index);</span><br><span class="line">        <span class="type">TireTree</span> <span class="variable">currTree</span> <span class="operator">=</span> tireTree.data[curr - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (currTree == <span class="literal">null</span>) &#123;</span><br><span class="line">            tireTree.data[curr - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="title class_">TireTree</span>(curr);</span><br><span class="line">            currTree = tireTree.data[curr - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            currTree.ele = curr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currTree.ele == curr &amp;&amp; index == target.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            currTree.isEnd = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        insert(currTree, target, index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复合查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tireTree</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isPrefix 是否是前缀查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(TireTree tireTree, String target, <span class="type">int</span> index, <span class="type">boolean</span> isPrefix)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">curr</span> <span class="operator">=</span> target.charAt(index);</span><br><span class="line">        <span class="type">TireTree</span> <span class="variable">currTree</span> <span class="operator">=</span> tireTree.data[curr - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (currTree == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (currTree.ele == curr) &#123;</span><br><span class="line">                <span class="keyword">if</span> (index == target.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> isPrefix || currTree.isEnd;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> search(currTree, target, index + <span class="number">1</span>, isPrefix);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts a word into the trie.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">TireTree</span> <span class="variable">tmp</span> <span class="operator">=</span> tireTree;</span><br><span class="line">        insert(tmp, word, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns if the word is in the trie.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">TireTree</span> <span class="variable">tmp</span> <span class="operator">=</span> tireTree;</span><br><span class="line">        <span class="keyword">return</span> search(tmp, word, <span class="number">0</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">TireTree</span> <span class="variable">tmp</span> <span class="operator">=</span> tireTree;</span><br><span class="line">        <span class="keyword">return</span> search(tmp, prefix, <span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 字典树 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>走进JVM之内存布局</title>
      <link href="/post/5a0667d0-fd7d-11ea-ad87-11fe3cadc827/"/>
      <url>/post/5a0667d0-fd7d-11ea-ad87-11fe3cadc827/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>本系列目录</strong>：</p><ul><li><a href="https://www.yuanmo.xyz/post/0bdf0b10-c25b-11e9-9d06-1f20e5bd3f76/">《码出高效》系列笔记（一）：面向对象中的类</a></li><li><a href="https://www.yuanmo.xyz/post/b1acf8e0-c89b-11e9-9ee1-01379c6f9115/">《码出高效》系列笔记（一）：面向对象中的方法</a></li><li><a href="https://www.yuanmo.xyz/post/3239f2f0-c89d-11e9-89c4-bd64deffb20f/">《码出高效》系列笔记（一）：面向对象中的其他知识点</a></li><li><a href="https://www.yuanmo.xyz/post/d5aea070-d2ac-11e9-ab1f-f97e9fd39695/">《码出高效》系列笔记（二）：代码风格</a></li><li><a href="https://www.yuanmo.xyz/post/43892940-eb34-11e9-8e01-011debd967415/">《码出高效》系列笔记（三）：异常与日志</a></li><li><a href="https://www.yuanmo.xyz/post/025b9630-626f-11ea-8f75-554d885c423a/">《码出高效》系列笔记（四）：数据结构与集合的框架</a></li><li><a href="https://www.yuanmo.xyz/post/d6e37130-64cb-11ea-a19c-b3eaacf8ea9d/">《码出高效》系列笔记（四）：数据结构与集合的数组和泛型</a></li><li><a href="https://www.yuanmo.xyz/post/31c8add0-69af-11ea-ad58-59a2dd622848/">《码出高效》系列笔记（四）：元素的比较</a></li><li><a href="https://www.yuanmo.xyz/post/5a0667d0-fd7d-11ea-ad87-11fe3cadc827/">走进JVM之内存布局</a></li><li><a href="https://www.yuanmo.xyz/post/132bab40-fcc4-11ea-ab6f-7dc412045e4d/">走进JVM之字节码与类加载</a></li><li><a href="https://www.yuanmo.xyz/post/bd0fa690-fcae-11ea-897f-29deed537cb3/">走进JVM之GC</a></li></ul><h1 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h1><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/easy%20coding/jvm-memory.png" alt="JVM内存布局"></p><h2 id="1-堆（Heap）"><a href="#1-堆（Heap）" class="headerlink" title="1.堆（Heap）"></a>1.堆（Heap）</h2><p>存储着所有实例对象，GC的相关详见<a href="https://www.yuanmo.xyz/post/bd0fa690-fcae-11ea-897f-29deed537cb3/">上一篇</a></p><h2 id="2-元空间（Metaspace）"><a href="#2-元空间（Metaspace）" class="headerlink" title="2.元空间（Metaspace）"></a>2.元空间（Metaspace）</h2><p>永久代和元空间都是对方法区的一个实现，方法区是一块所有线程共享的内存区域。Java7及之前为永久代（Perm），之后均为元空间，所以类元信息、字段、静态属性、方法、常量等都移动至元空间。</p><p>区别于永久代，元空间在本地内存中分配。</p><h2 id="3-虚拟机栈（JVM-Stack）"><a href="#3-虚拟机栈（JVM-Stack）" class="headerlink" title="3.虚拟机栈（JVM Stack）"></a>3.虚拟机栈（JVM Stack）</h2><p>JVM中的虚拟机栈是描述Java方法执行的内存区域，他是线程私有的。栈中的元素用于支持虚拟机方法调用，每个方法从开始调用到执行完成的过程，就是栈帧从入栈到出栈的过程。</p><blockquote><p>通过递归调用可以更好地理解方法的调用，尤其是二叉树的中序遍历，逐级返回有点类似JVM类加载机制的双亲委派模型</p></blockquote><h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h3><p>存放方法参数和局部变量的区域</p><ul><li>操作数栈</li><li>局部变量表</li><li>常量池引用</li></ul><h3 id="操作栈"><a href="#操作栈" class="headerlink" title="操作栈"></a>操作栈</h3><p>操作站是一个初始状态为空的桶式结构栈。在方法执行的过程中，会有各种指令往栈中写入和提取信息。</p><h3 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h3><p>每个栈帧包含一个常量池中对当前方法的引用，目的是支持方法调用过程的动态链接。</p><h3 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h3><ol><li>正常退出，一些关键字<code>return</code>等</li><li>异常退出</li></ol><p>只要是退出都会返回到方法被调用的位置。方法退出的过程相当于弹出当前栈帧。</p><ol><li>返回值压入上层调用栈帧</li><li>异常信息抛给能够处理的栈帧</li><li>PC计数器指向方法调用后的下一条指令</li></ol><h2 id="4-本地方法栈（Native-Method-Stacks）"><a href="#4-本地方法栈（Native-Method-Stacks）" class="headerlink" title="4.本地方法栈（Native Method Stacks）"></a>4.本地方法栈（Native Method Stacks）</h2><p>线程对象私有，虚拟机栈主内，本地方法栈主外。</p><p>线程调用本地方法的时候，会进入一个不再受JVM约束的世界，优点：极高的执行效率、偏底层的跨进程操作；缺点：威胁程序运行的稳定性。</p><p>JNI最著名的本地方法：<code>System.currentTImeMillis()</code>。</p><h2 id="5-程序计数寄存器（Program-Counter-Register）"><a href="#5-程序计数寄存器（Program-Counter-Register）" class="headerlink" title="5.程序计数寄存器（Program Counter Register）"></a>5.程序计数寄存器（Program Counter Register）</h2><p>略</p><h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6.小结"></a>6.小结</h2><p>从线程共享的角度来看，堆（Heap）和元空间（Metaspace）是线程共享的，其他都是线程内部私有的。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/easy%20coding/jvm-mem2.png" alt="JVM内存布局"></p>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Java </tag>
            
            <tag> 内存布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>走进JVM之字节码与类加载</title>
      <link href="/post/132bab40-fcc4-11ea-ab6f-7dc412045e4d/"/>
      <url>/post/132bab40-fcc4-11ea-ab6f-7dc412045e4d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>本系列目录</strong>：</p><ul><li><a href="https://www.yuanmo.xyz/post/0bdf0b10-c25b-11e9-9d06-1f20e5bd3f76/">《码出高效》系列笔记（一）：面向对象中的类</a></li><li><a href="https://www.yuanmo.xyz/post/b1acf8e0-c89b-11e9-9ee1-01379c6f9115/">《码出高效》系列笔记（一）：面向对象中的方法</a></li><li><a href="https://www.yuanmo.xyz/post/3239f2f0-c89d-11e9-89c4-bd64deffb20f/">《码出高效》系列笔记（一）：面向对象中的其他知识点</a></li><li><a href="https://www.yuanmo.xyz/post/d5aea070-d2ac-11e9-ab1f-f97e9fd39695/">《码出高效》系列笔记（二）：代码风格</a></li><li><a href="https://www.yuanmo.xyz/post/43892940-eb34-11e9-8e01-011debd967415/">《码出高效》系列笔记（三）：异常与日志</a></li><li><a href="https://www.yuanmo.xyz/post/025b9630-626f-11ea-8f75-554d885c423a/">《码出高效》系列笔记（四）：数据结构与集合的框架</a></li><li><a href="https://www.yuanmo.xyz/post/d6e37130-64cb-11ea-a19c-b3eaacf8ea9d/">《码出高效》系列笔记（四）：数据结构与集合的数组和泛型</a></li><li><a href="https://www.yuanmo.xyz/post/31c8add0-69af-11ea-ad58-59a2dd622848/">《码出高效》系列笔记（四）：元素的比较</a></li><li><a href="https://www.yuanmo.xyz/post/5a0667d0-fd7d-11ea-ad87-11fe3cadc827/">走进JVM之内存布局</a></li><li><a href="https://www.yuanmo.xyz/post/132bab40-fcc4-11ea-ab6f-7dc412045e4d/">走进JVM之字节码与类加载</a></li><li><a href="https://www.yuanmo.xyz/post/bd0fa690-fcae-11ea-897f-29deed537cb3/">走进JVM之GC</a></li></ul><h1 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h1><p>JVM主流还是HotSpot，是OpenJDK最主流的一种。</p><p>跨平台需要一个中间层，那就是字节码（ByteCode），JVM会将字节码编译执行，热点代码还会通过JIT动态编译成机器码提高效率。</p><p>一个Java类文件，用十六进制表示二进制流。其中，起始的4个直接非常特殊：cafe babe。是Gosling定义的一个魔法数，标志该文件是一个Java类文件。</p><p>JVM在字节码上设计一套操作码助记符，用特殊的单词来标记。</p><p>一个<code>.java</code>文件转换成字节码甚至是机器码文件需要以下几步：</p><p><code>Java</code> &#x3D;&#x3D;&gt; <code>词法解析</code> &#x3D; token流 &#x3D;&gt; <code>语法解析</code> &#x3D;&#x3D;&gt; <code>语义分析</code> &#x3D;&#x3D;&gt; <code>生成字节码</code> &#x3D;&#x3D;&gt; <code>字节码</code></p><p>其中，语法解析的目的是组装成一颗语法树，再通过<code>语义分析</code>阶段检查类型、关键字、作用域是否合规。</p><p>字节码必须通过<strong>类加载过程</strong>加载到JVM环境后才可以执行。执行有3种模式</p><ul><li>解释执行</li><li>JIT编译执行</li><li>JIT编译执行与解释混合执行</li></ul><p>主流的JVM就是混合执行，在控制台输入<code>java -version</code>也可以看到<code>mixed mode</code>的字样，表示是混合执行。</p><h1 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h1><p>类是在运行期间第一次使用时动态加载的，而不是一次性加载所有类。因为如果一次性加载，那么会占用很多的内存。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>主要分成<strong>三大步</strong>：</p><ol><li><p>加载</p><p>只是类加载的第一个阶段，不要和类加载混淆。主要干三件事情：</p><ul><li>通过类的完全限定名称获取定义该类的二进制字节流。</li><li>将该字节流表示的静态存储结构转换为方法区的运行时存储结构。</li><li>在内存中生成一个代表该类的 Class 对象，作为方法区中该类各种数据的访问入口。</li></ul></li><li><p>链接（验证、准备、解析）</p></li><li><p>初始化</p><p>分为主动引用和被动应用。</p><ul><li><p>主动引用：</p><p><code>new</code>关键字、<code>main</code>类等</p></li><li><p>被动引用：</p><p>静态字段、常量、<code>SuperClass[] sca = new SuperClass[10];</code>这样一个数组的初始化。</p><p>通过数组定义来引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自 Object 的子类，其中包含了数组的属性和方法。</p></li></ul></li></ol><p>初始化的过程：读取字节码的二进制数据到内存中，在JVM的方法区内，然后利用字节码文件创建一个Class对象作用在堆区。</p><p>所以说类加载是一个将.class字节码文件实例化成Class对象并进行相关初始化的过程。</p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>双亲委派模型，或者叫「溯源委派加载模型」更合适。因为类加载器类似原始部落，存在权利等级制度，最高的一层是BootStrap。</p><p>低层次的当前类加载器，不能覆盖更高层的加载器加载的类。<strong>所以低层的加载器想要加载某个类时，需要向上逐级询问</strong>：该类加载了吗？高一级的父加载器往往都是懒狗，收到下级的请求会转发该请求给自身的上级。</p><p><strong>所以一次询问一定会传递到BootStrap ClassLoader</strong>。加载不到时，才会逐级向下尝试加载。如果父类都加载不了，就会允许当前类加载器加载，不然肯定是优先父类加载器加载。</p><p>所以是按需加载。</p><p>父子关系是通过组合关系实现，非继承关系。</p><p><strong>这个模型的好处：</strong></p><ol><li>避免重复加载</li><li>安全性问题，防止核心的加载器已加载的类被「覆盖、篡改」</li></ol><p><strong>例子：</strong></p><p>​比如在自己开发的环境中，不要定义和核心API同名的包名。</p><h3 id="1-根加载器（Bootstrap）"><a href="#1-根加载器（Bootstrap）" class="headerlink" title="1.根加载器（Bootstrap）"></a>1.根加载器（Bootstrap）</h3><p>最底层的加载器，由C++实现，没有父加载器所以没有继承<code>java.lang.ClassLoader</code>，负责将存放在<code>&lt;JRE_HOME&gt;\lib</code>目录中的，或者被 <code>-Xbootclasspath</code>参数所指定的路径中的。</p><p>负责装载最核心的类：Object、System、String等。</p><p>根类加载器加载的类，打印他的<code>Classloader</code>只会是null，因为不是在JVM体系内。</p><p>例如：<code>System.out.println(Object.class.getClassLoader());</code></p><h3 id="2-扩展类加载器（Platform）"><a href="#2-扩展类加载器（Platform）" class="headerlink" title="2.扩展类加载器（Platform）"></a>2.扩展类加载器（Platform）</h3><p>纯Java语言编写。用于加载一些扩展的系统类（也就是安全性和重要性比上者稍差一点），比如：XML、加密、压缩。</p><p>这个类加载器是由 ExtClassLoader（sun.misc.Launcher$ExtClassLoader）实现。它负责将<code>&lt;JAVA_HOME&gt;/lib/ext</code>或者被<code>java.ext.dir</code>系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。</p><p>Java9之前是ExtClass，之后是PlatformClass。</p><h3 id="3-应用类加载器（Application）"><a href="#3-应用类加载器（Application）" class="headerlink" title="3.应用类加载器（Application）"></a>3.应用类加载器（Application）</h3><p>这个类加载器是由 AppClassLoader（sun.misc.Launcher$AppClassLoader）实现的。</p><p>负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器。比如自己写的<code>TestFuck</code>类，该类就是被该加载器所加载。</p><h3 id="4-自定义加载器"><a href="#4-自定义加载器" class="headerlink" title="4.自定义加载器"></a>4.自定义加载器</h3><h4 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h4><p>该类和Class都位于<code>java.lang</code>这个包下，主要是对双亲委派模型的实现。</p><h5 id="loadClass方法"><a href="#loadClass方法" class="headerlink" title="loadClass方法"></a>loadClass方法</h5><blockquote><p>经典递归实现</p></blockquote><ol><li>先检查当前类是否已经在当前加载器加载了，如果没有，向上请求（上级也是这个模式）</li><li>直到父类加载器抛出ClassNotFoundException，此时尝试自己去加载。</li></ol><p>一般不覆写该方法，因为还是要遵循双亲委派模型的机制。</p><h5 id="findClass方法"><a href="#findClass方法" class="headerlink" title="findClass方法"></a>findClass方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码很简单，该方法需要覆写，因为上面说了，<strong>loadClass是递归父类加载器直到抛出该异常</strong>。那么需要覆写该方法实现自己的自定义的类。</p><h5 id="defineClass方法"><a href="#defineClass方法" class="headerlink" title="defineClass方法"></a>defineClass方法</h5><p>通常与<code>findClass</code>方法一起使用，在<code>findClass</code>里面调用该方法返回。</p><p>继承<code>ClassLoader</code>类，覆写<code>findClass</code>方法。</p><h5 id="什么时候需要自定义类加载器？"><a href="#什么时候需要自定义类加载器？" class="headerlink" title="什么时候需要自定义类加载器？"></a>什么时候需要自定义类加载器？</h5><ol><li>隔离加载类：中间件不同的jar包相互影响</li><li>修改类的加载方式</li><li>扩展加载源：网络层面、数据库、电视机顶盒也能加载</li><li>防止源码泄露</li></ol><h3 id="5-热部署"><a href="#5-热部署" class="headerlink" title="5.热部署"></a>5.热部署</h3><p>当我们的一个类已经被加载后，通过双亲委派模型，他并不会重新加载。但是我们在编译器中开发的时候可以选择热部署的方式。他又是怎么实现的呢？</p><p>双亲委派模型的核心在于<code>loadClass</code>方法，<strong>如果直接略过或者覆写该方法</strong>，就不会出现无限向上级请求加载的情况了（递归倒了，哭😢）。</p><p><strong>破坏双亲委派模型的2种方式：</strong></p><ol><li>不走<code>loadClass</code>方法</li><li>将上级类加载器下本应该（交给父加载器加载）加载的jar包删了，这样上级就会抛出异常，直到逐级返回下级加载「虚假的类」</li></ol><p>第二种方式有点嗯了。。</p><h4 id="6-线程上下文加载器"><a href="#6-线程上下文加载器" class="headerlink" title="6.线程上下文加载器"></a>6.线程上下文加载器</h4><p>我们根加载器属实位高权重，但是保不准它也有求于小弟的时候。比如<code>mysql-connect-java.jar</code>，每个计科学生都知道的经典数据库驱动。</p><p>在BootStrap加载器下有个<code>rt.jar</code>中有个类叫做<code>java.sql.DriverManager</code>，会去加载<code>Driver.class</code>，而该class是一个接口，并没有实现类，它的实现类在第三方的jar包中，也就是驱动中的类，相当于反向加载了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Void <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);</span><br></pre></td></tr></table></figure><blockquote><p>这里的Void是定义的一个类，不是void关键字。</p></blockquote><p>双亲委派模型可不允许反向加载，所以这里采用的是线程上下文加载器，该方式虽然也破坏了双亲委派模型，但是更为灵活。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line"><span class="keyword">return</span> ServiceLoader.load(service, cl);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Java </tag>
            
            <tag> 字节码 </tag>
            
            <tag> 类加载过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>走进JVM之GC</title>
      <link href="/post/bd0fa690-fcae-11ea-897f-29deed537cb3/"/>
      <url>/post/bd0fa690-fcae-11ea-897f-29deed537cb3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>本系列目录</strong>：</p><ul><li><a href="https://www.yuanmo.xyz/post/0bdf0b10-c25b-11e9-9d06-1f20e5bd3f76/">《码出高效》系列笔记（一）：面向对象中的类</a></li><li><a href="https://www.yuanmo.xyz/post/b1acf8e0-c89b-11e9-9ee1-01379c6f9115/">《码出高效》系列笔记（一）：面向对象中的方法</a></li><li><a href="https://www.yuanmo.xyz/post/3239f2f0-c89d-11e9-89c4-bd64deffb20f/">《码出高效》系列笔记（一）：面向对象中的其他知识点</a></li><li><a href="https://www.yuanmo.xyz/post/d5aea070-d2ac-11e9-ab1f-f97e9fd39695/">《码出高效》系列笔记（二）：代码风格</a></li><li><a href="https://www.yuanmo.xyz/post/43892940-eb34-11e9-8e01-011debd967415/">《码出高效》系列笔记（三）：异常与日志</a></li><li><a href="https://www.yuanmo.xyz/post/025b9630-626f-11ea-8f75-554d885c423a/">《码出高效》系列笔记（四）：数据结构与集合的框架</a></li><li><a href="https://www.yuanmo.xyz/post/d6e37130-64cb-11ea-a19c-b3eaacf8ea9d/">《码出高效》系列笔记（四）：数据结构与集合的数组和泛型</a></li><li><a href="https://www.yuanmo.xyz/post/31c8add0-69af-11ea-ad58-59a2dd622848/">《码出高效》系列笔记（四）：元素的比较</a></li><li><a href="https://www.yuanmo.xyz/post/5a0667d0-fd7d-11ea-ad87-11fe3cadc827/">走进JVM之内存布局</a></li><li><a href="https://www.yuanmo.xyz/post/132bab40-fcc4-11ea-ab6f-7dc412045e4d/">走进JVM之字节码与类加载</a></li><li><a href="https://www.yuanmo.xyz/post/bd0fa690-fcae-11ea-897f-29deed537cb3/">走进JVM之GC</a></li></ul><h1 id="GC知识点"><a href="#GC知识点" class="headerlink" title="GC知识点"></a>GC知识点</h1><p>主要分三个部分：</p><ol><li>如何判断该对象要回收（是垃圾）</li><li>回收的算法有哪些？</li><li>垃圾收集器</li></ol><h2 id="判断一个对象是否可以回收"><a href="#判断一个对象是否可以回收" class="headerlink" title="判断一个对象是否可以回收"></a>判断一个对象是否可以回收</h2><h3 id="1-引用计数法"><a href="#1-引用计数法" class="headerlink" title="1. 引用计数法"></a>1. 引用计数法</h3><blockquote><p>Python采用该种算法，但是解决了相互引用的问题</p></blockquote><p>为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。</p><p>在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。正是因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。</p><h3 id="2-GC-root（可达性算法）"><a href="#2-GC-root（可达性算法）" class="headerlink" title="2. GC root（可达性算法）"></a>2. GC root（可达性算法）</h3><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/83d909d2-3858-4fe1-8ff4-16471db0b180.png" alt="gc root"></p><p>从GCroot出发遍历，标记每个可访达的对象为活动对象，遍历不到的对象（Obj4）就会被接下来要讲的几种算法回收了。</p><p><strong>GC root可以是以下几种：</strong></p><ul><li>Java 方法栈桢中的局部变量；</li><li>已加载类的静态变量；</li><li>JNI handles；</li><li>已启动且未停止的 Java 线程。</li></ul><p><strong>多线程环境下，会产生误报和漏报。</strong></p><p>误报：A线程修改了访问，B线程会导致垃圾也被标记了，不会被清除，造成内存浪费。</p><p>漏报：将仍被应用的对象标记为垃圾。</p><p>误报和漏报的理解：误报大不了不回收嘛，漏报比较严重。垃圾回收是先标记活的对象，后回收死的对象，那么如果标记好后，其它线程产生了垃圾，即将活的变死了，这种内存是不会释放的。另外，如果这时产生了新对象，由于没被标记为活的，所以被释放了，这就危险了。</p><p><strong>Q：如何解决？（实际JVM虚拟机并不会出现这种情况）</strong></p><p><strong>A：Stop-the-world 以及安全点（安全词），垃圾回收线程工作时，其他非垃圾回收线程一律等待！</strong></p><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h3 id="1-标记-清除算法"><a href="#1-标记-清除算法" class="headerlink" title="1.标记 - 清除算法"></a>1.标记 - 清除算法</h3><p>利用GC root遍历到的标记（非垃圾），那么其余的就是垃圾了，<strong>直接把剩下的对象标记为空闲内存</strong>。</p><p>   <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/005b481b-502b-4e3f-985d-d043c2b330aa.png" alt="清除"></p><ul><li>优点：标记和清除的过程效率不高</li><li>缺点：产生大量不连续碎片，就无法给大内存的对象分配空间了</li></ul><h3 id="2-标记-整理算法（压缩算法）"><a href="#2-标记-整理算法（压缩算法）" class="headerlink" title="2.标记 - 整理算法（压缩算法）"></a>2.标记 - 整理算法（压缩算法）</h3><p>即把存活的对象聚集到内存区域的起始位置，从而留下一段连续的内存空间。</p><ul><li>优点：结果是很美好的，拥有了连续的内存空间，所以一般老年代使用该种算法，因为老年代的频率明显比新生代低很多。</li><li>缺点：性能拉胯，毕竟要移动。（让我想到了为么MySQL用b+树，而不用有序数组，因为数据量大的时候插入、删除、移动的效率太低下了）</li></ul><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ccd773a5-ad38-4022-895c-7ac318f31437.png" alt="压缩"></p><h3 id="3-复制算法"><a href="#3-复制算法" class="headerlink" title="3.复制算法"></a>3.复制算法</h3><p>将内存划分为大小相等的两块（Java8的中S0、S1），每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。（有点像数组的System.arraycopy，利用from和to两个指针）。</p><p>所以所谓的S0和S1是相互复制然后全标记的，都会成为「空」的空间和复制来的对象的空间。</p><p>主要的不足是每次S0和S1肯定有一块是空的，为了接下来的复制，所以也算是小浪费。</p><blockquote><p>HotSpot 虚拟机的 Eden 和 Survivor 大小比例默认为 8:1，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 就不够用了，此时需要依赖于老年代进行空间分配担保，也就是借用老年代的空间存储放不下的对象。</p></blockquote><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/b2b77b9e-958c-4016-8ae5-9c6edd83871e.png" alt="复制算法"></p><h3 id="4-分代收集算法"><a href="#4-分代收集算法" class="headerlink" title="4.分代收集算法"></a>4.分代收集算法</h3><p>现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p><p>一般将堆分为新生代和老年代。</p><ul><li>新生代使用：复制算法</li><li>老年代使用：标记 - 清除 或者 标记 - 整理 算法</li></ul><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结   "></a>5.总结   <img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-d4f0e48ab917264c4f23749b438e9cf67ae9b39f.png" alt="内存"></h3><p>先Minor GC（Young GC），再Major GC（Full GC）。S0&#x2F;S1交换14次后晋升至老年代（Java8之后是元空间，位于本地内存），jvm默认值是15。</p><p>一般来说OOM是内存耗尽，也有超大内存（不多）的情况。</p><p>   <img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/gc/java8_gc.svg" alt="gc-flow"></p><p>以上是我画的图，其中少了一步，当新生代晋升至老年代的时候失败怎么办？其实这里是执行Major GC，也就是走下面的那条流程。</p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>可以简单理解成新生代搞一个收集器，老年代搞一个收集器，Java8默认的就是Parallel + Parallel Old收集器</p><ol><li><p>串行回收：Serial GC</p></li><li><p>并行回收：Parallel GC：吞吐量高（因为并行，花费GC的时间少，所以可以让出时间给其他非GC线程），适用于科学计算</p></li><li><p>并发回收：CMS（ConcMarkSweep，并发标记清除）：其实有STW，也有并行。后备方案是Serial Old。而且是标记清除，会有碎片，会导致提前Major GC；吞吐量低，但是适用是高并发、快速响应的场景。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/62e77997-6957-4b68-8d12-bfd609bb2c68.jpg" alt="CMS"></p></li><li><p>Java9之后的：G1，Java11之后的：ZGC（在G1基础上），使命就是为了替换CMS。</p></li></ol><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c625baa0-dde6-449e-93df-c3a67f2f430f.jpg" alt="垃圾回收器"></p><p><strong>JVM调优配了新生代，老年代会跟着配对应的垃圾收集器。</strong></p><p>除了以上4种，主要还有以下3种：</p><ol><li><p>Serial Old（已废弃）</p></li><li><p>ParNew</p></li><li><p>ParOld</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/278fe431-af88-4a95-a895-9c3b80117de3.jpg" alt="ParOld"></p></li></ol><table><thead><tr><th align="left">参数</th><th align="left">新生代</th><th>新生代算法</th><th>老年代</th><th align="left">老年代算法</th></tr></thead><tbody><tr><td align="left">-xx:+UseSerialGC</td><td align="left">Serial</td><td>复制</td><td>Serial old</td><td align="left">标记整理</td></tr><tr><td align="left">-xx:+UseParNewGC（已废弃）</td><td align="left">ParNew</td><td>复制</td><td>Serial old</td><td align="left">标记整理</td></tr><tr><td align="left">-xx:+UseParallelGC</td><td align="left">Parallel</td><td>复制</td><td>Parallel old</td><td align="left">标记整理</td></tr><tr><td align="left">-xx:+UseConcMarkSweepGC</td><td align="left">ParNew</td><td>复制</td><td>CMS &#x2F; Serial old</td><td align="left">标记清除</td></tr><tr><td align="left">-xx:+UseG1GC</td><td align="left">G1</td><td>复制（不区别新老年代）</td><td>G1 Old Region</td><td align="left">标记整理</td></tr><tr><td align="left">-XX:+UseZGC</td><td align="left">ZGC</td><td>并发标记 + 并发重定位</td><td>不区分</td><td align="left">并发压缩</td></tr></tbody></table><p>G1和CMS的区别：</p><ol><li><p>G1分块设计，会移动不同的内存对象。G1虽然是标记清除算法，但是不会产生碎片</p></li><li><p>G1可以设置STW的时间，假如设置太小，就会频繁GC，降低吞吐量</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GC </tag>
            
            <tag> JVM </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL实战45讲（基础篇）</title>
      <link href="/post/a6222fa0-ebf3-11ea-b9c4-17e39dadc010/"/>
      <url>/post/a6222fa0-ebf3-11ea-b9c4-17e39dadc010/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="（一）基础架构：一条SQL查询语句是如何执行的？"><a href="#（一）基础架构：一条SQL查询语句是如何执行的？" class="headerlink" title="（一）基础架构：一条SQL查询语句是如何执行的？"></a>（一）基础架构：一条SQL查询语句是如何执行的？</h1><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-b4982fcfff7d24238a5c48d0de8901a5c3bfce41.png" alt="基本架构图"></p><h2 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h$ip -P$port -u$user -p</span><br></pre></td></tr></table></figure><p>连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。</p><p>一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。</p><h2 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h2><p>MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。</p><blockquote><p>有点类似Redis</p></blockquote><p><strong>但是大多数情况下建议不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。</strong></p><p>需要注意的是，MySQL 8.0 版本直接将查询缓存的整块功能删掉了，也就是说 8.0 开始彻底没有这个功能了。</p><h2 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h2><p>分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; elect * from t where ID=1;</span><br><span class="line"></span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;elect * from t where ID=1&#x27; at line 1</span><br></pre></td></tr></table></figure><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;</span><br></pre></td></tr></table></figure><p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。</p><h2 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from T where ID=10;</span><br><span class="line"></span><br><span class="line">ERROR 1142 (42000): SELECT command denied to user &#x27;b&#x27;@&#x27;localhost&#x27; for table &#x27;T&#x27;</span><br></pre></td></tr></table></figure><p>先判断有没有权限，如果有权限，就打开表继续执行。</p><p>打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：</p><ol><li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；</li><li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行;</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ol><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p><strong>Question</strong>：</p><p>如果表 T 中没有字段 k，而你执行了这个语句 select * from T where k&#x3D;1, 那肯定是会报“不存在这个列”的错误： “Unknown column ‘k’ in ‘where clause’”。这个错误是在我们上面提到的哪个阶段报出来的呢？</p><p><strong>Answer</strong>：</p><p>在分析器阶段，其实很容易会让人误以为分析器阶段只做语法分析，其实是内建解析树，<strong>先from，再on，再join，再where</strong>，检查权限，生成新的解析树，语义检查（没有字段k在这里）等。</p><h1 id="（二）日志系统：一条SQL更新语句是如何执行的？"><a href="#（二）日志系统：一条SQL更新语句是如何执行的？" class="headerlink" title="（二）日志系统：一条SQL更新语句是如何执行的？"></a>（二）日志系统：一条SQL更新语句是如何执行的？</h1><p>更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：redo log（重做日志）和 binlog（归档日志）</p><h2 id="重要的日志模块：redo-log"><a href="#重要的日志模块：redo-log" class="headerlink" title="重要的日志模块：redo log"></a>重要的日志模块：redo log</h2><p>一般来说，在古代的酒店客栈往往会有一本账本，账本记录着你的总账（赊账多少），而账本往往很厚，当有个B过来要赊账喝酒，你还要从账本上找下有没有这个B（上次赊账没），如果有，然后再划掉之前的赊账记录，加上这次的账款，重新生成一条新的纪录。当很忙的时候，掌柜根本没空干这些事，所以还需要一个粉板，就记录今天酒店的交易情况，还账赊账，等打烊了再回到账本上慢慢结算。</p><p>在MySQL中，磁盘的IO成本往往不低，所以先写日志，再写磁盘的操作就类似先写粉板，再写账本。</p><p>具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log（粉板）里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做，这就像打烊以后掌柜做的事。</p><p>但是某一天生意太火爆了，粉板都写不下了，怎么办？那只能移除一部分的赊账记录，再更新到账本上，从粉板上擦掉，腾出新的空间。</p><p>与此类似，InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-d00a0fb15087080b77d0907bcdbd749d58452445.png" alt="redo log"></p><p>write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。绿色的部分是还可以写的空间。</p><p>write pos 和 checkpoint 之间的是“粉板”上还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。</p><p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 <strong>crash-safe</strong>。</p><h2 id="重要的日志模块：binlog"><a href="#重要的日志模块：binlog" class="headerlink" title="重要的日志模块：binlog"></a>重要的日志模块：binlog</h2><p>和redo log的异同</p><ol><li>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</li><li>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID&#x3D;2 这一行的 c 字段加 1 ”。</li><li>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><p>有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。</p><ol><li>执行器先找引擎取 ID&#x3D;2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID&#x3D;2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</li></ol><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/redis/redis-12f2c633b8a4ec1923ab2b4036eeb4e700a77896.png" alt="流程"></p><p>两段式提交：简单说，redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。</p><p>sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode #994 腐烂的橘子</title>
      <link href="/post/13dc2460-e76c-11ea-817c-17ab596ee38a/"/>
      <url>/post/13dc2460-e76c-11ea-817c-17ab596ee38a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>在给定的网格中，每个单元格可以有以下三个值之一：</p><ul><li><p>值 0 代表空单元格；</p></li><li><p>值 1 代表新鲜橘子；</p></li><li><p>值 2 代表腐烂的橘子。</p></li></ul><p>每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。</p><p>返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1。</p><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><ul><li><code>1 &lt;= grid.length &lt;= 10</code></li><li><code>1 &lt;= grid[0].length &lt;= 10</code></li><li><code>grid[i][j]</code> 仅为 <code>0</code>、<code>1</code> 或 <code>2</code></li></ul><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><ul><li><p><strong>示例 1：</strong></p><ul><li><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/leetcode/994-oranges.png" alt="示例1"></li><li>输入：<code>[[2, 1, 1],[1, 1, 0],[0, 1, 1]]</code></li><li>输出：<code>4</code></li></ul></li><li><p><strong>示例 2：</strong></p><ul><li>输入：<code>[[2, 1, 1],[0, 1, 1],[1, 0, 1]]</code></li><li>输出：<code>-1</code></li></ul></li><li><p><strong>示例 3：</strong></p><ul><li>输入：<code>[[0, 2]]</code></li><li>输出：<code>0</code></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>网格、感染初一看就是深搜的题。</p><p>一分钟上下左右感染一个，感染的橘子又会上下左右感染邻近的新鲜的橘子，搁这生化危机呢。</p><p>每分钟感染周围（上下左右）的一排，那么用BFS走一走把所有的橘子感染一下（着色），求出最大深度<code>max</code>，然后正常遍历一下网格看还有没有新鲜橘子，有的话，<code>return -1</code>；没有的话<code>return max</code>。</p><p>一提交，GG了。</p><blockquote><p>题目妹说只有一个「感染源」啊</p></blockquote><p>如右边这种情况：<code>[[2],[1],[1],[1],[2],[1],[1]]</code>。它拥有2个「感染源」，最小分钟是2分钟，因为这2个「感染源」是同时作用邻近的新鲜橘子的。</p><p>那要怎么让多个起点同时遍历呢？</p><p>脑子里的第一个笨办法，就是先列举出所有的烂橘子，将每个烂橘子可达的所有点都遍历一遍然后着色，着什么色呢？<strong>分钟数</strong>。一个初始烂橘子的第一围的新鲜橘子被感染了，花费的时间是1分钟，然后这一围被感染的橘子成为了新的感染源，去感染其周围的新鲜橘子，下一轮的花费的时间还是1分钟，一共2分钟，将这个分钟数写到网格中，为了加以区分用负数表示。如：第一分钟被感染的新鲜橘子<code>grid[x][y] = -1</code>;第二分钟被感染的新鲜橘子<code>grid[x][y] = -2</code>。因为存在一个新鲜的橘子会被多个「感染源」感染的情况，所以一个新鲜的橘子的这个「感染分钟数」是多个，我们比较一下选最小的那个即可（在代码里是赋值比较大的，因为是负数）。</p><p>这样就完成了所有的新鲜的橘子，最快被感染的着色时间。我们常规遍历一遍，求出最大的那个时间就是总共花费的时间。如果网格中还存在新鲜的橘子，就直接<code>return -1</code>。</p><p><code>Java代码：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这题主要是一个新鲜橘子会被多个「源」传染，所以「最短路径」需要取最小的，也就是每个新鲜橘子被感染的是最近的烂橘子，</span></span><br><span class="line"><span class="comment">     * 最后只要找出网格中最大的最短路径就行了。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 先找出所有的烂橘子（val = 2），每个烂橘子bfs遍历</span></span><br><span class="line"><span class="comment">     * 2. 每个烂橘子bfs遍历能到达（传染）的所有新鲜橘子（val = 1）给他们赋路径值（负数用于区分），这批新鲜的橘子就变成「伪 - 新鲜橘子」</span></span><br><span class="line"><span class="comment">     * 3. 「伪 - 新鲜橘子」被赋值后可能还会被「最近的烂橘子」感染，所以这里需要比较最近的烂橘子（最短路径），更新最短路径</span></span><br><span class="line"><span class="comment">     * 4. 比较所有网格的新鲜橘子的val，理论上取一个最大值，因为赋值的是负值，所以是取最小值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> grid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">orangesRotting</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grid[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">                    bfs(grid, i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : grid) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                <span class="keyword">if</span> (anInt == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : grid) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                min = Math.min(min, anInt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[grid.length][grid[<span class="number">0</span>].length];</span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;);</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; limit; k++) &#123;</span><br><span class="line">                <span class="type">int</span>[] xy = queue.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> xy[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> xy[<span class="number">1</span>];</span><br><span class="line">                visited[x][y] = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// 当橘子是好的，或者已经腐烂的（为负数）改成腐烂时间</span></span><br><span class="line">                <span class="comment">// 如果已有腐烂时间的橘子，这判断更新（因为是负数，所以是max）</span></span><br><span class="line">                <span class="keyword">if</span> (grid[x][y] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    grid[x][y] = Math.max(grid[x][y], -depth);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (grid[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">                    grid[x][y] = -depth;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; !visited[x - <span class="number">1</span>][y] &amp;&amp; grid[x - <span class="number">1</span>][y] != <span class="number">2</span> &amp;&amp; grid[x - <span class="number">1</span>][y] != <span class="number">0</span>) &#123;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x - <span class="number">1</span>, y&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (x + <span class="number">1</span> &lt; grid.length &amp;&amp; !visited[x + <span class="number">1</span>][y] &amp;&amp; grid[x + <span class="number">1</span>][y] != <span class="number">2</span> &amp;&amp; grid[x + <span class="number">1</span>][y] != <span class="number">0</span>) &#123;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x + <span class="number">1</span>, y&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; !visited[x][y - <span class="number">1</span>] &amp;&amp; grid[x][y - <span class="number">1</span>] != <span class="number">2</span> &amp;&amp; grid[x][y - <span class="number">1</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y - <span class="number">1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (y + <span class="number">1</span> &lt; grid[<span class="number">0</span>].length &amp;&amp; !visited[x][y + <span class="number">1</span>] &amp;&amp; grid[x][y + <span class="number">1</span>] != <span class="number">2</span> &amp;&amp; grid[x][y + <span class="number">1</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y + <span class="number">1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多源广度优先搜索"><a href="#多源广度优先搜索" class="headerlink" title="多源广度优先搜索"></a>多源广度优先搜索</h2><p>上面的的那个思路虽然可行，但是性能有点拉胯，因为一个格子被多次访问了。回到上面说的</p><blockquote><p>那要怎么让多个起点同时遍历呢？</p></blockquote><p>其实BFS模板一般只有一个初始节点，当把所有的烂橘子当做第一层，模拟同时感染周围的新鲜橘子，他的周围的新鲜的橘子就都是下一轮的目标了，都是同时的。所以事情就变得简单了起来。</p><p><strong>其中特别注意一些特殊情况，例如只有烂橘子、只有好橘子；还有就是BFS图的遍历要特别注意<code>visited</code>访问标记要在加入到队列之后就要设置了。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">orangesRotting</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[grid.length][grid[<span class="number">0</span>].length];</span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grid[i].length; j++) &#123;</span><br><span class="line">                <span class="comment">// 所有的烂橘子都加入队列</span></span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;);</span><br><span class="line">                    visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// flag是判断有没有烂橘子</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">                <span class="type">int</span>[] xy = queue.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> xy[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> xy[<span class="number">1</span>];</span><br><span class="line">                visited[x][y] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (grid[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">                    grid[x][y] = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; !visited[x - <span class="number">1</span>][y] &amp;&amp; grid[x - <span class="number">1</span>][y] == <span class="number">1</span>) &#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x - <span class="number">1</span>, y&#125;);</span><br><span class="line">                    <span class="comment">// 这里要先控制访问标记，防止被下个 if 代码逻辑重复加入了</span></span><br><span class="line">                    visited[x - <span class="number">1</span>][y] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (x + <span class="number">1</span> &lt; grid.length &amp;&amp; !visited[x + <span class="number">1</span>][y] &amp;&amp; grid[x + <span class="number">1</span>][y] == <span class="number">1</span>) &#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x + <span class="number">1</span>, y&#125;);</span><br><span class="line">                    visited[x + <span class="number">1</span>][y] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; !visited[x][y - <span class="number">1</span>] &amp;&amp; grid[x][y - <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y - <span class="number">1</span>&#125;);</span><br><span class="line">                    visited[x][y - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (y + <span class="number">1</span> &lt; grid[<span class="number">0</span>].length &amp;&amp; !visited[x][y + <span class="number">1</span>] &amp;&amp; grid[x][y + <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y + <span class="number">1</span>&#125;);</span><br><span class="line">                    visited[x][y + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : grid) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                <span class="keyword">if</span> (anInt == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag ? depth - <span class="number">1</span> : depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 广度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode #378 有序矩阵中第K小的元素</title>
      <link href="/post/a0c666d0-df31-11ea-a0a7-39ac104f8724/"/>
      <url>/post/a0c666d0-df31-11ea-a0a7-39ac104f8724/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>给定一个 <em><code>n x n</code></em> 矩阵，其中每行和每列元素均按升序排序，找到矩阵中第 <code>k</code> 小的元素。<br>请注意，它是排序后的第 <code>k</code> 小元素，而不是第 <code>k</code> 个不同的元素。</p><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><p>你可以假设 k 的值永远是有效的，<code>1 ≤ k ≤ n ^ 2 </code></p><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><ul><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">matrix = [</span><br><span class="line">   [1,  5,  9],</span><br><span class="line">   [10, 11, 13],</span><br><span class="line">   [12, 13, 15]</span><br><span class="line">],</span><br><span class="line">k = 8,</span><br><span class="line"></span><br><span class="line">返回 13。</span><br></pre></td></tr></table></figure></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>有一说一，被<a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">二维数组中的查找</a>这道题整魔怔了。该题目的一种<a href="https://www.yuanmo.xyz/post/fde16a80-de06-11ea-9d6c-0b86d1eb3e64/">解法</a>是将该矩阵模拟成一个二叉搜索树，利用其性质来做遍历方向的决策从而快速找到<code>target</code>。因为是模拟二叉搜索树，所以查找的时间复杂度是<em>O</em>(log(<em>n ^ 2</em>) )害挺快的。而这题也是同样的矩阵，但求的是第k个值（排序好的第K位）。</p><p>刚好晚上看了麻省理工公开课的其中一节课<a href="https://www.bilibili.com/video/BV1Tb411M7FA?p=9">（二叉搜索树和快排）</a>。认识到了二者相似性和奇妙之处。二叉搜索树的构建过程和快排的排序过程，二者在最坏的情况下时间复杂度都是<em>O</em>(<em>n ^ 2</em>) ，平均时间复杂度都是<em>O</em>(nlog(<em>n</em>) )，原理十分类似。BST在最差的情况是什么呢？就是像链表一样的情况，只有左节点或者右节点，这样它的高度就是节点数量（N），而在满二叉树下它的高度是（logN）。所以N个元素在构建BST的过程中，会先查找它应该在的位置（logN），N个元素就是<em>O</em>(nlog(<em>n</em>) )。但是在有序的数列（正、逆序）中会出现很糟糕的情况，这点和快排的pivot的选择很像。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/leetcode/worst-bst.png" alt="像链表一样"></p><p>所以这道题我就在想可不可以利用BST的中序遍历的结果来求第K个元素？该矩阵的特性很像BST，因为该矩阵的扁平成一维数组的结果对于构建BST应该是比较理想的，不可能出现上图的这种情况。</p><p>我的思路：</p><ol><li>将矩阵遍历，添加到一个新数组中；</li><li>将该序列构建BST（新的序列对于构建BST是理想的）；</li><li>对该BST中序遍历，结果放在一个新数组中；</li><li>得到该新数组的第k个元素。</li></ol><p>先将该矩阵的元素来构建一颗二叉搜索树。以下是二叉树模型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> TreeNode left;</span><br><span class="line">    <span class="keyword">public</span> TreeNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TreeNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;val=&quot;</span> + val +</span><br><span class="line">                <span class="string">&quot;, left=&quot;</span> + left +</span><br><span class="line">                <span class="string">&quot;, right=&quot;</span> + right +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过深度优先遍历的方式，对矩阵的右上角<strong>向左向下</strong>遍历，为了不出现重复访问，设置一个<code>visited</code>访问标记。类似先序遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs2</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">boolean</span>[][] visited, List&lt;Integer&gt; res)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt; matrix.length &amp;&amp; y &lt; matrix[<span class="number">0</span>].length &amp;&amp; !visited[x][y]) &#123;</span><br><span class="line">        visited[x][y] = <span class="literal">true</span>;</span><br><span class="line">        res.add(matrix[x][y]);</span><br><span class="line">        dfs2(matrix, x - <span class="number">1</span>, y, visited, res);</span><br><span class="line">        dfs2(matrix, x, y + <span class="number">1</span>, visited, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是构建BST的过程代码辣：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">buildBst</span><span class="params">(<span class="type">int</span> n, TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= root.val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            root.left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(n);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root = root.left;</span><br><span class="line">            buildBst(n, root);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            root.right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(n);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root = root.right;</span><br><span class="line">            buildBst(n, root);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是对BST的中序遍历，BST的中序遍历打印的结果，一定是升序的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        dfs(root.left, res);</span><br><span class="line">        res.add(root.val);</span><br><span class="line">        dfs(root.right, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中要注意root节点在构建之前就已经创建了，所以第一个遍历的数组下标从<code>1</code>开始遍历，完整的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KthSmallestElementInaSortedMatrix</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[matrix.length][matrix[<span class="number">0</span>].length];</span><br><span class="line">        dfs2(matrix, matrix.length - <span class="number">1</span>, <span class="number">0</span>, visited, tmp);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(tmp.get(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// 第一位是root节点，已经add了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; tmp.size(); i++) &#123;</span><br><span class="line">            buildBst(tmp.get(i), root);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root, res);</span><br><span class="line">        <span class="keyword">return</span> res.get(k - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">buildBst</span><span class="params">(<span class="type">int</span> n, TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= root.val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="literal">null</span>) &#123;</span><br><span class="line">                root.left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(n);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root = root.left;</span><br><span class="line">                buildBst(n, root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                root.right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(n);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root = root.right;</span><br><span class="line">                buildBst(n, root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            dfs(root.left, res);</span><br><span class="line">            res.add(root.val);</span><br><span class="line">            dfs(root.right, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs2</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">boolean</span>[][] visited, List&lt;Integer&gt; res)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt; matrix.length &amp;&amp; y &lt; matrix[<span class="number">0</span>].length &amp;&amp; !visited[x][y]) &#123;</span><br><span class="line">            visited[x][y] = <span class="literal">true</span>;</span><br><span class="line">            res.add(matrix[x][y]);</span><br><span class="line">            dfs2(matrix, x - <span class="number">1</span>, y, visited, res);</span><br><span class="line">            dfs2(matrix, x, y + <span class="number">1</span>, visited, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> TreeNode left;</span><br><span class="line">    <span class="keyword">public</span> TreeNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TreeNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;val=&quot;</span> + val +</span><br><span class="line">                <span class="string">&quot;, left=&quot;</span> + left +</span><br><span class="line">                <span class="string">&quot;, right=&quot;</span> + right +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，当然性能拉胯了。。这只是一种奇葩做法。。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二叉搜索树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 剑指 Offer #04 二维数组中的查找</title>
      <link href="/post/fde16a80-de06-11ea-9d6c-0b86d1eb3e64/"/>
      <url>/post/fde16a80-de06-11ea-9d6c-0b86d1eb3e64/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>在一个 <code>n * m</code> 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><p>现有矩阵 matrix 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1, 4, 7, 11, 15],</span><br><span class="line">  [2, 5, 8, 12, 19],</span><br><span class="line">  [3, 6, 9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><p>给定 <code>target</code> &#x3D; 5，返回 <code>true</code>。</p></li><li><p>给定 <code>target</code> &#x3D; 20，返回 <code>false</code>。</p></li></ul><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><ul><li><code>0 &lt;= n &lt;= 1000</code></li><li><code>0 &lt;= m &lt;= 1000</code></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>方法有很多，单纯双for循环暴力肯定太low。主要还是双指针、二分法这些。不过有个思路很好，站在该矩阵的右上角来看，这货就是一个「二叉搜索树」。</p><p><strong>二叉搜索树的性质：</strong></p><ol><li>节点的左子树上的所有节点的值都小于等于节点的值；</li><li>节点的右子树上的所有节点的值都大于等于节点的值；</li><li>左子树和右子树也都是BST。</li></ol><p>那就模拟一颗二叉搜索树来做咯：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LcOf04</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当成二叉搜索树来做</span></span><br><span class="line"><span class="comment">     * 执行用时： 0 ms , 在所有 Java 提交中击败了 100.00% 的用户</span></span><br><span class="line"><span class="comment">     * 内存消耗： 45.5 MB , 在所有 Java 提交中击败了 65.46% 的用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matrix</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findNumberIn2DArray</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        dfs(matrix, matrix.length - <span class="number">1</span>, <span class="number">0</span>, target);</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; matrix.length &amp;&amp; j &gt;= <span class="number">0</span> &amp;&amp; j &lt; matrix[<span class="number">0</span>].length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == target) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[i][j] &lt; target) &#123;</span><br><span class="line">                dfs(matrix, i, j + <span class="number">1</span>, target);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dfs(matrix, i - <span class="number">1</span>, j, target);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中注意下，如果用双指针、二分法最好从右上角为起点。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> stack </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二叉搜索树 </tag>
            
            <tag> 深度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode #934 最短的桥</title>
      <link href="/post/658c1730-ddcf-11ea-9e4c-d3e8698fdb4b/"/>
      <url>/post/658c1730-ddcf-11ea-9e4c-d3e8698fdb4b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>在给定的二维二进制数组 A 中，存在两座岛。（岛是由四面相连的 1 形成的一个最大组。）</p><p>现在，我们可以将 0 变为 1，以使两座岛连接起来，变成一座岛。</p><p>返回必须翻转的 0 的最小数目。（可以保证答案至少是 1。）</p><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><ul><li><code>1 &lt;= A.length = A[0].length &lt;= 100</code></li><li><code>A[i][j] == 0</code> 或 <code>A[i][j] == 1</code></li></ul><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><ul><li><p><strong>示例 1：</strong></p><ul><li>输入：<code>[[0,1],[1,0]]</code></li><li>输出：1</li></ul></li><li><p><strong>示例 2：</strong></p><ul><li>输入：<code>[[0,1,0],[0,0,0],[0,0,1]]</code></li><li>输出：2</li></ul></li><li><p><strong>示例 3：</strong></p><ul><li>输入：<code>[[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]</code></li><li>输出：1</li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目保证答案至少是1，那么一定是2个岛。岛的定义是上下左右相连所以斜着的不算。返回翻转0的最小值，这个最小值就是桥的长度，也就是「最短路径」。</p><p>一般看到「最短路径」我们会想到<code>bfs</code>、<code>A*</code>、<code>Dijkstra</code>算法，一般都是点对点的，这里是两个岛屿，所以<strong>只要将一个岛的所有边缘上的点都求一遍到第二个岛的路径</strong>，返回最小的路径就可以了。</p><p>所以问题就是怎么找出这两个岛？岛屿只有上下左右相连，所以可以根据深度优先搜索，将某坐标的上下左右进行搜索，如果是1则继续搜索，是0则终止。为了将两个岛区分开，我们需要将第一个找到的岛「涂色」，因为后面需要找第二个岛，如果都用1表示就没法区分开了。</p><p><strong>注意的点：</strong></p><ol><li>bfs去找第二个岛，因为是第一个岛的每个节点去广搜，所以<code>visited</code>访问标记每次循环需要初始化。</li><li>bfs周围的点如果是<code>-1</code>的话没必要入队，因为可能同是旁边的点（旁边的点会bfs一次，这里重复了），或者是第一个岛的非边缘的点，一定不是「最短路径」。</li><li>bfs一定能找到第二个岛的点，所以一定是在迭代里<code>return</code>的。</li><li>优化点也有，比如在该题其实不需要<code>visited</code>访问标记，每次初始化很浪费时间空间。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShortestBridge</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">shortestBridge</span><span class="params">(<span class="type">int</span>[][] arr)</span> &#123;</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; firstLand = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[arr.length][arr[<span class="number">0</span>].length];</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// 设置一个flag，找到后需要继续遍历这个arr了。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    dfs(arr, i, j, visited, firstLand);</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] xy : firstLand) &#123;</span><br><span class="line">            <span class="comment">// 【注意】每次初始化访问标记【注意】</span></span><br><span class="line">            visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[arr.length][arr[<span class="number">0</span>].length];</span><br><span class="line">            ans = Math.min(ans, bfs(arr, xy[<span class="number">0</span>], xy[<span class="number">1</span>], visited));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> visited</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstLand</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] arr, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">boolean</span>[][] visited, List&lt;<span class="type">int</span>[]&gt; firstLand)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt; arr.length &amp;&amp; y &lt; arr[<span class="number">0</span>].length &amp;&amp; !visited[x][y]) &#123;</span><br><span class="line">            visited[x][y] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[x][y] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[x][y] = -<span class="number">1</span>;</span><br><span class="line">            firstLand.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y&#125;);</span><br><span class="line">            <span class="comment">// 仅仅只有上下左右</span></span><br><span class="line">            dfs(arr, x - <span class="number">1</span>, y, visited, firstLand);</span><br><span class="line">            dfs(arr, x + <span class="number">1</span>, y, visited, firstLand);</span><br><span class="line">            dfs(arr, x, y - <span class="number">1</span>, visited, firstLand);</span><br><span class="line">            dfs(arr, x, y + <span class="number">1</span>, visited, firstLand);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * wcnd，写死我了</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> visited</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span>[][] arr, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">boolean</span>[][] visited)</span> &#123;</span><br><span class="line">        <span class="comment">// 最后要减一</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y&#125;);</span><br><span class="line">        visited[x][y] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">                <span class="type">int</span>[] curr = queue.poll();</span><br><span class="line">                x = curr[<span class="number">0</span>];</span><br><span class="line">                y = curr[<span class="number">1</span>];</span><br><span class="line">                <span class="comment">// 找到了1</span></span><br><span class="line">                <span class="keyword">if</span> (arr[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> len;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果周围的节点是-1的话，没必要入队</span></span><br><span class="line">                <span class="keyword">if</span> (x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; !visited[x - <span class="number">1</span>][y] &amp;&amp; arr[x - <span class="number">1</span>][y] != -<span class="number">1</span>) &#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x - <span class="number">1</span>, y&#125;);</span><br><span class="line">                    visited[x - <span class="number">1</span>][y] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (x + <span class="number">1</span> &lt; arr.length &amp;&amp; !visited[x + <span class="number">1</span>][y] &amp;&amp; arr[x + <span class="number">1</span>][y] != -<span class="number">1</span>) &#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x + <span class="number">1</span>, y&#125;);</span><br><span class="line">                    visited[x + <span class="number">1</span>][y] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; !visited[x][y - <span class="number">1</span>] &amp;&amp; arr[x][y - <span class="number">1</span>] != -<span class="number">1</span>) &#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y - <span class="number">1</span>&#125;);</span><br><span class="line">                    visited[x][y - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (y + <span class="number">1</span> &lt; arr[<span class="number">0</span>].length &amp;&amp; !visited[x][y + <span class="number">1</span>] &amp;&amp; arr[x][y + <span class="number">1</span>] != -<span class="number">1</span>) &#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y + <span class="number">1</span>&#125;);</span><br><span class="line">                    visited[x][y + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 一定是可以找到最短路径的，所以这里返回的是错误的</span></span><br><span class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 广度优先搜索 </tag>
            
            <tag> 深度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 面试题 03.01. 三合一</title>
      <link href="/post/68f56ac0-cd85-11ea-a144-f7a4331a0642/"/>
      <url>/post/68f56ac0-cd85-11ea-a144-f7a4331a0642/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>三合一。描述如何只用一个数组来实现三个栈。</p><p>你应该实现：</p><ol><li><p><code>push(stackNum, value)</code></p></li><li><p><code>pop(stackNum)</code></p></li><li><p><code>isEmpty(stackNum)</code></p></li><li><p><code>peek(stackNum)</code></p></li></ol><p>stackNum表示栈下标，value表示压入的值。</p><p>构造函数会传入一个stackSize参数，代表每个栈的大小。</p><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><ul><li><p>示例 1:</p><ul><li>输入：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&quot;TripleInOne&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;isEmpty&quot;]</span><br><span class="line">[[1], [0, 1], [0, 2], [0], [0], [0], [0]]</span><br></pre></td></tr></table></figure></li><li>输出：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[null, null, null, 1, -1, -1, true]</span><br></pre></td></tr></table></figure>说明：当栈为空时<code>pop, peek</code>返回-1，当栈满时<code>push</code>不压入元素。</li></ul></li><li><p>示例 2:</p><ul><li>输入：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&quot;TripleInOne&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;peek&quot;]</span><br><span class="line">[[2], [0, 1], [0, 2], [0, 3], [0], [0], [0], [0]]</span><br></pre></td></tr></table></figure></li><li>输出：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[null, null, null, null, 2, 1, -1, -1]</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>用数组来实现栈是非常简单的，不过这里需要实现3个栈且只能用一个数组。那肯定是需要将这个数组分段利用指针去管理了。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/leetcode/0301-flow.png" alt="单个数组"></p><ul><li><code>pop</code>方法只要操作head指针的size即可：大于0，自减；小于等于0，<code>return -1</code>；</li><li><code>peek</code>方法类似<code>pop</code>方法；</li><li><code>push</code>方法，判断head指针的size，有空余，则移动指针去塞入新数据；</li><li><code>isEmpty</code>方法，判断head指针的size，为0则为空。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreeInOne</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行用时： 13 ms , 在所有 Java 提交中击败了 56.62% 的用户</span></span><br><span class="line"><span class="comment">     * 内存消耗： 49.1 MB , 在所有 Java 提交中击败了 100.00% 的用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stackSize</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreeInOne</span><span class="params">(<span class="type">int</span> stackSize)</span> &#123;</span><br><span class="line">        capacity = stackSize * <span class="number">3</span>;</span><br><span class="line">        size = capacity + <span class="number">3</span>;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> stackNum, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> headIndex(stackNum);</span><br><span class="line">        System.out.println(<span class="string">&quot;index = &quot;</span> + index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 头指针，容量计数功能，如果超过容量，就塞不了</span></span><br><span class="line">        <span class="keyword">if</span> (data[index] &lt; capacity / <span class="number">3</span>) &#123;</span><br><span class="line">            data[index]++;</span><br><span class="line">            <span class="comment">// 剩余位置塞入数据</span></span><br><span class="line">            data[index + data[index]] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">(<span class="type">int</span> stackNum)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> headIndex(stackNum);</span><br><span class="line">        <span class="comment">// stack为空</span></span><br><span class="line">        <span class="keyword">if</span> (data[index] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> data[index + data[index]];</span><br><span class="line">            data[index]--;</span><br><span class="line">            <span class="comment">// 这里并不需要真的删除这个元素</span></span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">(<span class="type">int</span> stackNum)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> headIndex(stackNum);</span><br><span class="line">        <span class="keyword">if</span> (data[index] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> data[index + data[index]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(<span class="type">int</span> stackNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data[headIndex(stackNum)] == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据stack下标取头指针</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stackNum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">headIndex</span><span class="params">(<span class="type">int</span> stackNum)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (stackNum) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                index = capacity / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                index = size - <span class="number">1</span> - capacity / <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ThreeInOne&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;data=&quot;</span> + Arrays.toString(data) +</span><br><span class="line">                <span class="string">&quot;, size=&quot;</span> + size +</span><br><span class="line">                <span class="string">&quot;, capacity=&quot;</span> + capacity +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 栈 </tag>
            
            <tag> stack </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode #540 有序数组中的单一元素</title>
      <link href="/post/2ad612f0-bcd5-11ea-8844-eba35fffe767/"/>
      <url>/post/2ad612f0-bcd5-11ea-8844-eba35fffe767/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。</p><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><p>您的方案应该在 $O(log n)$ 时间复杂度和 $O(1)$ 空间复杂度中运行。</p><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><ul><li><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,1,2,3,3,4,4,8,8]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure></li><li><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,3,7,7,10,11,11]</span><br><span class="line">输出: 10</span><br></pre></td></tr></table></figure></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目简单非常简单，但其中题干中重点强调了<em>O</em>(log<em>n</em>)的时间复杂度和<em>O</em>(1)空间复杂度，所以一切会伴随输入数组大小变化的额外空间和遍历也不行哦，即使是用双指针优化到<em>O</em>(log<em>n&#x2F;4</em>)也是不满足的。一眼看到<em>O</em>(log<em>n</em>)的时间复杂度就想到了题目的本意应该是让我们利用二分法来解。</p><p>因为是有序数组，并且每个元素都是出现两次，除了唯一的一个元素。所以相同的元素一定是连续的并且长度为奇数，所以我们可以每次取中间的元素，和左右两边比较（注意边界），找出相邻元素相同的情况，将整个数组分隔开，左边的子串和右边子串一定有一个是奇数长度（该数组一定有个唯一元素），单个元素就一定藏在这个子串里。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/leetcode/540-bisection.jpeg" alt="思路"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">singleNonDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mid - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; nums[mid] == nums[mid - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">// 奇数在左边</span></span><br><span class="line">            <span class="keyword">if</span> (((mid - <span class="number">1</span>) &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                right = mid - <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mid + <span class="number">1</span> &lt; nums.length &amp;&amp; nums[mid] == nums[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">// 奇数在左边</span></span><br><span class="line">            <span class="keyword">if</span> ((mid &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[mid];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;left = &quot;</span> + left);</span><br><span class="line">        System.out.println(<span class="string">&quot;right = &quot;</span> + right);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode #892 三维形体的表面积</title>
      <link href="/post/a984b2c0-b454-11ea-bd3f-9d082b6cabfa/"/>
      <url>/post/a984b2c0-b454-11ea-bd3f-9d082b6cabfa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>在 <code>N * N</code> 的网格上，我们放置一些 <code>1 * 1 * 1</code>  的立方体。</p><p>每个值 <code>v = grid[i][j] </code>表示 v 个正方体叠放在对应单元格 (i, j) 上。</p><p>请你返回最终形体的表面积。</p><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><ul><li><code>1 &lt;= N &lt;= 50</code></li><li><code>0 &lt;= grid[i][j] &lt;= 50</code></li></ul><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><ul><li><p><strong>示例 1：</strong></p><ul><li>输入：<code>[[2]]</code></li><li>输出：10</li></ul></li><li><p><strong>示例 2：</strong></p><ul><li>输入：<code>[[1,2],[3,4]]</code></li><li>输出：34</li></ul></li><li><p><strong>示例 3：</strong></p><ul><li>输入：<code>[[1,0],[0,2]]</code></li><li>输出：16</li></ul></li><li><p><strong>示例 4：</strong></p><ul><li>输入：<code>[[1,1,1],[1,0,1],[1,1,1]]</code></li><li>输出：32</li></ul></li><li><p><strong>示例 5：</strong></p><ul><li>输入：<code>[[2, 2, 2], [2, 1, 2], [2, 2, 2]]</code></li><li>输出：46</li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>这题是<a href="https://leetcode-cn.com/problems/projection-area-of-3d-shapes/">#883 三维形体投影面积</a>的升级版几何题目，883这题描述的利用一个二维数组的元素代表单个单元格的高度按照从左向右的顺序在xy平面上从上到下堆叠，求xy、yz、xz三个投影面积。</p><p>883这题相对简单，投影面积就是求最大值，因为矮的会被高的「覆盖」，只要求三个面即可。</p><p>示例图：</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/leetcode/892%20-%20projection%20-%201.png" alt="解释"></p><p>但是889这题就复杂了很多，他需要的是整个形体的表面积，而非投影面积。于是就带来了一个问题，被挡住的柱状形体可能存在表面积。</p><p>一开始我思考的是按照883的方式，还是先求出6个面（整个形体）的投影面积，再加上「凹陷」的表面积即可。因为只有存在「凹陷」情况，才会多出一部分表面积，但是所谓的“正证法”，会遇到的情况就十分多样了。</p><p>比如：</p><ol><li><code>[[1, 0, 1]]</code>和<code>[1, 0, 0, 1]</code></li><li><code>[[1, 0], [0, 2]]</code></li></ol><p>当凹陷是2个单位时或者0的情况等等这些情况就比较复杂，凹陷的判断十分的纷繁凌乱，感觉这个办法就很蠢。</p><p>在题解中看到了一个“阿姨”的方法，属实8错。他的思路是把所有柱子作为一个单位，求出所有柱子的表面积，如：<code>1</code>的表面积是<code>1 * 4 + 2</code>为6，<code>2</code>的表面积是<code>2 * 4 + 2</code>为10，再减去柱子与柱子之间相贴的面积。</p><blockquote><p>给阿姨倒一杯卡布奇诺。</p></blockquote><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/leetcode/892%20-%20projection%20-%202.png" alt="阿姨的图"></p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/leetcode/892%20-%20projection%20-%203.png" alt="阿姨的图"></p><p>所以，当我们遍历整个形体时，只要判断该柱子与「上面」和「左边」是否有接触，有接触且不为0（为0，即柱子不存在，也不会出现遮挡的情况）的话，就减去<strong>较矮的那个柱子的高度 * 2</strong>，因为是两面相贴，所以要乘以2。</p><p>Java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">surfaceAreaPro</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">fucker</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grid[i].length; j++) &#123;</span><br><span class="line">            <span class="comment">// ① 柱子为0，则整个为0</span></span><br><span class="line">            fucker += (<span class="number">4</span> * grid[i][j] == <span class="number">0</span> ? -<span class="number">2</span> : <span class="number">4</span> * grid[i][j]) + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ②</span></span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[i - <span class="number">1</span>][j] != <span class="number">0</span> &amp;&amp; grid[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                fucker -= Math.min(grid[i][j], grid[i - <span class="number">1</span>][j]) * <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ③</span></span><br><span class="line">            <span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[i][j - <span class="number">1</span>] != <span class="number">0</span> &amp;&amp; grid[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                fucker -= Math.min(grid[i][j], grid[i][j - <span class="number">1</span>]) * <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fucker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外说明一点，这样写更简洁，但是效率还可以提升，提升在哪呢？因为当前柱子高度为0的时候，直接跳过即可。可是如上这样写即使当前柱子高度为0，①②③这三步都会走一遍会影响效率，但是看起来更简洁就vans了。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 几何 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode #703 数据流中的第K大元素</title>
      <link href="/post/46834820-a1db-11ea-bfec-d3212239dc2e/"/>
      <url>/post/46834820-a1db-11ea-bfec-d3212239dc2e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>设计一个找到数据流中第K大元素的类（class）。注意是排序后的第K大元素，不是第K个不同的元素。</p><p>你的 KthLargest 类需要一个同时接收整数 k 和整数数组nums 的构造器，它包含数据流中的初始元素。每次调用 KthLargest.add，返回当前数据流中第K大的元素。</p><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><p>你可以假设 <code>nums</code> 的长度≥ <code>k-1</code> 且<code>k ≥ 1</code>。</p><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span>[] arr = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">2</span>];</span><br><span class="line"><span class="type">KthLargest</span> <span class="variable">kthLargest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KthLargest</span>(<span class="number">3</span>, arr);</span><br><span class="line">kthLargest.add(<span class="number">3</span>);   <span class="comment">// returns 4</span></span><br><span class="line">kthLargest.add(<span class="number">5</span>);   <span class="comment">// returns 5</span></span><br><span class="line">kthLargest.add(<span class="number">10</span>);  <span class="comment">// returns 5</span></span><br><span class="line">kthLargest.add(<span class="number">9</span>);   <span class="comment">// returns 8</span></span><br><span class="line">kthLargest.add(<span class="number">4</span>);   <span class="comment">// returns 8</span></span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="1-额外数组空间"><a href="#1-额外数组空间" class="headerlink" title="1. 额外数组空间"></a>1. 额外数组空间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KthLargest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> index;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Integer&gt; newData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KthLargest</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        index = k;</span><br><span class="line">        len = nums.length;</span><br><span class="line">        newData = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(nums.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            newData.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        len++;</span><br><span class="line">        newData.add(val);</span><br><span class="line">        Collections.sort(newData);</span><br><span class="line">        <span class="keyword">return</span> newData.get(len - index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过还是用原始数组，更底层更快一点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KthLargest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KthLargest</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        index = k;</span><br><span class="line">        len = nums.length;</span><br><span class="line">        data = nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        len++;</span><br><span class="line">        <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        System.arraycopy(data, <span class="number">0</span>, temp, <span class="number">0</span>, data.length);</span><br><span class="line">        temp[len - <span class="number">1</span>] = val;</span><br><span class="line">        Arrays.sort(temp);</span><br><span class="line">        data = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        System.arraycopy(temp, <span class="number">0</span>, data, <span class="number">0</span>, temp.length);</span><br><span class="line">        <span class="keyword">return</span> data[len - index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-小顶堆"><a href="#2-小顶堆" class="headerlink" title="2. 小顶堆"></a>2. 小顶堆</h2><p>题目中表述了<code>add</code>方法返回第K大元素即可，所以其实我们不必维护整个数组，只需要维护K个从大到小的元素即可。表面<code>add</code>方法而已，不是真的新增。</p><p>什么是堆？堆是一种<strong>非线性结构</strong>，可以把堆看作一个数组，也可以被看作一个完全二叉树，通俗来讲<strong>堆其实就是利用完全二叉树的结构来维护的一维数组</strong>。</p><p>按照堆的特点可以把堆分为<strong>大顶堆</strong>和<strong>小顶堆</strong>：</p><ol><li>大顶堆：每个结点的值都<strong>大于</strong>或<strong>等于</strong>其左右孩子结点的值</li><li>小顶堆：每个结点的值都<strong>小于</strong>或<strong>等于</strong>其左右孩子结点的值</li></ol><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/leetcode/703-minheap.png" alt="大顶堆和小顶堆"></p><p>直接说用法：</p><ul><li><p><strong>升序：使用大顶堆</strong></p></li><li><p><strong>降序：使用小顶堆</strong></p></li></ul><p>我们这边每次<code>add</code>方法需要返回第K个从大到小元素，所以每次执行<code>add</code>方法需要保留K个降序的元素，这里就是采用了小顶堆。我们可以用优先队列<code>PriorityQueue&lt;Integer&gt;</code>来做（大顶堆的话需要重写排序方法，默认是升序）。<strong>优先队列的作用是保证每次取出的元素都是队列中权值最小的。</strong></p><p>当堆内元素的个数小于等于K时，调用<code>add</code>方法入队；当第K+1个元素想入队时，和队首比较大小（队首是最小的）。比队首大，队首元素出队，新元素入队；比队首小，不作任何操作。这样就能保证队列的元素个数是K个，并且是队首是最小的（不一定是从小到大排序，<strong>但是队首一定是整个队列里最小的</strong>）。</p><p>所以就是两步：</p><ol><li>控制队列大小为K</li><li>保证队首的元素比新加入的元素大</li></ol><p>所以整个数组的第K大元素就是队列的队首<code>peek()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KthLargest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 小顶堆</span></span><br><span class="line">    <span class="keyword">private</span> PriorityQueue&lt;Integer&gt; q;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KthLargestElementInaStream</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        q = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Integer&gt;(k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums) &#123;</span><br><span class="line">            add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (q.size() &lt; k) &#123;</span><br><span class="line">            q.offer(val);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (q.peek() &lt; val) &#123;</span><br><span class="line">            q.poll();</span><br><span class="line">            q.offer(val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><code>PriorityQueue&lt;Integer&gt; queue = new PriorityQueue&lt;&gt;(1);</code>这样一个优先队列，将数组<code>[8, 5, 4, 12, 3]</code>按顺序执行<code>offer(element)</code>方法，打印的结果是<code>[3, 4, 5, 12, 8]</code>，在执行<code>offer(1)</code>，打印的结果是<code>[1, 4, 3, 12, 8, 5]</code>。排序就是在二叉树的基础上，叶子节点和父节点比大小，比父节点大，交换位置，直到比父节点小或到根节点。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 小顶堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode #367 有效的完全平方数</title>
      <link href="/post/6d8c47a0-9353-11ea-9bbb-9b051857d619/"/>
      <url>/post/6d8c47a0-9353-11ea-9bbb-9b051857d619/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>给定一个正整数 num，编写一个函数，如果 num 是一个完全平方数，则返回 True，否则返回 False。</p><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><p>不要使用任何内置的库函数，如：<code>sqrt</code>。</p><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><ul><li>示例1：<ul><li>输入：16</li><li>输出：True</li></ul></li><li>示例2：<ul><li>输入：14</li><li>输出：False</li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="1-暴力法"><a href="#1-暴力法" class="headerlink" title="1. 暴力法"></a>1. 暴力法</h2><p>可以无限优化的方法，其优化的核心就在于循环的起始和终止，效率很低不考虑。</p><h2 id="2-根区间-二分法"><a href="#2-根区间-二分法" class="headerlink" title="2. 根区间&amp;二分法"></a>2. 根区间&amp;二分法</h2><ol><li>Java里int的最大值是0x7fffffff，也就是1<sup>32</sup>-1（2147483647），大约21亿。最大值的平方根约等于46340。那我不是根据整数的位数来得到一个计算的区间，这样不是能有效缩小循环的次数了吗？</li><li>比如1位数和2位数[10, 99]，平方根一定是落在[1, 10)，比如3位数[100, 999]，平方根一定是落在[10, 32)，比如4位数[1000, 9999]，平方根一定是落在[31, 100)；</li><li>当这个数很大的话（最大为2147483647），相应的区间也会变大，但是区间最大的反而是9位数，因为10位数最大只到2147483647；</li><li>我们根据整数的长度取得平方根的区间后可以根据二分查找法，将平均时间复杂度降低。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] se = interval(String.valueOf(num).length());</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> se[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> se[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (mid * mid &lt; num) &#123;</span><br><span class="line">                <span class="keyword">if</span> (right - left == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mid * mid == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (right - left == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] interval(<span class="type">int</span> len) &#123;</span><br><span class="line">        <span class="type">int</span> start;</span><br><span class="line">        <span class="type">int</span> end;</span><br><span class="line">        <span class="keyword">switch</span> (len) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                start = <span class="number">10</span>;</span><br><span class="line">                end = <span class="number">32</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                start = <span class="number">31</span>;</span><br><span class="line">                end = <span class="number">100</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                start = <span class="number">100</span>;</span><br><span class="line">                end = <span class="number">317</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                start = <span class="number">316</span>;</span><br><span class="line">                end = <span class="number">1000</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                start = <span class="number">1000</span>;</span><br><span class="line">                end = <span class="number">3163</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                start = <span class="number">3162</span>;</span><br><span class="line">                end = <span class="number">10000</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                start = <span class="number">10000</span>;</span><br><span class="line">                end = <span class="number">31623</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                start = <span class="number">31622</span>;</span><br><span class="line">                end = <span class="number">46341</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                start = <span class="number">1</span>;</span><br><span class="line">                end = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;start, end&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color = red><strong>注意：</strong></font>二分法有一个很需要注意的点，就是求中间值<code>mid</code>的计算公式。一般最好不要直接这样做：<code>(left + right) / 2</code>，因为很有可能在<code>left + right</code>的过程中就溢出了，算出来是负数的。改成long类型或者这样算：<code>left + (right - left) / 2</code>。</p><p>两个点优化之后，即使一个很大的数字也不需要经过几次的查找便可知道是否是完全平方数。以上算法的时间复杂度为<em>O</em>(1) + <em>O</em>(log<sub>2</sub><em>n</em>) &#x3D; <em>O</em>(log<sub>2</sub><em>n</em>)。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode #225 用队列实现栈</title>
      <link href="/post/24861850-89c2-11ea-9ae2-d515fd713cdf/"/>
      <url>/post/24861850-89c2-11ea-9ae2-d515fd713cdf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><ul><li>使用队列实现栈的下列操作：<ul><li>push(x) – 元素 x 入栈</li><li>pop() – 移除栈顶元素</li><li>top() – 获取栈顶元素</li><li>empty() – 返回栈是否为空</li></ul></li></ul><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><ul><li>你只能使用队列的基本操作– 也就是 push to back, peek&#x2F;pop from front, size, 和 is empty 这些操作是合法的。</li><li>你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li><li>你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。</li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="1-双向队列Deque实现"><a href="#1-双向队列Deque实现" class="headerlink" title="1. 双向队列Deque实现"></a>1. 双向队列Deque实现</h2><p>利用双端队列Deque接口的实现类LinkedList可以很简洁的完成，Deque拥有一个<code>boolean offerFirst(E e);</code>方法。因为底层是双向链表，prev和next指针可以很好帮你实现头尾乱♂插。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    Deque&lt;Integer&gt; deque;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        deque.offerFirst(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> deque.remove() ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> deque.element();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> deque.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-双队列形成一个闭环"><a href="#2-双队列形成一个闭环" class="headerlink" title="2. 双队列形成一个闭环"></a>2. 双队列形成一个闭环</h2><ol><li>2个单向队列queue和reverseQueue；</li><li>queue初次push时，判断是否为空，为空直接调用offer方法；</li><li>当queue不为空时，将所有的元素从头部出队，入队到reverseQueue。queue入队新的元素；</li><li>这时两个队列，queue只有新的元素在队列中，reverseQueue拥有queue刚刚出队的元素；</li><li>再次将reverseQueue的元素循环出队到queue，保证每次调用push方法时，该队列是空的；</li><li>两个单项队列变成闭环。</li></ol><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/leetcode/225-queue.png" alt="闭环过程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    Queue&lt;Integer&gt; queue;</span><br><span class="line">    Queue&lt;Integer&gt; reverseQueue;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        reverseQueue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 利用两个单向队列</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (queue.isEmpty()) &#123;</span><br><span class="line">            queue.offer(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reverseQueue.addAll(queue);</span><br><span class="line">            queue.clear();</span><br><span class="line">            queue.offer(x);</span><br><span class="line">            queue.addAll(reverseQueue);</span><br><span class="line">            reverseQueue.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.element();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-单个单向队列"><a href="#3-单个单向队列" class="headerlink" title="3. 单个单向队列"></a>3. 单个单向队列</h2><p>其中注意：不要使用自身的forEach方法，根据队列的长度搞个循环即可。</p><p>push方法核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 单个单向队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    singleQueue.add(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; singleQueue.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        singleQueue.add(singleQueue.poll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意是<code>size - 1</code>。因为最新add的那个元素不需要执行<code>poll</code>方法。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 栈 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构：Queue</title>
      <link href="/post/2d52f0e0-892f-11ea-8e9a-97d863cbb17c/"/>
      <url>/post/2d52f0e0-892f-11ea-8e9a-97d863cbb17c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>先进先出，一种特殊的线性表，只允许表在一端进行获取操作，在另一端进行插入操作。当不存在元素时，则为空队列。自从 <code>BlockingQueue</code>（阻塞队列）问世以来，队列的地位得到极大地提升，在各种高并发编程的场景，经常被作为 Buffer（数据缓冲区）使用。</p><p>通常我们把<strong>LinkedList</strong>当成Queue来用，Queue类<strong>自身</strong>的一些方法：</p><table><thead><tr><th align="left">方法</th><th align="left">方法描述</th></tr></thead><tbody><tr><td align="left"><code>boolean add(E e)</code></td><td align="left">入队一个元素至队尾</td></tr><tr><td align="left"><code>boolean offer(E e);</code></td><td align="left">入队一个元素至队尾</td></tr><tr><td align="left"><code>E remove()</code></td><td align="left">从头部出队一个元素</td></tr><tr><td align="left"><code>E poll()</code></td><td align="left">从头部出队一个元素</td></tr><tr><td align="left"><code>E element()</code></td><td align="left">查询头元素</td></tr><tr><td align="left"><code>E peek()</code></td><td align="left">查询头元素</td></tr></tbody></table><p>以下摘自<a href="https://www.runoob.com/java/data-queue.html">菜鸟教程</a>：</p><ul><li><p><strong>offer，add 区别：</strong></p><ul><li>一些队列有大小限制，因此如果想在一个满的队列中加入一个新项，多出的项就会被拒绝。</li><li>这时新的<code>offer()</code>方法就可以起作用了。它不是对调用<code>add()</code>方法抛出一个unchecked异常，而只是得到由<code>offer()</code>返回的false。</li></ul></li><li><p><strong>poll，remove 区别：</strong></p><ul><li><code>remove()</code>和<code>poll()</code>方法都是从队列中删除第一个元素。<code>remove()</code>的行为与Collection接口的版本相似， 但是新的<code>poll()</code>方法在用空集合调用时不是抛出异常，只是返回null。因此新的方法更适合容易出现异常条件的情况。</li></ul></li><li><p><strong>peek，element区别：</strong></p><ul><li><code>element()</code>和<code>peek()</code>用于在队列的头部查询元素。与 remove() 方法类似，在队列为空时，<code>element()</code>抛出一个异常，而<code>peek()</code>返回null。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 队列 </tag>
            
            <tag> Queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode #169 多数元素</title>
      <link href="/post/7b2e8940-851b-11ea-95ec-5b4f96ed301b/"/>
      <url>/post/7b2e8940-851b-11ea-95ec-5b4f96ed301b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 <code>⌊ n/2 ⌋</code> 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><ul><li><p>示例 1:</p><ul><li>输入: <code>[3,2,3]</code></li><li>输出: <code>3</code></li></ul></li><li><p>示例 2:</p><ul><li>输入: <code>[2,2,1,1,1,2,2]</code></li><li>输出: <code>2</code></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="1-Hash表"><a href="#1-Hash表" class="headerlink" title="1. Hash表"></a>1. Hash表</h2><p>首先最容易想到的，利用Hash表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(nums.length / <span class="number">3</span> * <span class="number">4</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> nums.length / <span class="number">2</span>;</span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    map.forEach((k, v) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &gt; max) &#123;</span><br><span class="line">            result.set(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>key</code>来保存数组的元素，<code>value</code>来保存出现的次数。</p><p>因为众数的个数一定是大于n&#x2F;2的，所以只要取出<code>value</code>大于n&#x2F;2的<code>key</code>即可。</p><h2 id="2-随机流-暴力流"><a href="#2-随机流-暴力流" class="headerlink" title="2. 随机流&amp;暴力流"></a>2. 随机流&amp;暴力流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">thirdMethod</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * nums.length);</span><br><span class="line">    <span class="type">int</span> <span class="variable">fuck</span> <span class="operator">=</span> nums[index];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == fuck) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; nums.length / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[index];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == (nums.length - <span class="number">1</span>)) &#123;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            i = -<span class="number">1</span>;</span><br><span class="line">            index = (<span class="type">int</span>) (Math.random() * nums.length);</span><br><span class="line">            fuck = nums[index];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>众数在题干中明确说明了个数是n&#x2F;2，一定是占据一半以上的，所以随机抽取一个元素，较大可能性是众数。统计该元素的个数，符合个数大于n&#x2F;2即可。一开始设置第一个元素为众数统计个数，全部遍历后如果不符合，则设置第二个元素为基准继续遍历。这样其实就和双for循环没什么区别了，不具随机性。</p><p>我一开始做法就是设置第一个元素为基准，这样写的最大时间复杂度是平方级 <em>O</em>(<em>n</em><sup>2</sup>)，一旦众数全部位于数组的后半段，那么时间会超久，所以我这样提交，系统判定超出时间限制。</p><p>官方题解是随机设置一个基准，理想情况是众数较多，很容易抽中，较少的次数可以完成推断，但是存在一种极限情况，就是每次随机基准都抽不到众数，那么会变成无穷尽的计算。最坏情况的时间复杂度为 <em>O</em>(∞)。</p><h2 id="3-排序流"><a href="#3-排序流" class="headerlink" title="3. 排序流"></a>3. 排序流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">secondMethod</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">return</span> nums[nums.length / <span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>充分利用了n&#x2F;2的特性，将数组排序后，无论数组的长度是奇数还是偶数，第<code>nums.length / 2</code> 一定是众数。</p><h2 id="4-投票流"><a href="#4-投票流" class="headerlink" title="4. 投票流"></a>4. 投票流</h2><p>该方法个人认为最有意思和最有拓展性。假设这样一个数组：</p><p><code>[7, 7, 5, 7, 5, 1 | 5, 7 | 5, 5, 7, 7 | 7, 7, 7, 7]</code></p><ol><li>初始化被选举人（elector）为第一个数，设定count &#x3D; 1，然后开始遍历；</li><li>当nextValue &#x3D;&#x3D; elector，count + 1，反之 - 1；</li><li>当count &#x3D;&#x3D; 0时，且存在nextValue时，nextValue成为下一个elector，count &#x3D; 1；</li><li>最终的选举人一定是那个众数</li></ol><p>因为众数的个数一定是大于其它数字的和，所以相减一定大于0，最后剩下的被投票的那个元素一定是众数。</p><p>所以上述的数组，票数就是<code>[1, 2, 1, 2, 1, 0 | 1, 0 | 1, 2, 1, 0 | 1, 2, 3, 4 </code></p><p>遍历到数组的最后阶段，elector是<code>7</code>，后面票数越来越多，也不会被更换elector了。即使是众数都在前面</p><p><code>[7, 7, 7, 7, 7, 1, 5, 5 ]</code>，众数的和也够减去后半段的其他元素的总和而保证elector不被更换。</p><p>该思想不复杂实现起来非常简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">boyerMoore</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">elector</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == elector) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 上面的if-else可以改成这样</span></span><br><span class="line"><span class="comment">         * count += (nums[i] == elector) ? 1 : -1;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; nums.length &amp;&amp; count == <span class="number">0</span>) &#123;</span><br><span class="line">            elector = nums[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elector;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode #155 最小栈</title>
      <link href="/post/51044580-839d-11ea-a80d-c79a78360d60/"/>
      <url>/post/51044580-839d-11ea-a80d-c79a78360d60/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li>push(x) —— 将元素 x 推入栈中。</li><li>pop() —— 删除栈顶的元素。</li><li>top() —— 获取栈顶元素。</li><li>getMin() —— 检索栈中的最小元素。</li></ul><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="type">MinStack</span> <span class="variable">minStack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MinStack</span>();</span><br><span class="line"><span class="number">2.</span> minStack.push(-<span class="number">2</span>);</span><br><span class="line"><span class="number">3.</span> minStack.push(<span class="number">0</span>);</span><br><span class="line"><span class="number">4.</span> minStack.push(-<span class="number">3</span>);</span><br><span class="line"><span class="number">5.</span> minStack.getMin();   ==&gt; 返回 -<span class="number">3.</span></span><br><span class="line"><span class="number">6.</span> minStack.pop();</span><br><span class="line"><span class="number">7.</span> minStack.top();      ==&gt; 返回 <span class="number">0.</span></span><br><span class="line"><span class="number">8.</span> minStack.getMin();   ==&gt;返回 -<span class="number">2.</span></span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>该题很简单，但是有意思的是，我的解法也算通过了，虽然题目说</p><blockquote><p>在常数时间内检索到最小元素的栈。</p></blockquote><p>但是这里应该指的是<code>getMin()</code>这个方法，所以即使我的<code>push(Object obj)</code>方法复杂度比较高也没关系。。</p><p>因为有删除元素（pop方法）的存在，所以最小值在push完之后还是会随时变。所以单纯使用一个变量来保存最小值是不可能的。</p><p>我使用了双栈来实现，实际不用双栈用其他的数据结构也可以。大概原理就是在push的过程中，一个标准stack正常push，另一个辅助栈从栈底到栈顶从小到大排序的插入，利用了Stack的父类（Vector）方法<code>insertElementAt(Object obj, int i)</code>，这里注意index是第二个参数。pop时，标准stack正常pop，辅助stack只需要remove标准stack刚刚pop返回的对象即可<code>minStack.remove(stack.pop());</code>。这样确保两栈移除的元素是相同的。</p><h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; minStack;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行用时 : 6 ms , 在所有 Java 提交中击败了 97.91% 的用户</span></span><br><span class="line"><span class="comment">     * 内存消耗 : 41.7 MB , 在所有 Java 提交中击败了 14.46% 的用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack</span><span class="params">()</span> &#123;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        minStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        stack.push(x);</span><br><span class="line">        <span class="keyword">if</span> (minStack.empty()) &#123;</span><br><span class="line">            minStack.push(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= minStack.peek()) &#123;</span><br><span class="line">            minStack.push(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= minStack.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x &lt; minStack.get(i)) &#123;</span><br><span class="line">                    minStack.insertElementAt(x, i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        minStack.remove(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minStack.firstElement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MinStack&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;stack=&quot;</span> + stack +</span><br><span class="line">                <span class="string">&quot;, minStack=&quot;</span> + minStack +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MinStack</span> <span class="variable">minStack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MinStack</span>();</span><br><span class="line">        minStack.push(-<span class="number">2</span>);</span><br><span class="line">        minStack.push(<span class="number">0</span>);</span><br><span class="line">        minStack.push(-<span class="number">3</span>);</span><br><span class="line">        minStack.push(-<span class="number">11</span>);</span><br><span class="line">        minStack.push(-<span class="number">1</span>);</span><br><span class="line">        System.out.println(minStack.toString());</span><br><span class="line">        System.out.println(minStack.getMin());</span><br><span class="line">        minStack.pop();</span><br><span class="line">        minStack.top();</span><br><span class="line">        System.out.println(minStack.getMin());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h1><p>虽然我这样做是通过的，但其实我想的不够多，看了高赞的题解，即使是利用辅助栈push方法时间复杂度也可以不到线性级 <em>O</em>(<em>n</em>)。</p><p>因为题目是说了设计的该栈对于移除元素只有pop方法，就是从栈顶移除，也就是说next元素比当前顶部元素大的话，就没必要保留了，因为在只有pop方法的情况下，该元素一定是先被移除的。所以在条件下辅助栈可以不需要把所有元素保存。</p><p>除非题目加一个删除中间某个元素的方法的条件。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/leetcode/155-stack.png" alt="入栈过程"></p><p>当然还有不用辅助栈的做法，利用压栈。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 栈 </tag>
            
            <tag> stack </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构：栈</title>
      <link href="/post/3d28b600-8397-11ea-bfe6-d727069c8da8/"/>
      <url>/post/3d28b600-8397-11ea-bfe6-d727069c8da8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>last-in-first-out</code>，后进先出是它最大的特点。<code>class Stack&lt;E&gt; extends Vector&lt;E&gt; </code>作为Vector的子类。</p><p>Vector底层使用数组存储数据，所以Stack也是如此。</p><p>Stack类<strong>自身</strong>的一些方法：</p><table><thead><tr><th align="left">方法</th><th align="left">方法描述</th></tr></thead><tbody><tr><td align="left"><code>boolean empty()</code></td><td align="left">测试堆栈是否为空。</td></tr><tr><td align="left"><code>Object peek()</code></td><td align="left">查看堆栈顶部的对象，但不从堆栈中移除它。</td></tr><tr><td align="left"><code>Object pop()</code></td><td align="left">移除堆栈顶部的对象，并作为此函数的值返回该对象。</td></tr><tr><td align="left"><code>Object push(E item)</code></td><td align="left">把项压入堆栈顶部。</td></tr><tr><td align="left"><code>int search(Object o)</code></td><td align="left">返回距离栈顶最近的相同元素的距离，返回对象在堆栈中的位置，以 1 为基数。</td></tr></tbody></table><p>其中search方法比较特殊，返回的是该元素的位置，但是从1开始的，这个不是数组下标。源码里是这样写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lastIndexOf(o);</span><br><span class="line"><span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> size() - i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果该栈不存在任何元素，使用pop和peek方法会报NPE。</p><p>以上方法都是用了<code>synchronized</code>进行修饰，确保线程同步。</p><h1 id="父类方法（未完待续…）"><a href="#父类方法（未完待续…）" class="headerlink" title="父类方法（未完待续…）"></a>父类方法（未完待续…）</h1>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 栈 </tag>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虐猫事件思考「虐」的定义</title>
      <link href="/post/41de2f70-7d4f-11ea-b18b-ad951eb7124e/"/>
      <url>/post/41de2f70-7d4f-11ea-b18b-ad951eb7124e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>我们需要一个上帝吗？</p></blockquote><h1 id="自我解释"><a href="#自我解释" class="headerlink" title="自我解释"></a>自我解释</h1><p>小时候会觉得虐待动物是不道德错误的、或者说是心理问题、性格缺陷。长大后慢慢的看待问题不会在只关注事件本身，局限的从一两个点出发，开始学会多角度切入会去思考，怎么样算「虐待」呢？我们可以假定动物本身是抗拒这种被「虐待」的行为，那么绝育、关笼子、指令教学为什么就不能算「虐待」呢？人们会说我们还是给了他一定的自由、给了它充足的食物和安全的环境，至少比在野外流浪好吧！我们不懂动物的语言交流方式，暂时无法得到这些动物的真实想法。所谓的一切说辞都不过是人给的定义罢和自我解释罢了。</p><p>现代汉语词典里，「虐待」一词指的是：</p><blockquote><p>用残暴的手段对待。</p></blockquote><p>当然也是人定义的。</p><h1 id="每一个人都有对事物的行为都有自己的理解"><a href="#每一个人都有对事物的行为都有自己的理解" class="headerlink" title="每一个人都有对事物的行为都有自己的理解"></a>每一个人都有对事物的行为都有自己的理解</h1><ul><li>他认为将动物绝育是比失去生命更罪大恶极的，即使绝育有他万千的好处和理由；</li><li>他认为猫狗不如人类，没有道德荣辱价值观，有个舒适安全的生存环境便是上天对它最好的馈赠；</li><li>他认为用残忍手段虐杀动物是非常具有道德问题的，对生命没有敬畏之心，缺少共情能力；</li><li>他认为养宠物和虐杀完全是两种态度，一种出发点是为了宠物好（当然也有自己的私欲），另一种是单纯的恶（完完全全是为了满足自己的私欲）；</li><li>他认为网络上也有不少利用各种手段（电击、火烤）折磨蟑螂水蛭蚂蚁的，它们也是生命，它们不过也是用一种方式活着而已。它们并不会得到人类的同情一是相貌问题二是因为部分害虫与人类利益冲突，对人类有害。</li></ul><p>各执一词，谁都说服不了谁。因为谁都可以给「虐待」再附加上定义。</p><p>范源庆此次的虐猫事件来说，首先在法律上，目前还未成立虐待动物罪，学生本身通过拍摄相关的视频牟利是否存在问题不予置评。</p><p>人与人之间出现虐待、伤害事件不会像人与动物一样难以定性，法治社会里法律是服务于人本身的，为人的行为而制定，以人为本，维持一个社会的基本稳定。在人类统治陆地上的这段时间里，永远是人凌驾于万物之上的，吃人杀人犯法吗？除了正当防卫肯定犯法。我们想好好活着都得遵守这个规则。</p><p>想到一个搞笑gif图形容不会做饭：一个人将活鱼直接丢入烧锅，鱼下锅后随即发疯似的乱跳，油飞溅了整个厨房。本身是一个搞笑的gif图，但是我看到的第一感觉是残忍。以前有个传闻（大概率编造，网络上鲜有相关资料），在德国爱吃鱼的家庭常被一种药丸，在杀鱼之前往往会先让鱼服下这种药丸，待鱼昏迷之后在进行宰杀。每个人都有着自己的三观，带着自己的思维和理解在做人做事。</p><p>人类需要有一个上帝吗…</p>]]></content>
      
      
      <categories>
          
          <category> 点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虐猫 </tag>
            
            <tag> 虐待 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro与分布式Session与Redis的那些坑</title>
      <link href="/post/cc8d9450-6ff6-11ea-a44c-898e22d16291/"/>
      <url>/post/cc8d9450-6ff6-11ea-a44c-898e22d16291/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="需要知道的点"><a href="#需要知道的点" class="headerlink" title="需要知道的点"></a>需要知道的点</h1><p>Shiro的Session支持企业级的特性，例如分布式缓存。我们在Spring Data Redis + Shiro的方案中需要注意下以下几点：</p><ol><li>无论Redis服务是单机还是集群模式，都需要注意Session对象的序列化与反序列化的问题；</li><li>Shiro的<strong>Session</strong>：定义好的一个接口；<strong>Simple Session</strong>：一个它的简单实现，我们想要实现持久化就需要对它进行维护；</li><li><strong>EnterpriseCacheSessionDAO</strong>：Session对象的增删改查，可以对<strong>Session对象</strong>进行下一步的定制化操作（个人理解），所以我们可以通过覆写它的方法来达到我们想要的持久化效果。以下4个方法是对Session的持久化处理：<ul><li>doCreate</li><li>doUpdate</li><li>doReadSession</li><li>doDelete</li></ul></li><li><strong>SessionManager</strong>：对<strong>EnterpriseCacheSessionDAO</strong>创建好的Session对象交给<strong>SessionManager</strong>。它管理着Session的创建、操作以及清除等；<strong>DefaultSessionManager</strong>：具体实现，默认的web应用Session管理器，主要是涉及到Session和Cookies，涉及到的行为：添加、删除SessionId到Cookie、读取Cookie获得SessionId；</li><li><strong>SessionId</strong>：得到Session的关键</li><li><strong>securityManager</strong>：这是Shiro框架的核心组件，可以把他看做是一个Shiro框架的全局管理组件，用于调度各种Shiro框架的服务。我们需要将自定义的<strong>sessionManager</strong>交给它</li></ol><h1 id="Session持久化"><a href="#Session持久化" class="headerlink" title="Session持久化"></a>Session持久化</h1><p>上面写到如果想定制化我们的持久化效果，就必须覆写它的方法，所以我们需要新创建一个类<code>SessionRedisDao</code>来继承<code>EnterpriseCacheSessionDAO</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionRedisDao</span> <span class="keyword">extends</span> <span class="title class_">EnterpriseCacheSessionDAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入的是byteRedisTemplate，只用于byte[]类型的序列化存储在redis中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, <span class="type">byte</span>[]&gt; redisTemplate;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SessionRedisDao</span><span class="params">(<span class="meta">@Qualifier(&quot;byteRedisTemplate&quot;)</span> RedisTemplate&lt;String, <span class="type">byte</span>[]&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建session，保存到数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Serializable <span class="title function_">doCreate</span><span class="params">(Session session)</span> &#123;</span><br><span class="line">        <span class="type">Serializable</span> <span class="variable">sessionId</span> <span class="operator">=</span> <span class="built_in">super</span>.doCreate(session);</span><br><span class="line">        System.out.println(<span class="string">&quot;===============【 &quot;</span> + sessionId + <span class="string">&quot; 】 创建了session！================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        BoundValueOperations&lt;String, <span class="type">byte</span>[]&gt; boundValueOperations = redisTemplate.boundValueOps(SHIRO_SESSION + sessionId.toString());</span><br><span class="line">        boundValueOperations.set(sessionToByte(session), <span class="number">240</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sessionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sessionId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Session <span class="title function_">doReadSession</span><span class="params">(Serializable sessionId)</span> &#123;</span><br><span class="line">        <span class="comment">// 先从缓存中获取session，如果没有再去数据库中获取</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> <span class="built_in">super</span>.doReadSession(sessionId);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;===============【 &quot; + sessionId + &quot; 】 获取了session！================&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(session == <span class="literal">null</span>)&#123;</span><br><span class="line">            BoundValueOperations&lt;String, <span class="type">byte</span>[]&gt; boundValueOperations = redisTemplate.boundValueOps(SHIRO_SESSION + sessionId.toString());</span><br><span class="line">            <span class="type">byte</span>[] bytes = (boundValueOperations.get());</span><br><span class="line">            <span class="keyword">if</span>(bytes != <span class="literal">null</span> &amp;&amp; bytes.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                session = byteToSession(bytes);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新session的最后一次访问时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doUpdate</span><span class="params">(Session session)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.doUpdate(session);</span><br><span class="line">        System.out.println(<span class="string">&quot;===============【 &quot;</span> + session.getId() + <span class="string">&quot; 】 更新了session！================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        BoundValueOperations&lt;String, <span class="type">byte</span>[]&gt; boundValueOperations = redisTemplate.boundValueOps(SHIRO_SESSION + session.getId().toString());</span><br><span class="line">        boundValueOperations.set(sessionToByte(session), <span class="number">240</span>, TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDelete</span><span class="params">(Session session)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===============【 &quot;</span> + session.getId() + <span class="string">&quot; 】 删除了session！================&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.doDelete(session);</span><br><span class="line">        redisTemplate.delete(SHIRO_SESSION + session.getId().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把session对象转化为byte保存到redis中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] sessionToByte(Session session)&#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bo);</span><br><span class="line">            oo.writeObject(session);</span><br><span class="line">            bytes = bo.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把byte还原为session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Session <span class="title function_">byteToSession</span><span class="params">(<span class="type">byte</span>[] bytes)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        ObjectInputStream in;</span><br><span class="line">        <span class="type">SimpleSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bi);</span><br><span class="line">            session = (SimpleSession) in.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像看起来和网上的其他技术文章的实现差不多，但是还有差啦（迷之台湾腔？）</p><p>首先是关于<code>RedisTemplate</code>客户端的注入使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, <span class="type">byte</span>[]&gt; redisTemplate;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SessionRedisDao</span><span class="params">(<span class="meta">@Qualifier(&quot;byteRedisTemplate&quot;)</span> RedisTemplate&lt;String, <span class="type">byte</span>[]&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里看到key和value的类型<code>&lt;String, byte[]&gt;</code>，不是常规的<code>&lt;String, Object&gt;</code>，因为我在以下序列化工具中以json字符串的形式存储在Redis：</p><ol><li><code>FastJsonRedisSerializer</code></li><li><code>GenericJackson2JsonRedisSerializer</code></li><li><code>Jackson2JsonRedisSerializer</code></li></ol><p>发现在执行<code>doUpdate</code>方法后，Redis当中会增加一些Simple Session没有字段，比如<code>&quot;valid&quot;:true</code>等等，所以在反序列化获取Session对象的过程中会抛出如下异常：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Could not read JSON: Cannot construct instance of`org.apache.shiro.web.util.SavedRequest` (no Creators, like default construct, exist): cannot deserialize from Object value (no delegate- or property-based Creator)↵ at [Source: (byte[])&quot;[&quot;org.apache.shiro.session.mgt.SimpleSession&quot;</span><br></pre></td></tr></table></figure><blockquote><p>我突然就想到了《码出高效》里面，有说过POJO类不要使用isXxx作为变量的形式</p></blockquote><p>当然这里也没发现存在 <code>isXxx</code>的成员变量，只看到了 <code>isValid()</code>方法，以及 <code>isStoped()</code>方法也没有对应的 <code>stoped</code> 成员属性。可能是在反序列化的过程中，通过Redis里的键值对发现，<strong>SimpleSession</strong>并没有这个 <code>boolean </code>类型的 <code>valid</code>变量而导致错误。不知道是不是算Shiro的Simple Session一个Bug。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/shiro%E5%88%86%E5%B8%83%E5%BC%8Fsession/isValid.png" alt="反序列化造成的问题"></p><h1 id="解决手段"><a href="#解决手段" class="headerlink" title="解决手段"></a>解决手段</h1><p><strong>目前个人找到的解决的方法是使用<code>byte[]</code>字节流存储，且用默认的JDK序列化工具<code>JdkSerializationRedisSerializer</code>。</strong></p><h1 id="Redis配置序列化工具"><a href="#Redis配置序列化工具" class="headerlink" title="Redis配置序列化工具"></a>Redis配置序列化工具</h1><p>因为可能在代码其他处已经使用了其他序列化工具操作Redis了，所以这里建议重新写一个Bean的方法专门用于Shiro安全框架的Session操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(name = &quot;byteRedisTemplate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;String, <span class="type">byte</span>[]&gt; byteRedisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;</span><br><span class="line">    RedisTemplate&lt;String, <span class="type">byte</span>[]&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">    redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">    <span class="type">JdkSerializationRedisSerializer</span> <span class="variable">jdkSerializationRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdkSerializationRedisSerializer</span>();</span><br><span class="line">    <span class="comment">// 全局开启AutoType，不建议使用</span></span><br><span class="line">    <span class="comment">// ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span></span><br><span class="line">    <span class="comment">// 建议使用这种方式，小范围指定白名单</span></span><br><span class="line">    ParserConfig.getGlobalInstance().addAccept(<span class="string">&quot;com.zrtg.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置值（value）的序列化采用jdkSerializationRedisSerializer。</span></span><br><span class="line">    redisTemplate.setValueSerializer(jdkSerializationRedisSerializer);</span><br><span class="line">    redisTemplate.setHashValueSerializer(jdkSerializationRedisSerializer);</span><br><span class="line">    <span class="comment">// 设置键（key）的序列化采用StringRedisSerializer。</span></span><br><span class="line">    redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">    redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">    redisTemplate.afterPropertiesSet();</span><br><span class="line">    log.info(<span class="string">&quot;MatthewHan: [ byteRedisTemplate启动，鸡你实在是太美! ] &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在需要注入的地方，加入<code>@Qualifier</code>注解即可，像这样：<code>@Qualifier(&quot;byteRedisTemplate&quot;) RedisTemplate&lt;String, byte[]&gt; redisTemplate</code>。</p><h1 id="并入管理"><a href="#并入管理" class="headerlink" title="并入管理"></a>并入管理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DefaultWebSessionManager <span class="title function_">sessionManager</span><span class="params">(SessionRedisDao sessionRedisDao)</span> &#123;</span><br><span class="line">    <span class="type">DefaultWebSessionManager</span> <span class="variable">sessionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSessionManager</span>();</span><br><span class="line"></span><br><span class="line">    sessionManager.setSessionIdCookie(remeberMeCookie());</span><br><span class="line">    sessionManager.setGlobalSessionTimeout(<span class="number">14400000L</span>);</span><br><span class="line">    sessionManager.setDeleteInvalidSessions(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 将写好的缓存sessionDao注入</span></span><br><span class="line">    sessionManager.setSessionDAO(sessionRedisDao);</span><br><span class="line">    sessionManager.setSessionValidationSchedulerEnabled(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sessionManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入 securityManager</span></span><br><span class="line"><span class="comment"> * 将写好的缓存sessionDao注入</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sessionRedisDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> customRealmConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityManager <span class="title function_">securityManager</span><span class="params">(SessionRedisDao sessionRedisDao, CustomRealmConfig customRealmConfig)</span> &#123;</span><br><span class="line">    <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">    <span class="comment">// 设置realm</span></span><br><span class="line">    securityManager.setRealm(customRealmConfig);</span><br><span class="line">    <span class="comment">// 注入Cookie记住我管理器</span></span><br><span class="line">    securityManager.setRememberMeManager(<span class="literal">null</span>);</span><br><span class="line">    securityManager.setSessionManager(sessionManager(sessionRedisDao));</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注意rememberMe的Cookies管理，以及<code>sessionManager.setGlobalSessionTimeout(14400000L);</code>和Redis设置的过期时间保持一致即可。</p>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Shiro </tag>
            
            <tag> Session </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《码出高效》系列笔记（四）：元素的比较</title>
      <link href="/post/31c8add0-69af-11ea-ad58-59a2dd622848/"/>
      <url>/post/31c8add0-69af-11ea-ad58-59a2dd622848/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇汲取了本书中较为精华的知识要点和实践经验加上读者整理，作为本系列里的第四篇章第三节：数据结构与集合的元素的比较篇。</p><p><strong>本系列目录</strong>：</p><ul><li><a href="https://www.yuanmo.xyz/post/0bdf0b10-c25b-11e9-9d06-1f20e5bd3f76/">《码出高效》系列笔记（一）：面向对象中的类</a></li><li><a href="https://www.yuanmo.xyz/post/b1acf8e0-c89b-11e9-9ee1-01379c6f9115/">《码出高效》系列笔记（一）：面向对象中的方法</a></li><li><a href="https://www.yuanmo.xyz/post/3239f2f0-c89d-11e9-89c4-bd64deffb20f/">《码出高效》系列笔记（一）：面向对象中的其他知识点</a></li><li><a href="https://www.yuanmo.xyz/post/d5aea070-d2ac-11e9-ab1f-f97e9fd39695/">《码出高效》系列笔记（二）：代码风格</a></li><li><a href="https://www.yuanmo.xyz/post/43892940-eb34-11e9-8e01-011debd967415/">《码出高效》系列笔记（三）：异常与日志</a></li><li><a href="https://www.yuanmo.xyz/post/025b9630-626f-11ea-8f75-554d885c423a/">《码出高效》系列笔记（四）：数据结构与集合的框架</a></li><li><a href="https://www.yuanmo.xyz/post/d6e37130-64cb-11ea-a19c-b3eaacf8ea9d/">《码出高效》系列笔记（四）：数据结构与集合的数组和泛型</a></li><li><a href="https://www.yuanmo.xyz/post/31c8add0-69af-11ea-ad58-59a2dd622848/">《码出高效》系列笔记（四）：元素的比较</a></li><li><a href="https://www.yuanmo.xyz/post/5a0667d0-fd7d-11ea-ad87-11fe3cadc827/">走进JVM之内部布局</a></li><li><a href="https://www.yuanmo.xyz/post/132bab40-fcc4-11ea-ab6f-7dc412045e4d/">走进JVM之字节码与类加载</a></li><li><a href="https://www.yuanmo.xyz/post/bd0fa690-fcae-11ea-897f-29deed537cb3/">走进JVM之GC</a></li></ul><h1 id="元素的比较"><a href="#元素的比较" class="headerlink" title="元素的比较"></a>元素的比较</h1><h2 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h2><p>Java中两个对象相比较的方法通常用在元素排序中，常用的两个几口分别是Comparable和Comparator，前者是自己和自己比；后者是第三方比较器，类似于平台性质的比较器。</p><p>我们熟知的Integer和String实现的就是Comparable的自然排序。</p><p>假设在一个搜索列表中进行排序时，先根据相关度排序，然后再根据浏览数排序，那么可以利用Comparable这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SearchResult</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;EzCodingTest&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相关度</span></span><br><span class="line">    <span class="type">int</span> relativeRatio;</span><br><span class="line">    <span class="type">long</span> count;</span><br><span class="line">    <span class="type">int</span> recentOrders;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SearchResult</span><span class="params">(<span class="type">int</span> relativeRatio, <span class="type">long</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.relativeRatio = relativeRatio;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(EzCodingTest o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.relativeRatio != o.relativeRatio) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.relativeRatio &gt; o.relativeRatio ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.count != o.count) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.count &gt; o.count ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">EzCodingTest</span> <span class="variable">result1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EzCodingTest</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="type">EzCodingTest</span> <span class="variable">result2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EzCodingTest</span>(<span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(result1.compareTo(result2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实现Comparable时，我们发现了需要加上泛型限定，<code>public class EzCodingTest implements Comparable&lt;EzCodingTest&gt;</code>，这样的话，可以在编译阶段就判断是否符合该定义的对象。当排序方法不符合当前的业务要求，重写该比较方法<code>compareTo</code>，因为开闭原则的关系，已交付的类进行修改是有很大风险的。所以我们需要在外部定义比较器：Comparator。</p><h2 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h2><p>假如你写完上面的代码准备下班去食堂吃阿姨做的🦆鸭头时，产品狗过来和宁说：现在搜索的权重改辣！现在最近的订单数的权重最高，抓紧改吧，加班搞完半夜上线~！</p><p>这时候你应该怎么做呢，继续修改刚才的代码？不，正确的做法是：</p><blockquote><p>对产品狗使用神の救♂济。</p></blockquote><p>vans之后我们害是得van成任务，所以俺们可以搞个外部比较器<code>SearchResultComparator</code>剥离出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SearchResultComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;EzCodingTest&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相关度</span></span><br><span class="line">    <span class="type">int</span> relativeRatio;</span><br><span class="line">    <span class="type">long</span> count;</span><br><span class="line">    <span class="type">int</span> recentOrders;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SearchResultComparator</span><span class="params">(<span class="type">int</span> relativeRatio, <span class="type">long</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.relativeRatio = relativeRatio;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(EzCodingTest o1, EzCodingTest o2)</span> &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> (o1.recentOrders != o2.recentOrders) &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.recentOrders &gt; o2.recentOrders ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (o1.relativeRatio != o2.relativeRatio) &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.relativeRatio &gt; o2.relativeRatio ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (o1.count != o2.count) &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.count &gt; o2.count ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">EzCodingTest</span> <span class="variable">result1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EzCodingTest</span>(<span class="number">70</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="type">EzCodingTest</span> <span class="variable">result2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EzCodingTest</span>(<span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(result1.compare(result1, result2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>约定俗成，不管是Comparable还是Comparator，小于的情况返回<code>-1</code>，等于的情况返回<code>0</code>，大于的情况返回<code>1</code>。</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>既然是比较，那么比较完了之后肯定有个排序工作，例如二维数组、一维数组的倒序、String类型的数组在<code>Arrays.sort()</code>中常常使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">        sort(a);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">            legacyMergeSort(a, c);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码是<code>sort</code>方法，比较器参数的<code>&lt;? super T&gt;</code>为下限通配。但是<strong>基本类型</strong>的数组不能用<strong>包装类型</strong>的比较器，例如以下想实现数组的倒序排序是不行的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] tmp = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">Arrays.sort(tmp, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o2, o1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="TimSort"><a href="#TimSort" class="headerlink" title="TimSort"></a>TimSort</h3><p><code>sort()</code>方法中用的TimSort算法是一种混合算法，归并和插入优化过的缝合怪。JDK7之后就取代了原来的归并排序。</p><p>部分排序的数组，时间复杂度最优为 $O(n)$</p><p>随机排序的数组，时间复杂度为 $O(nlogn)$</p><h2 id="hashCode和equals"><a href="#hashCode和equals" class="headerlink" title="hashCode和equals"></a>hashCode和equals</h2><p>hashCode和equals用来标识对象，两个方法协同工作可用来判断两个对象是否相等。</p><ul><li>利用<code>Object.hashCode()</code>生成哈希值，分散在各地；</li><li>既然用哈希算法，就会有哈希冲突的情况，所以需要调用equals方法进行一次值的比较。</li></ul><p>Object类定义中对hashCode和equals的要求如下</p><ol><li><strong>如果两个对象的equals的结果是相同的，那么这两个对象hashCode的返回结果也必须是相同的；</strong></li><li><strong>任何时候覆写equals，都必须同时覆写hashCode。</strong></li></ol><p>很经典的HashMap，内部数据结构是数组 + 链表（当链表长度大于8时，会变成红黑树）。当调用get方法时，会先判断hashCode的值，如果没有，直接<code>return null</code>，如果有的话，则执行equals方法，去比较值再返回。</p><p>因为哈希冲突的缘故，可能存在值不相同但是hashCode相同的情况，这时候就需要红黑树出场了。</p><p>假如有一个<code>Set&lt;Object&gt;</code>集合，集合的类型是一个拥有N多属性的类，但是我们仅仅将这些对象添加到HashSet中，并不能实现「去重」的效果。我们必须要覆写这个类「相同」的代码逻辑（hashCode和equals方法）。</p>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Easy Coding </tag>
            
            <tag> 集合 </tag>
            
            <tag> 元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《码出高效》系列笔记（四）：数据结构与集合的数组和泛型</title>
      <link href="/post/d6e37130-64cb-11ea-a19c-b3eaacf8ea9d/"/>
      <url>/post/d6e37130-64cb-11ea-a19c-b3eaacf8ea9d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇汲取了本书中较为精华的知识要点和实践经验加上读者整理，作为本系列里的第四篇章第二节：数据结构与集合的数组和泛型篇。</p><p><strong>本系列目录</strong>：</p><ul><li><a href="https://www.yuanmo.xyz/post/0bdf0b10-c25b-11e9-9d06-1f20e5bd3f76/">《码出高效》系列笔记（一）：面向对象中的类</a></li><li><a href="https://www.yuanmo.xyz/post/b1acf8e0-c89b-11e9-9ee1-01379c6f9115/">《码出高效》系列笔记（一）：面向对象中的方法</a></li><li><a href="https://www.yuanmo.xyz/post/3239f2f0-c89d-11e9-89c4-bd64deffb20f/">《码出高效》系列笔记（一）：面向对象中的其他知识点</a></li><li><a href="https://www.yuanmo.xyz/post/d5aea070-d2ac-11e9-ab1f-f97e9fd39695/">《码出高效》系列笔记（二）：代码风格</a></li><li><a href="https://www.yuanmo.xyz/post/43892940-eb34-11e9-8e01-011debd967415/">《码出高效》系列笔记（三）：异常与日志</a></li><li><a href="https://www.yuanmo.xyz/post/025b9630-626f-11ea-8f75-554d885c423a/">《码出高效》系列笔记（四）：数据结构与集合的框架</a></li><li><a href="https://www.yuanmo.xyz/post/d6e37130-64cb-11ea-a19c-b3eaacf8ea9d/">《码出高效》系列笔记（四）：数据结构与集合的数组和泛型</a></li><li><a href="https://www.yuanmo.xyz/post/31c8add0-69af-11ea-ad58-59a2dd622848/">《码出高效》系列笔记（四）：元素的比较</a></li><li><a href="https://www.yuanmo.xyz/post/5a0667d0-fd7d-11ea-ad87-11fe3cadc827/">走进JVM之内部布局</a></li><li><a href="https://www.yuanmo.xyz/post/132bab40-fcc4-11ea-ab6f-7dc412045e4d/">走进JVM之字节码与类加载</a></li><li><a href="https://www.yuanmo.xyz/post/bd0fa690-fcae-11ea-897f-29deed537cb3/">走进JVM之GC</a></li></ul><h1 id="数组与集合"><a href="#数组与集合" class="headerlink" title="数组与集合"></a>数组与集合</h1><p>数组是一种顺序表，可以使用索引下标进行快速定位并获取指定位置的元素。</p><p>为什么下标从0开始？</p><p>因为这样需要计算偏移量需要从当前下标减1的操作，加减法运算对CPU是一种双数运算，在数组下标使用频率很高的场景下，该运算方式十分耗时。在Java的体系中，数组一旦分配内存后无法扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String[] args1 = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;;</span><br><span class="line">String[] args2 = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>];</span><br><span class="line">args2[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">args2[<span class="number">1</span>] = <span class="string">&quot;b&quot;</span>;</span><br></pre></td></tr></table></figure><p>以上代码一般是数组的两种初始化方式，第一种是静态初始化，第二种是动态初始化。数组的容量大小随着数组对象的创建就固定了。</p><p>数组的遍历优先推荐JDK5引进的foreach方式，即<code>for(e : obj);</code>JDK8以上可以使用stream操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Arrays.stream(args1).forEach(str -&gt; System.out.println(str));</span><br><span class="line">Arrays.stream(args1).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="数组转集合"><a href="#数组转集合" class="headerlink" title="数组转集合"></a>数组转集合</h2><p>将数组转集合后，不能使用集合的某些方法，以<code>Arrays.asList()</code>为例，不能使用其修改集合<strong>add</strong>、<strong>remove</strong>、<strong>clear</strong>方法，但是可以使用<strong>set</strong>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String[] args1 = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; asList = Arrays.asList(args1);</span><br><span class="line">asList.set(<span class="number">1</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">System.out.println(asList);</span><br><span class="line">asList.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">asList.remove(<span class="number">0</span>);</span><br><span class="line">asList.clear();</span><br><span class="line">System.out.println(asList);</span><br></pre></td></tr></table></figure><p>后面会输出<code>UnsupportedOperationException</code>异常。</p><p><code>Arrays.asList()</code>体现的是适配器模式，其实是Arrays的一个名为ArrayList的内部类（阉割版），继承自<code>AbstractList</code>类，实现了<strong>set</strong>和<strong>get</strong>方法。但是其他部分方法未实现所以会抛出该父类<code>AbstractList</code>的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String[] args1 = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; e1 = Arrays.asList(args1);</span><br><span class="line">List&lt;String&gt; e2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">e2.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">e2.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="comment">// 第一处</span></span><br><span class="line">System.out.println(e1.getClass().getName());</span><br><span class="line"><span class="comment">// 第二处</span></span><br><span class="line">System.out.println(e2.getClass().getName());</span><br></pre></td></tr></table></figure><p>实际控制台打印情况：</p><ol><li><p><code>java.util.Arrays$ArrayList</code></p></li><li><p><code>java.util.ArrayList</code></p></li></ol><p>数组转集合在需要添加元素的情况下，利用<code>java.util.ArrayList</code>创建一个新集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] args = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(args));</span><br></pre></td></tr></table></figure><h2 id="集合转数组"><a href="#集合转数组" class="headerlink" title="集合转数组"></a>集合转数组</h2><p>集合转数组更加的可控。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; e1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">e1.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">e1.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">String[] args = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">1</span>];</span><br><span class="line">String[] args2 = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>];</span><br><span class="line">e1.toArray(args);</span><br><span class="line"><span class="comment">// 第一处</span></span><br><span class="line">System.out.println(Arrays.asList(args));</span><br><span class="line">e1.toArray(args2);</span><br><span class="line"><span class="comment">// 第二处</span></span><br><span class="line">System.out.println(Arrays.asList(args2));</span><br></pre></td></tr></table></figure><p>实际控制台打印情况：</p><ol><li><p><code>[null]</code></p></li><li><p><code>[c, d]</code></p></li></ol><p>不同的区别在于即将复制进去的数组容量是否足够，如果容量不等，则弃用该数组，另起炉灶。</p><h1 id="集合与泛型"><a href="#集合与泛型" class="headerlink" title="集合与泛型"></a>集合与泛型</h1><p>泛型与集合的联合使用，可以把泛型的功能发挥到极致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(<span class="number">3</span>);</span><br><span class="line">list1.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">666</span>));</span><br><span class="line">list1.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">list1.add(<span class="string">&quot;666&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Object&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">list2.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">666</span>));</span><br><span class="line">list2.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">list2.add(<span class="string">&quot;666&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">list3.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">666</span>));</span><br><span class="line"><span class="comment">// 以下都是编译出错</span></span><br><span class="line">list3.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">list3.add(<span class="string">&quot;666&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;?&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">list4.remove(<span class="number">0</span>);</span><br><span class="line">list4.clear();</span><br><span class="line"><span class="comment">// 以下都是编译出错</span></span><br><span class="line">list4.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">666</span>));</span><br><span class="line">list4.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">list4.add(<span class="string">&quot;666&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>List&lt;?&gt;</code>是一个泛型，在没有赋值之前，表示它可以接收任何类型的集合赋值，赋值之后就不能随便往里面添加元素了，但可以remove和clear。</p><p>而<code>List&lt;T&gt;</code>最大的问题就是只能放置一种类型，如果要实现多种受泛型约束的类型，可以使用<code>&lt;? extends T&gt;</code>与<code>&lt;? super T&gt;</code>两种语法，但是两者的区别非常微妙。</p><ul><li><code>&lt;? extends T&gt;</code>是Get First，适用于生产集合元素为主的场景；</li><li><code>&lt;? super T&gt;</code>是Put First，适用于消费集合元素为主的场景。</li></ul><p><code>&lt;? extends T&gt;</code>可以赋值给任何<font color= red><strong>T以及T子类</strong></font>的集合，上界为T。取出来的类型带有泛型限制，向上转型为T。null可以表示任何类型，所以除了null外，任何元素都不得添加进<code>&lt;? extends T&gt;</code>集合内。</p><p><code>&lt;? super T&gt;</code>可以赋值给任何<font color= red><strong>T以及T的父类</strong></font>集合，下界为T。在生活中，投票选举类似<code>&lt;? super T&gt;</code>的操作。选举代表时，你只能往里投票，取数据时，根本不知道是谁的票，相遇泛型丢失。</p><p><code>extends</code>的场景是put功能受限，而super的场景是get功能受限。</p><h2 id="extends与super的差异"><a href="#extends与super的差异" class="headerlink" title="extends与super的差异"></a>extends与super的差异</h2><p>假设有一个斗鱼TV平台，拥有一个DOTA2板块，其下有一个恶心人的D能儿主播：谢彬DD。</p><p>那我们从代码里可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;DouYu&gt; douYu = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;DotA2&gt; dotA2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;DD&gt; dd = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    douYu.add(<span class="keyword">new</span> <span class="title class_">DouYu</span>());</span><br><span class="line">    dotA2.add(<span class="keyword">new</span> <span class="title class_">DotA2</span>());</span><br><span class="line">    dd.add(<span class="keyword">new</span> <span class="title class_">DD</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第一处，编译出错</span></span><br><span class="line">    List&lt;? <span class="keyword">extends</span> <span class="title class_">DotA2</span>&gt; extendsDotA2FromDouYu = douYu;</span><br><span class="line">    List&lt;? <span class="built_in">super</span> DotA2&gt; superDotA2FromDouYu = douYu;</span><br><span class="line"></span><br><span class="line">    List&lt;? <span class="keyword">extends</span> <span class="title class_">DotA2</span>&gt; extendsDotA2FromDotA2 = dotA2;</span><br><span class="line">    List&lt;? <span class="built_in">super</span> DotA2&gt; superDotA2FromDotA2 = dotA2;</span><br><span class="line"></span><br><span class="line">    List&lt;? <span class="keyword">extends</span> <span class="title class_">DotA2</span>&gt; extendsDotA2FromDD = dd;</span><br><span class="line">    <span class="comment">// 第二处，编译出错</span></span><br><span class="line">    List&lt;? <span class="built_in">super</span> DotA2&gt; superDotA2FromDD = dd;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个类的继承关系说明<code>DD &lt; DotA2 &lt; DouYu &lt; Object</code>。</p><p>第一处编译出错，因为只能赋值给T以及T的子类，上界是DotA2类。DouYu类明显不符合<code>extends</code>DotA2类的情况。不能把<strong>douYu对象</strong>赋值给<code>&lt;? extends DotA2&gt;</code>，因为<code>List&lt;DouYu&gt;</code>不只只有DotA2板块，还有吃♂鸡、颜♂值区、舞♂蹈区这些板块。</p><p>第二处编译出错，因为只能赋值给T以及T的父类，DD类属于DotA2的子类，下界只能DotA2类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下&lt;? extends DotA2&gt;类型的对象无法进行add操作，编译出错</span></span><br><span class="line">extendsDotA2FromDotA2.add(<span class="keyword">new</span> <span class="title class_">DD</span>());</span><br><span class="line">extendsDotA2FromDotA2.add(<span class="keyword">new</span> <span class="title class_">DotA2</span>());</span><br><span class="line">extendsDotA2FromDotA2.add(<span class="keyword">new</span> <span class="title class_">DouYu</span>());</span><br><span class="line"></span><br><span class="line">superDotA2FromDotA2.add(<span class="keyword">new</span> <span class="title class_">DD</span>());</span><br><span class="line">superDotA2FromDotA2.add(<span class="keyword">new</span> <span class="title class_">DotA2</span>());</span><br><span class="line"><span class="comment">// 该处编译出错，无法添加</span></span><br><span class="line">superDotA2FromDotA2.add(<span class="keyword">new</span> <span class="title class_">DouYu</span>());</span><br></pre></td></tr></table></figure><p>除了<strong>null</strong>以外，任何元素都不能添加进<code>&lt;? extends T&gt;</code>集合内。<code>&lt;? super T&gt;</code>可以放，但是只能放进去<strong>自身以及子类</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj1</span> <span class="operator">=</span> extendsDotA2FromDotA2.get(<span class="number">0</span>);</span><br><span class="line"><span class="type">DotA2</span> <span class="variable">obj2</span> <span class="operator">=</span> extendsDotA2FromDotA2.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj3</span> <span class="operator">=</span> extendsDotA2FromDD.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 该处编译出错，无法添加</span></span><br><span class="line"><span class="type">DD</span> <span class="variable">obj4</span> <span class="operator">=</span> extendsDotA2FromDD.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>首先<code>&lt;? super T&gt;</code>可以进行<strong>Get</strong>操作返回元素，但是类型会丢失。<code>&lt;? extends T&gt;</code>可以返回带类型的元素，仅限自身及父类，子类会被擦除。</p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>对于一个笼子，只取不放，属于Get First，应采用<code>&lt;? extends T&gt;</code>；只放不取，属于Put First，应采用<code>&lt;? super T&gt;</code>。</p><blockquote><p>2021.03.31 新阶段的新总结</p></blockquote><p>以前对泛型的上下限老是会忘记，现在总结了一个例子：</p><p>在 Java 中<code>Integer --继承--&gt; Number --实现--&gt; Serializable</code></p><p>例如这样一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(List&lt;? extends Number&gt; producer, List&lt;? <span class="built_in">super</span> Number&gt; consumer)</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想成功调用这个方法的参数的类型可以是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ex</span><span class="params">(List&lt;Number&gt; numbers)</span> &#123;</span><br><span class="line">    <span class="comment">// Integer extends Number</span></span><br><span class="line">    List&lt;Integer&gt; producer = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// Serializable super Number</span></span><br><span class="line">    List&lt;Serializable&gt; consumer = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">    func(producer, consumer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是对集合的操作是<font color = red><strong>相反的</strong></font>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lowerBoundedWildcardsDemo</span><span class="params">(List&lt;? extends Number&gt; producer, List&lt;? <span class="built_in">super</span> Number&gt; consumer)</span> &#123;</span><br><span class="line">    <span class="comment">// PECS stands for producer-extends, consumer-super.</span></span><br><span class="line">    <span class="comment">// 读取数据（生产者）使用 extends</span></span><br><span class="line">    <span class="comment">// 操作输出（消费者）使用 super</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Serializable</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 这里不行，编译不通过</span></span><br><span class="line">    producer.add(p1);</span><br><span class="line">    <span class="comment">// 这里编译可以通过</span></span><br><span class="line">    consumer.add(p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Easy Coding </tag>
            
            <tag> 集合 </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《码出高效》系列笔记（四）：数据结构与集合的框架篇</title>
      <link href="/post/025b9630-626f-11ea-8f75-554d885c423a/"/>
      <url>/post/025b9630-626f-11ea-8f75-554d885c423a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇汲取了本书中较为精华的知识要点和实践经验加上读者整理，作为本系列里的第四篇章第一节：数据结构与集合的框架篇。</p><p><strong>本系列目录</strong>：</p><ul><li><a href="https://www.yuanmo.xyz/post/0bdf0b10-c25b-11e9-9d06-1f20e5bd3f76/">《码出高效》系列笔记（一）：面向对象中的类</a></li><li><a href="https://www.yuanmo.xyz/post/b1acf8e0-c89b-11e9-9ee1-01379c6f9115/">《码出高效》系列笔记（一）：面向对象中的方法</a></li><li><a href="https://www.yuanmo.xyz/post/3239f2f0-c89d-11e9-89c4-bd64deffb20f/">《码出高效》系列笔记（一）：面向对象中的其他知识点</a></li><li><a href="https://www.yuanmo.xyz/post/d5aea070-d2ac-11e9-ab1f-f97e9fd39695/">《码出高效》系列笔记（二）：代码风格</a></li><li><a href="https://www.yuanmo.xyz/post/43892940-eb34-11e9-8e01-011debd967415/">《码出高效》系列笔记（三）：异常与日志</a></li><li><a href="https://www.yuanmo.xyz/post/025b9630-626f-11ea-8f75-554d885c423a/">《码出高效》系列笔记（四）：数据结构与集合的框架</a></li><li><a href="https://www.yuanmo.xyz/post/d6e37130-64cb-11ea-a19c-b3eaacf8ea9d/">《码出高效》系列笔记（四）：数据结构与集合的数组和泛型</a></li><li><a href="https://www.yuanmo.xyz/post/31c8add0-69af-11ea-ad58-59a2dd622848/">《码出高效》系列笔记（四）：元素的比较</a></li><li><a href="https://www.yuanmo.xyz/post/5a0667d0-fd7d-11ea-ad87-11fe3cadc827/">走进JVM之内部布局</a></li><li><a href="https://www.yuanmo.xyz/post/132bab40-fcc4-11ea-ab6f-7dc412045e4d/">走进JVM之字节码与类加载</a></li><li><a href="https://www.yuanmo.xyz/post/bd0fa690-fcae-11ea-897f-29deed537cb3/">走进JVM之GC</a></li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>Java中的集合不同于数学概念，可以是有序的，也可以是重复的。而集合作为数据结构的载体，同时也作为程序的主要构成，是所有编程语言的基础。</p><p><strong>数据结构的分类：</strong></p><ol><li>线性结构：0至1个直接前继和直接后继。当线性非空时，有唯一的首元素和尾元素，除两者外，所有的元素都有唯一的直接前继和直接后继。该类结构一般有：<strong>顺序表、链表、栈、队列</strong>等，其中<strong>栈、队列</strong>是访问受限的结构。</li><li>树结构：0至1个直接前继和0至<em>n</em>个直接后继（<em>n</em>大于等于2）。具有层次、稳定的特性，类似大自然的树木。</li><li>图结构：0至<em>n</em>个直接前继和直接后继（<em>n</em>大于等于2）。该类结构一般有：<strong>简单图、多重图、有向图、无向图</strong>等。</li><li>哈希结构：没有直接前继和直接后继。该结构是通过某种特定的哈希函数将索引与存储的值关联起来，是一种查找效率非常非常高的数据结构。</li></ol><p><strong>复杂度：</strong></p><p>数据结构的复杂度分为时间复杂度和空间复杂度两种，因为目前存储设备的技术进步，时间复杂度成为了重点考量的因素。</p><p><strong>时间复杂度是一种衡量计算性能的指标。通常用大写的<em>O</em>和一个函数描述，比如<em>O</em>(<em>n</em><sup>3</sup>)表示程序执行时间随输入规模呈现三次方倍的增长，这是比较差的算法实现。</strong></p><p>从好到坏的常用算法复杂度排序如下：常数级 <em>O</em>(1)、对数级 <em>O</em>(log<em>n</em>)、线性级 <em>O</em>(<em>n</em>)、线性对数级 <em>O</em>(<em>n</em>log<em>n</em>)、平方级 <em>O</em>(<em>n</em><sup>2</sup>)、立方级 <em>O</em>(<em>n</em><sup>3</sup>)、指数级 <em>O</em>(2<sup><em>n</em></sup>)。</p><h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><p>Java中的集合是用于存储对象的工具类容器，实现了我们上述所说的这些的数据结构，提供了一系列的公开方法用于增删改查以及遍历数据，让宁⑧用自己写轮子辣！</p><p>这里本来应该有一张Java结合框架图的，不过都应该烂熟于心了⑧。除了<code>Map</code>没有直接继承<code>collection</code>接口，<code>Queue</code>、<code>List</code>、<code>Set</code>均是直接继承<code>collection</code>接口。</p><h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><p>List集合是线性数据结构的主要实现，所以集合的元素通常明确上一个和下一个元素，也存在第一个和最后一个元素。</p><p><code>ArrayList</code>是容量可变的<strong>非线程安全集合</strong>。内部使用数组进行存储，扩容时会创建更大的数组空间，然后再把原来的数据复制到新的数组中。该集合支持对元素的随机访问，<strong>插入与删除速度通常很慢</strong>，因为涉及到移动元素（数组）。</p><p><code>LinkedList</code>的本质是双向链表。与<code>ArrayList</code>相比，插入和删除的速度更快，但是随机访问的速度很慢。<code>LinkedList</code>包含了3个重要的成员：size、first、last。size是双向链表中节点的个数。first和last分别指向第一个和最后一个节点的应用。</p><h2 id="Queue集合"><a href="#Queue集合" class="headerlink" title="Queue集合"></a>Queue集合</h2><p>先进先出，一种特殊的线性表，只允许表在一端进行获取操作，在另一端进行插入操作。当不存在元素时，则为空队列。自从<code>BlockingQueue</code>（阻塞队列）问世以来，队列的地位得到极大地提升，在各种高并发编程的场景，经常被作为Buffer（数据缓冲区）使用。</p><h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><p>Map集合是以Key-Value键值对作为存储元素实现的哈希结构，Key安某种哈希函数计算后是唯一的，Value是可以重复的。</p><ul><li>可以使用<code>keySet()</code>方法查看所有的Key；</li><li>使用<code>values()</code>方法查看所有的Value；</li><li>使用<code>entrySet()</code>方法查看所有的键值对。</li></ul><p><code>Hashtable</code>因为性能瓶颈原因已被淘汰，如今广泛使用<code>HashMap</code>，但是是线程不安全的，底层也就是数组 + 链表。<code>ConcurrentHashMap</code>是线程是安全的，在JDK8中进行了锁的大幅度优化，体现了8错的性能。</p><p>在多线程并发的场景中，优先推荐使用<code>ConcurrentHashMap</code>，而不是<code>HashMap</code>。</p><p><code>TreeMap</code>是Key有序的Map类集合，树结构保证有序，Key⑧能为<code>null</code>。</p><p><code>LinkedHashMap</code>底层是链表结构，较与<code>HashMap</code>可以保元素的有序。</p><h2 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h2><p>Set是不允许出现重复元素的集合类型。Set体系最常用的是<code>HashSet</code>、<code>TreeSet</code>和<code>LinkedHashSet</code>三个集合类。</p><p><code>HashSet</code>与<code>HashMap</code>较为类似，只是Value固定为一个静态对象，使用Key保证集合元素的唯一性，但它不保证集合元素的顺序。</p><p><code>TreeSet</code>也是如此，与<code>TreeMap</code>类似，同样底层是树结构，保证有序，元素不能为<code>null</code>。</p><p><code>LinkedHashSet</code>继承自<code>HashSet</code>，具有<code>HashSet</code>的优点，使用链表维护了元素插入顺序。</p><h1 id="集合初始化"><a href="#集合初始化" class="headerlink" title="集合初始化"></a>集合初始化</h1><p>集合初始化通常进行分配容量、设置特定参数等相关工作。</p><p>该书中特别强调例如<code>ArrayList</code>在初始化的过程中，需要显式地设定集合容量大小。</p><h2 id="ArrayList部分源码解析"><a href="#ArrayList部分源码解析" class="headerlink" title="ArrayList部分源码解析"></a>ArrayList部分源码解析</h2><blockquote><p>本书分析的底层源码基本来源于较新的JDK11，而在我本地的源码是JDK8，下面分析的是本地的JDK8源码。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Increases the capacity to ensure that it can hold at least the</span></span><br><span class="line"><span class="comment"> * number of elements specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> minCapacity the desired minimum capacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// ①</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">  <span class="comment">// ②</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">  <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">    Integer.MAX_VALUE :</span><br><span class="line">  MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码是JDK8中的源码，扩容在<code>grow()</code>方法里完成。而在JDK11中，扩容的具体实现则是由<code>newCapacity()</code>方法实现。</p><p>首先我们明确几个概念：</p><ol><li><code>oldCapacity</code>：当前容量，由于要扩容了所以是老的容量数值；</li><li><code>newCapacity</code>：扩容后的容量大小；</li><li><code>minCapacity</code>：扩容的必须满足最小的要求！源码是<code>size + 1</code>，也就是当前的容量 + 1。</li></ol><ul><li><p><strong>什么时候扩容？</strong></p><p>JDK8的源码部分没贴上来，调用的方法太多了占内容空间。如果原始容量为10，当第11个元素即将调用<code>add()</code>方法时会启动<code>grow()</code>方法启动扩容机制，JDK11同理。</p></li><li><p><strong>默认的容量大小是什么？</strong></p><p><strong>如果没有显式的初始化容量大小</strong>，<strong>那么在最开始</strong>，<strong>容量大小其实是0而不是默认的10哦</strong>。当显式的设定了容量大小，那么容量大小会赋设定的值。只有当调用<code>add()</code>方法时才会启动扩容，变成默认<code>DEFAULT_CAPACITY = 10</code>，大小为10。所以不显式的初始化容量大小，调用<code>add()</code>方法的话时必定会扩容一次的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Class&lt;?&gt; listClazz = list.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">elementData</span> <span class="operator">=</span> listClazz.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">elementData.setAccessible(<span class="literal">true</span>);</span><br><span class="line">Object[] objects1 = (Object[])elementData.get(list);</span><br><span class="line">System.out.println(<span class="string">&quot;不显式的初始化，容量大小为：&quot;</span> + objects1.length);</span><br></pre></td></tr></table></figure><p>上述代码输出<code>不显式的初始化，容量大小为：0</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add一个元素</span></span><br><span class="line">list.add(<span class="string">&quot;回家做80个俯卧撑！&quot;</span>);</span><br><span class="line">Object[] objects2 = (Object[])elementData.get(list);</span><br><span class="line">System.out.println(<span class="string">&quot;添加一个元素，现在容量大小为：&quot;</span> + objects2.length);</span><br></pre></td></tr></table></figure><p>接着添加一个元素，运行输出<code>添加一个元素，现在容量大小为：10</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">666</span>);</span><br><span class="line">Class&lt;?&gt; newListClazz = list2.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">elementData2</span> <span class="operator">=</span> newListClazz.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">elementData2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">Object[] objects3 = (Object[])elementData.get(list2);</span><br><span class="line">System.out.println(<span class="string">&quot;显式初始化容量大小为666，容量大小为：&quot;</span> + objects3.length);</span><br></pre></td></tr></table></figure><p>显式初始化容量大小为666，运行输出<code>显式初始化容量大小为666，容量大小为：666</code></p></li><li><p><strong>如何扩容？</strong></p><ul><li>JDK8之前的扩容算法与JDK8有所不同，源码中上述方法里，<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</code>扩容后的容量大小算法是通过右移一位再加上老容量大小得到。<ul><li>位移运算：JDK8中采用了（有符号）位运算符计算，位移的过程中采用补码的形式。假设原始容量为13，二进制数是1101，其中反码也是1101，<strong>整数的反码、补码都是本身</strong>。补码右移一位这是110，得到十进制为6，所以新的容量大小为6 + 13 &#x3D; 19。JDK7之前的公式则是<code>oldCapacity * 1.5 + 1</code>；</li></ul></li><li>①：如果新的容量大小比最小要求要小的话，则按照最小要求设定（size + 1）；</li><li>②：如果新的容量大小比<code>MAX_ARRAY_SIZE</code>还大的话，其中该变量的大小为<code>Integer.MAX_VALUE - 8</code>也就是2<sup>31</sup>-1再减8。在走<code>hugeCapacity(int minCapacity)</code>方法判断最后设定一个容量大小或者OOM了。</li></ul></li></ul><p>之所以本手册中明确强调需要显式的初始化容量大小，是因为假设有1000个元素需要放置在ArrayList中，则需要被动扩容13次才可以完成，在这过程中数组不断地复制原有的数据再到新的数组中，若能够提前给定一个合适的容量大小，就是性能的提升，也避免了一些OOM的风险。OS：这过程更像是调优，实际开发中很难对每个ArrayList清晰的定义和认识吧，属于经验学的范畴。</p><blockquote><p>嗯？！感觉关于ArrayList的可以单独出一篇啊。</p></blockquote><h2 id="HashMap部分源码解析"><a href="#HashMap部分源码解析" class="headerlink" title="HashMap部分源码解析"></a>HashMap部分源码解析</h2><blockquote><p>本书分析的底层源码基本来源于较新的JDK11，而在我本地的源码是JDK8，下面分析的是本地的JDK8源码。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The maximum capacity, used if a higher value is implicitly specified</span></span><br><span class="line"><span class="comment"> * by either of the constructors with arguments.</span></span><br><span class="line"><span class="comment"> * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------------- Fields -------------- */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment">  * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment">  * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment">  * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><ul><li><code>DEFAULT_INITIAL_CAPACITY</code>：默认初始容量<code>1 &lt;&lt; 4</code>，aka 16，必须是2<sup>n</sup>幂，注解里很直白的写着，所以你即使在初始化的过程这样写<code>new HashMap&lt;&gt;(3);</code>，实际上也会被改成2<sup>2</sup>，比3大且最近的一个2的幂次方；</li><li><code>MAXIMUM_CAPACITY</code>：最大容量大小，默认<code>1 &lt;&lt; 30</code>，相当于2<sup>30</sup>；</li><li><code>DEFAULT_LOAD_FACTOR</code>：负载因子，也叫填充比例，默认0.75，可在初始化过程中自定一个float类型的数值。</li><li><code>table</code>：</li></ul><p>HashMap和ArrayList一样，容量不是在new的时候分配，而是在第一次<code>put</code>的时候。</p><p><code>put</code>、<code>putVal()</code>、<code>reszie()</code>方法有些晦涩复杂就不贴上来了。很多细节，👴属实有点看不明白。这里有个概念<code>threshold</code>作为临界值就是<code>loadfactory</code>（负载因子）和<code>capacity</code>（容量）的乘积。也就是说默认情况下，当HashMap中元素个数达到了容量的3&#x2F;4的时候就会进行自动扩容。</p><ul><li><p><strong>为什么负载因子是0.75？</strong></p><p>JDK源码里这样写，一定有它的道理，这里不太想去探究。查阅网上的资料，和哈希冲突有很大关系，以及一些数学计算、log2、对数之类的有一定关系，反正一般不要去自己去设定就vans了。</p></li><li><p><strong>什么时候扩容？</strong></p><ul><li><p>和ArrayList一样，到了某个临界值才会被动扩容，而且扩容的过程中会重新计算所有元素的哈希值。扩容的条件是达到了<code>threshold</code>这个参数，而它是<code>capacity</code>和<code>loadfactory</code>的乘积，所以我们可以通过代码来验证一下：</p></li><li><pre><code class="java">Map&lt;String, String&gt; map = new HashMap&lt;&gt;(0);Class&lt;?&gt; mapClazz = map.getClass();Method capacity = mapClazz.getDeclaredMethod(&quot;capacity&quot;);capacity.setAccessible(true);System.out.println(&quot;容量大小为：&quot; + capacity.invoke(map));<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 输出`容量大小为：1`，因为是2&lt;sup&gt;0&lt;/sup&gt;</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  map.put(&quot;MatthewHan&quot;, &quot;developer&quot;);</span><br><span class="line">  System.out.println(&quot;添加一个元素后，容量大小为：&quot; + capacity.invoke(map));</span><br></pre></td></tr></table></figure></code></pre></li><li><p>put一个元素之后，查看<code>capacity</code>大的大小，输出<code>添加一个元素后，容量大小为：2</code>。为什么不是1呢，因为<code>capacity</code>和<code>loadfactory</code>的乘积是<code>0.75 * 1 &lt; 1</code>，满足扩容的条件。所以从2<sup>0</sup>扩容成了2<sup>1</sup>。当然你这样写<code>new HashMap&lt;&gt;(0, 1f);</code>输出的就是1了。</p></li></ul></li><li><p><strong>以前看到过的一道美团笔试题：如果一个HashMap要装载100个元素，那么初始化容量大小是设定最佳？</strong></p><ul><li>最佳的大小，一定是满足不会多次扩容调用<code>resize()</code>方法的。所以就是一定要大于<code>100 ÷ 0.75 = 133.333...</code>，比该数大且最接近的2<sup>n</sup>的是2<sup>8</sup> &#x3D; 256。而2<sup>7</sup> &#x3D; 128看起来比100大，但是需要多扩容一次，全部重新计算哈希算法，属实⑧行。上面写了目前对时间性能的要求远远大于空间，用空间换时间。</li><li>或者可以这样<code>new HashMap&lt;&gt;(128, 0.79f);</code>但是一般不会改变负载因子的值，该方法实际表现未知。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Easy Coding </tag>
            
            <tag> 集合 </tag>
            
            <tag> HashMap </tag>
            
            <tag> ArrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看不到的角落</title>
      <link href="/post/638b4b90-5dd2-11ea-aec4-43cfa9e11df6/"/>
      <url>/post/638b4b90-5dd2-11ea-aec4-43cfa9e11df6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1"><a href="#1" class="headerlink" title="# 1"></a># 1</h1><p>今天在看<a href="https://www.bilibili.com/video/av93474806?t=1065">《睡前消息》第84期</a>的结尾，有这么一个新闻事件：</p><blockquote><p>河南邓州一贫困户女儿因无法正常在家上网课，吞下药物自杀。</p></blockquote><p>初步了解这个事情，感到十分痛心和无奈。</p><p>在全国各地正如火如荼的进行网课教育并且还催生出一堆捧腹的段子的时候，我就时常会想到那些非常贫困的学生们。虽然是2020年了，几乎是人人都应该有一部智能手机的时候。他们可能没有条件做到能够全天按照学校安排的课程进行网络学习。更可能的情况是家里没有有线宽带，无法支撑他们持续数个月的高强度直播、视频学习。即使是数据流量对于一个贫困的家庭来说是一个不小的负担。全班一起上直播的网课，同时他们还要考虑很多关于同学之间的<strong>面子</strong>问题。</p><p><strong>对于他们在心理上的关心和引导我觉得才是真真正正最需要关注的点。</strong></p><p>未出社会的小孩子很难真正体会父母的辛酸与艰难，什么狗屁人生道理靠别人总结好送给你的永远记不住，而是根据自己的经验一点点悟出来的。如果平时父母没有定期和孩子交流双方的心里话的习惯，非常不好，尤其是一些外出打工的家庭。相对这类家庭来说父母对子女的关注度不够或者是十分片面的，仅仅只是学习和吃饱穿暖其实完全不够。在孩子成长初期应该多去深入交流，多了解孩子的内心世界，是缺少了什么渴望着什么还是有什么不满，双方都能无保留的表达出想法才可以让家长进一步判断这个阶段忽略了什么，孩子又陷入了什么走不开的死胡同。许多影响极度恶劣的重案的犯罪者，有相当多的比例都拥有了一个不太美好的童年，所以造成的一些比较奇怪性格品行往往会伴随其一生。</p><p>学校和老师也要担责，作为网课的具体实行者，不确定有没有事先调查好其下的学生的上网课的具备条件（估计学校也应该是让老师发表格之类的调查过，小女孩出于自尊心之类的传达了可以接受网课的形式教学），不确定任课教师有没有因为学生落下的进度问题而过分苛责。老师班主任对于学生的家庭条件和心理情况了解程度还是不够，可能还是需要人民教师再心细敏感一些吧（教师当然也不好当）。</p><p>出现这种问题一方面确实是我国区域发展不均衡以及经济差距过大，很多人忽略了那些人的生活条件真的比你想象的艰难。</p><h1 id="2"><a href="#2" class="headerlink" title="# 2"></a># 2</h1><blockquote><p><a href="https://www.thepaper.cn/newsDetail_forward_6289864">河南邓州一女孩赌气服药，当地调查回应事件经过</a></p></blockquote><p>最新的新闻显示调查组已经全面调查完毕，真实情况有新的进展，所幸女孩无大碍。调查提到女孩家中装有宽带，有两部手机，其中一部智能手机为其父于去年9月份购买，另一部可以拍照；姐弟三人轮流使用智能手机观看直播、录播上网课，用另一部拍照记录作业。李某某任课教师称，李某某网课此前一直正常进行。且女孩曾经因为家庭琐事也有过赌气服药的行为。说明小女孩现在阶段确实有点任性，和父母之间的关系不是很良好。家庭教育确实存在问题，希望有相关人员能够妥善处理这件事，不然对小女孩的心理又是一次打击。</p>]]></content>
      
      
      <categories>
          
          <category> 点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>张小龙的微信公开课</title>
      <link href="/post/9dca78f0-32ab-11ea-a0c0-0fee95c51c98/"/>
      <url>/post/9dca78f0-32ab-11ea-a0c0-0fee95c51c98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="公开课的内容"><a href="#公开课的内容" class="headerlink" title="公开课的内容"></a>公开课的内容</h1><blockquote><p>张小龙的演讲内容个人概括（怎么感觉像和领导开会记笔记一样。。）</p></blockquote><ol><li>微信是人们花时间最多的信息传递工具&#x2F;平台，看到的听到的都是远方的信息，宽广度早已远远超过以往任何的一个时代，也是微信一直要解决的一个问题。也引发了一些隐私问题，比如广告服务推送，倡导同行一起重视。</li><li>信息获取的被动。互联网让信息唾手可得。目前大多数人都是被动获取信息，人们也倾向于这种模式，不愿意主动地获取信息。微信完全是基于推送的模式。</li><li>社会关系的扩大的和复杂，各种同学、同事群、朋友圈的关联 ，微信之前限定好友上限5000，目前已经有100万人已经接近5000个好友，促使要扩大好友数目。附近的人刚上线时，感到不安。不确定是好是坏、带来的影响难以控制。</li><li>信息传播的快速。事件传播的速度爆炸，并且事件的影响力和传播速度和事件本身的夸张型、趣味性、新鲜性有强关联性。 技术手段无法衡量内容的质量标准，需要更多的参与者帮助平台作出仲裁。</li><li>信息选择的困难。看到的内容总是局部。在「看一看」中实践了社交推荐，效果还不错。</li><li>信息的多样性。人人皆可创作的年代，希望更多的「小号」也有自己的生存空间。</li><li>搜索的困难。与Web互联网相比，移动互联网的各个app之间更加割裂，信息难以打通。做「小程序」的便是因为一个梦想：希望通过搜索能进入到每一个「小程序」内部，海量的小程序可以支撑起长尾的搜索需求。「小程序」目前是团队一直需要不断改进的领域。</li><li>微信的起步阶段基于移动端来做，而非PC，PC只是辅助。因为这样做的好处是，产品可以更好地普及到每一个人都能用。但是有2个小小的失误：<ol><li>公众平台很长时间都只有PC Web版，限制了内容创作者的范围。</li><li>公众平台的原始想法是取代短信，成为一种基于连接品牌和订户的群发工具，内容应该是多元且丰富的，但是不小心做成了文章为主的载体，是的其他的短内容的形式没有呈现出来，而形成短内容的缺失。</li></ol></li><li>朋友圈之所以默认是发照片视频的，是因为当时的认识是，让十几亿人发文字是不容易的，但是发照片是每个人都可以做到的。</li><li>新版本的小预告：微信的发力方向是指是短内容为主，近期可能会与大家见面；由于春节到来，红包上也有了新的创造，希望你能够发挥创造力。</li></ol><h1 id="个人的看法"><a href="#个人的看法" class="headerlink" title="个人的看法"></a>个人的看法</h1><p>很多人不懂为什么有了QQ，为什么还会诞生出微信，感觉两者完全是重合冗余的。很多曾经将QQ作为主力信息交流工具的人来说，可能微信放在今天在他们眼里依然不算是一个「好用」的产品：</p><ul><li>朋友圈只能看共同好友的评论</li><li>群聊不保存到通讯录可能会再也找不到了</li><li>文件传输、协作能力很弱，没有QQ强大</li><li>QQ空间的保留的那份感动…</li></ul><p>看起来好像就是微信的内容丰富度不如QQ及其衍生品，但事实上果真如此吗？仅是一个「公众号」便开辟出了一种新的模式，它的诞生是在4G普及、移动互联网爆发的前两年，虽然之初具有一定门槛和复杂度，但是给了很多有想法、想表达的人一个渠道，所拓展出来的业务繁荣程度是令人难以想象的。包括后面的「小程序」，在公开课中张小龙也叙述到移动互联网的背景下，微信作为载体的「小程序」之间的信息数据交流的会更加无碍且高效，海量数据更好地用于服务用户。</p><h2 id="公开课中思考"><a href="#公开课中思考" class="headerlink" title="公开课中思考"></a>公开课中思考</h2><ul><li><p><strong>第一点：</strong> 服务商利用隐私虽然会带来更高效、更精准的服务，但就像一把双刃剑同时也会带来隐私泄露、垃圾营销等问题。而如今天网系统、各种人脸智能化识别、数据流通的当代社会，个人的隐私空间已经压缩到了最小。解决这一类问题，其实和一个「度」有关。需要保证海量数据哪一部分数据只能被谁利用，哪一部分只能生产在什么领域，是一个需要多领域一起长期摸索的过程。</p></li><li><p><strong>第二点：</strong> 尤其是在移动互联网的今天，虽然互联网上的信息唾手可得，但是有相当一部分流量是被动获取的，供应商根据你的浏览记录、兴趣点、标签、行为操作等等属性来编织一张属于你的用户画像，为了尽可能的保证你在他们的服务上多「逗留」一会儿，为你推送的内容往往是算法+人气、热度精心筛选的。有些人说这是一种不好的模式，因为它不但局限你的思维，让你无法从其他的切入点切入，而且还会恶性循环，需要我们自身打破这种被动获取的方式，尽可能地主动地搜寻探索我们感兴趣的领域。我无法完全赞同这种观点，首先未免小看或者说不了解该推送算法。这类算法应用不仅仅是简单的只会推送给用户感兴趣的东西，它背后的处理逻辑是极其复杂且繁琐的，这种类似人工智能的应用会不断试探你，不停的修正、重构一个真正的你，即使你在YouTube、Bilibili这些视频网站上只看<font color = red>游戏</font>视频，<strong>suggest to you</strong>也绝不会蠢到单纯的以为你只是一个狂热到生命中只有<font color = red>游戏</font>的玩家。人们都应该有自己独立思考的能力和主观能动性，不要轻易的被煽动和相信，理性中夹杂着辩证的思维去分析事物，会让这个世界更美好:)</p></li><li><p><strong>第三点：</strong> 「附近的人」刚上线时，张小龙有着隐隐的不安，觉得打破了和附近的人的界限，可能会引发一系列的问题。当然可能有些人已经尝试或成功把这一功能当做约*来用。扩大5000个好友数目限定同样也会让张小龙感到担忧，说实话我比较好奇这个的上限<strong>5000</strong>数字到底是如何定下来的，好友数目的增长会带来哪些不可控的影响？好友位的增多提高了不法分子的效率，一个账号的能力得到了提升，节省了多账号的成本；「对不起，好友满了，加不了了。」变得难以说出口了（笑</p></li><li><p><strong>第四点：</strong> 人们往往只会对“魔幻“、“耸人听闻”、“搞笑”的新闻产生更大的兴趣，所以捏造虚假、标题党等内容屡见不鲜。技术手段本身不具备像人对艺术的感知、评判能力，它的评判是模式化、标准化的。按照一定的算法加上抽象模板去打分。所以微信本身对内容的质量的把控是离不开众多参与者的，这也正是目前人工智能的一个很大的窘境——没那么智能，却想要干“人”都需要学习一段时间才能做的活。</p></li><li><p><strong>第五点：</strong> 微信尝试了利用好友之间的互相推荐来扩大你的选择范围，自从打开了「看一看」功能后，看到小红点我也习惯性的会点开看看最近大家都看了什么。其实和把文章分享到朋友圈是相类似的，但是这个过程显得更简便更随意，少了那么一点「刻意感」，会让人更容易去分享。</p></li><li><p><strong>第七点：</strong> 张小龙说移动互联网各个App更加割裂。其实我觉得和第一点隐私问题相似，虽然App之间是相互割裂，但是每当你在微信上交流过数码产品，浏览器浏览、搜索过什么内容，电商网站便会向你推荐相关产品。但微信这边不满足于与其他应用交流数据，而是想自己做成一个全能的平台，利用小程序掌握所有的数据，来支撑长尾的搜索需求，野心蓬勃。</p></li><li><p><strong>第八点：</strong> 微信最初便是以移动端作为出发点，PC端仅仅只是作为替补，这点确实很妙，微信项目的诞生到推出，也是智能手机的发展史，马化腾也说过当时处境其实不算太明朗。微信利用手机通讯录的社交属性，实用的懒人专属语音功能，加上手机的随身携带不离身的特质，让微信很好地发展普及起来。</p><blockquote><p>马化腾：确实是有3个团队报名。当时解决了一个很大的问题，从PC到移动怎么打？当年诺基亚从前一年市场份额70%、80%规模一下子掉下来，安卓、苹果这类智能手机迅速替代了传统功能机，互联网企业反应过来的才能活下来，没反应过来就死掉了。我们是最早拿到这张船票的，没上船的再也过不来了，这是最大的一个危机。</p></blockquote><p>另外，从这次视频中明显可以看出「短内容」是个高频词汇，应该是微信接下来要布局和发力的重点。如今好像很多内容都从大而全转变成了精而短，是人们都变懒了吗？还是当今工作负担较大，大家时间都不多？个人觉得有以下几点：</p><ul><li>创作者的门槛：长内容的创作是需要花费大量时间、精力的，并且很有可能远远低于预期收益。例如哔哩哔哩的纪录片、科普视频，甚至是鬼畜视频，一旦收益不好便会大大打击创作者的积极性。降低门槛很早就成为了趋势，不但可以扩大创作者的人群，还可以使得内容生产的可持续性。</li><li>获取者的精力：会议、吃饭、通勤、等待的过程中有太多碎片化的时间。一旦你无所事事时，低头抬头把玩手机早已经是一种常见的生活习惯。这个时间点，精简的短内容一定是更好的表达方式，较于长内容不会有那种“割裂感”。<strong>用户往往会把长内容的优先级放到最后或者是有时间之后，总是会把简单的会先消化掉。</strong>这就造成了长内容的劣势。</li><li>传播速率不同，阅读这部分内容效率显然高很多。Facebook就是Facebook，Twitter就是Twitter。新浪微博之初也考虑过成为一种Facebook，最后还是以140个<strong>字数</strong>作为特色的内容产品，避免了和博客&#x2F;论坛&#x2F;资讯门户正面竞争。短内容也会让feed流一气呵成，让微博、抖音用户产生一种一直刷不累的错觉。</li></ul></li></ul><h1 id="公开课视频"><a href="#公开课视频" class="headerlink" title="公开课视频"></a>公开课视频</h1><iframe width="100%" height="600" src="//player.bilibili.com/player.html?aid=82658881&cid=141426489&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 张小龙 </tag>
            
            <tag> 公开课 </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 多对多映射的小问题</title>
      <link href="/post/bce6bdb0-278a-11ea-9afb-77b212895fb9/"/>
      <url>/post/bce6bdb0-278a-11ea-9afb-77b212895fb9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>ORM映射中，一对多，多对多是非常常见的方式。但是由于场景使用没有这么多，到今天我才发现这个问题。</p><p>配置映射关系，使字段与<code>DO</code>类解耦，方便维护。但是为了方便管理和控制，我就在一个<code>.java</code>文件中写了两个<code>VO</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Setter(value = AccessLevel.PUBLIC)</span></span><br><span class="line"><span class="meta">@Getter(value = AccessLevel.PUBLIC)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@JsonInclude(value = JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryVO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long cid;</span><br><span class="line">    <span class="keyword">private</span> Long pid;</span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line">    <span class="keyword">private</span> Integer sortNo;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line">    <span class="keyword">private</span> java.sql.Timestamp created;</span><br><span class="line">    <span class="keyword">private</span> java.sql.Timestamp updated;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Word&gt; words;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Setter(value = AccessLevel.PUBLIC)</span></span><br><span class="line"><span class="meta">@Getter(value = AccessLevel.PUBLIC)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@JsonInclude(value = JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Word</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long hotWordId;</span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    <span class="keyword">private</span> String keyword;</span><br><span class="line">    <span class="keyword">private</span> Integer source;</span><br><span class="line">    <span class="keyword">private</span> Integer sortNo;</span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">    <span class="keyword">private</span> java.sql.Timestamp created;</span><br><span class="line">    <span class="keyword">private</span> java.sql.Timestamp updated;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它们的关系也非常简单，可以直接看出，一个类目（分类）对应多组HotWord（热词）。所以在<code>resultMap</code>中为了图快我就直接把属性一个个映射数据库的column了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&#123;hape&#125;.common.orm.model.vo.CategoryVO&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 相同的列名id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;parent_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;level&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;level&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sort_no&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sortNo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;words&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;&#123;hape&#125;.common.orm.model.vo.Word&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 相同的列名id --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;hotword_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;hotWordId&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;category_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;categoryId&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;keyword&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;keyword&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;source&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TINYINT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;source&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sort_no&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sortNo&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_deleted&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TINYINT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isDeleted&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;created&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;updated&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;updated&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是实际结果却并不是一个包含了多个子结构的对象，而是只有一个<code>words</code>对象，究其原因，原来是因为colum列名有重复，都存在一个相同的id。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>你可以选择干掉其中一个id，或者在使用SQL语句中加入别名加以区分，当字段较多的时候就会比较麻烦。我这里把字段都加上了<code>w_</code>区分。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;selectHotWordByCategoryId&quot; parameterType<span class="operator">=</span>&quot;int&quot; resultMap<span class="operator">=</span>&quot;result&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">        <span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--为什么要as &quot;w_&quot;呢？--&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--因为两张表的colum有相同的名称会出现问题，不然就只能查出子表的一条而不是多条了--&gt;</span></span><br><span class="line">            t1.<span class="operator">*</span>, t2.id <span class="keyword">as</span> w_id, t2.hotword_id <span class="keyword">as</span> w_hotword_id, </span><br><span class="line">            t2.keyword <span class="keyword">as</span> w_keyword, t2.source <span class="keyword">as</span> w_source, </span><br><span class="line">            t2.sort_no <span class="keyword">as</span> w_sort_no, t2.created <span class="keyword">as</span> w_created, </span><br><span class="line">            t2.updated <span class="keyword">as</span> w_updated</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            xunfei_category t1</span><br><span class="line">        <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">            xunfei_hotword t2</span><br><span class="line">        <span class="keyword">on</span></span><br><span class="line">            t1.id <span class="operator">=</span> t2.category_id</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            t1.id <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">            t2.is_deleted <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">            t2.sort_no,</span><br><span class="line">            t2.updated <span class="keyword">desc</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<code>resultMap</code>中修改成改后的别名就OK啦。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&#123;hape&#125;.common.orm.model.vo.CategoryVO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;parent_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;level&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;level&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sort_no&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sortNo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;words&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;&#123;hape&#125;.common.orm.model.vo.Word&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;w_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;w_hotword_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;hotWordId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;w_category_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;categoryId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;w_keyword&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;keyword&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;w_source&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TINYINT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;source&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;w_sort_no&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sortNo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;w_is_deleted&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TINYINT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isDeleted&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;w_created&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;created&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;w_updated&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;updated&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 数据库映射 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程之线程池小纪</title>
      <link href="/post/3ff45990-2175-11ea-bda8-b1e815e5e40d/"/>
      <url>/post/3ff45990-2175-11ea-bda8-b1e815e5e40d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于线程池"><a href="#关于线程池" class="headerlink" title="关于线程池"></a>关于线程池</h1><p>并发总是离不开多线程，多线程的应用能够更好地帮助我们协调利用CPU、Memory、Net、I&#x2F;O等系统资源。频繁的创建、销毁线程会浪费大量的系统资源，增加并发编程的风险。利用线程池可以实现类似<strong>主次线程隔离</strong>、<strong>定时执行</strong>、<strong>定时执行</strong>、<strong>周期执行</strong>等任务。作用包括：</p><ol><li>利用线程池管理并复用线程、控制最大并发数等。</li><li>实现某些与时间相关的功能，如定时执行、周期执行等。</li><li>隔离线程环境。比如<strong>交易服务</strong>和<strong>搜索服务</strong>在同一台服务器上，分别开启两个线程池，交易线程的资源消耗明显要更大；因此，通过配置读的线程池，将两者隔开，避免个服务线程相互影响。</li></ol><p>关于线程池的基础概念和一些简单场景，可以看看这篇文章：<a href="https://mp.weixin.qq.com/s/RLrgrQYWqm2EvBx6HfsAaQ">线程池开门营业招聘开发人员的一天</a></p><h1 id="迷思"><a href="#迷思" class="headerlink" title="迷思"></a>迷思</h1><p>如下是我定义的一个线程工具类，我定义了核心线程数量大小为4；最大核心线程数量大小为8，<code>LinkedBlockingQueue</code>容量大小未初始化，也未定义一个handle，当我在利用这个线程池生产线程的过程中发现，<strong>当创建速度大于它的处理速度时，核心线程数量依旧是4个</strong>。</p><blockquote><p>嗯？说好的，最大核心线程数不是BUG，8个吗？难道当前不应该是8个？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ThreadPoolUtils.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程池维护线程的最少数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIZE_CORE_POOL</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程池维护线程的最大数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIZE_MAX_POOL</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 禁止手动初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ThreadPoolUtils</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printPoolInfo</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;当前线程Pool的数量 = [&#123;&#125;]&quot;</span>,Singleton.SINGLETON.getThreadPool().getPoolSize());</span><br><span class="line">        logger.info(<span class="string">&quot;当前task的数量 = [&#123;&#125;]&quot;</span>,Singleton.SINGLETON.getThreadPool().getTaskCount());</span><br><span class="line">        logger.info(<span class="string">&quot;当前执行task的数量 = [&#123;&#125;]&quot;</span>,Singleton.SINGLETON.getThreadPool().getActiveCount());</span><br><span class="line">        logger.info(<span class="string">&quot;当前完成task的数量 = [&#123;&#125;]&quot;</span>,Singleton.SINGLETON.getThreadPool().getCompletedTaskCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过枚举创建单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程池单例</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SINGLETON;</span><br><span class="line">        <span class="keyword">private</span> ThreadPoolExecutor threadPool;</span><br><span class="line">        <span class="keyword">private</span> ScheduledExecutorService service;</span><br><span class="line">        Singleton() &#123;</span><br><span class="line">            <span class="comment">// 为线程命名</span></span><br><span class="line">            <span class="type">ThreadFactory</span> <span class="variable">namedThreadFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadFactoryBuilder</span>()</span><br><span class="line">                    .setNameFormat(<span class="string">&quot;线程池工具类-pool-%d&quot;</span>).build();</span><br><span class="line">            <span class="comment">// 创建线程池1</span></span><br><span class="line">            threadPool = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                    SIZE_CORE_POOL,</span><br><span class="line">                    SIZE_MAX_POOL,</span><br><span class="line">                    <span class="number">10L</span>,</span><br><span class="line">                    TimeUnit.MILLISECONDS,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),</span><br><span class="line">                    namedThreadFactory);</span><br><span class="line">            <span class="comment">// 创建线程池2</span></span><br><span class="line">            service  = Executors.newScheduledThreadPool(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回单例对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> ThreadPoolExecutor <span class="title function_">getThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> threadPool;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ScheduledExecutorService <span class="title function_">getScheduledThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> service;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向池中添加任务</span></span><br><span class="line"><span class="comment">     * 单次执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addExecuteTask</span><span class="params">(Runnable task)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (task != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> Singleton.SINGLETON.getThreadPool();</span><br><span class="line">            threadPoolExecutor.execute(task);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addScheduleTask</span><span class="params">(Runnable task)</span> &#123;</span><br><span class="line">        Singleton.SINGLETON.getScheduledThreadPool().scheduleWithFixedDelay(task, <span class="number">5</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h1><p>看来还是basic不够扎实啊，学的是个JB！我们看一下<code>ThreadPoolExecutor</code>的源码，查看下的他的4个构造方法如下图，我们来看看比较难懂的几个参数：</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/thread-pool/ThreadPoolExecutor.png/zip" alt="ThreadPoolExecutor"></p><ul><li><strong>第5个参数：</strong><code>workQueue</code>表示缓存队列。当请求的线程大于<code>maximumPoolSize</code>时，线程进入<code>BlockingQueue</code>阻塞队列。是一个生产消费模型队列。</li><li><strong>第7个参数：</strong><code>handle</code>表示执行拒绝策略的对象。当超过第5个参数<code>workQueue</code>的任务缓存区上限的时候，就可以通过该策略处理请求，是一种简单的限流保护。</li></ul><p>那么，我们上面的实例化是怎么写的？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建线程池1</span></span><br><span class="line">threadPool = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">SIZE_CORE_POOL,</span><br><span class="line">SIZE_MAX_POOL,</span><br><span class="line"><span class="number">10L</span>,</span><br><span class="line">TimeUnit.MILLISECONDS,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),</span><br><span class="line">namedThreadFactory);</span><br></pre></td></tr></table></figure><p>我们把<code>LinkedBlockingQueue&lt;Runnable&gt;()</code>作为缓存队列，我们不关心的它内部实现，通过源码可以知道它是一种无限队列，构造器容量默认值大小是<code>Integer.MAX_VALUE</code>，往往在生产场景中很难达到这个值，所以像我上面这样写是极其不科学的，应该根据实际场景设置一个可承载容量大小，并配合<code>handle</code>做出拒绝策略，才是一个完整的流程。</p><p>我们稍微熟悉了它的构造方法之后，怎么知道它是如何工作的呢？另外我之前的迷思，为什么核心线程数始终等于4呢？</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>首先我们可以通过源码查看<code>execute</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Proceed in 3 steps:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class="line"><span class="comment">     * start a new thread with the given command as its first</span></span><br><span class="line"><span class="comment">     * task.  The call to addWorker atomically checks runState and</span></span><br><span class="line"><span class="comment">     * workerCount, and so prevents false alarms that would add</span></span><br><span class="line"><span class="comment">     * threads when it shouldn&#x27;t, by returning false.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2. If a task can be successfully queued, then we still need</span></span><br><span class="line"><span class="comment">     * to double-check whether we should have added a thread</span></span><br><span class="line"><span class="comment">     * (because existing ones died since last checking) or that</span></span><br><span class="line"><span class="comment">     * the pool shut down since entry into this method. So we</span></span><br><span class="line"><span class="comment">     * recheck state and if necessary roll back the enqueuing if</span></span><br><span class="line"><span class="comment">     * stopped, or start a new thread if there are none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3. If we cannot queue task, then we try to add a new</span></span><br><span class="line"><span class="comment">     * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class="line"><span class="comment">     * and so reject the task.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">    <span class="comment">// 1. 如果当前线程数 小于 corePoolSize，则尝试添加新线程</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 尝试向workQueue添加队列（offer方法在workQueue没有容量时，添加失败），线程已经存在不会创建新的线程，如果不存在则创建新的线程。</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">recheck</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 添加新线程，此处会比较maximumPoolSize，如果大于maximumPoolSize，则会使用饱和策略</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>addWorker</code>方法主要是动态的调整线程池的线程数量。从execute方法和addWorker方法可以看出，当前线程数优先与corePoolSize 比较，大于corePoolSize ，则与workQueue容量比较；如果当前线程数大于workQueue容量，则与maximumPoolSize比较；如果当前线程数大于maximumPoolSize，则执行饱和策略；最后，根据饱和策略做出相应的处理。</p><p>所以我粗略的总结下<strong>当corePoolSize（核心线程数）满了，接下来的线程先进入workQueue（任务队列），当队列也满了之后，创建新线程，直到达到maximumPoolSize（最大线程数），之后再尝试创建线程时，会进入拒绝rejectedExecution。</strong></p><p>所以为什么线程池的核心线程数一直是4个，因为多余的都处在任务队列阻塞中，由于未设置一个容量大小，所以这个容量非常的大，其实是超出我们的处理能力的，我们程序始终就也没能够达到最大线程数。或者可以这么理解，这个maximumPoolSize算是一种比较坏（极限）的情况，很少情况并不会真的按照这个数量处理任务，只有当任务队列都不够时，才会继续创建线程，直到达到最大线程数，超过了之后就必须要handle来处理拒绝策略了。</p><h1 id="饱和拒绝策略"><a href="#饱和拒绝策略" class="headerlink" title="饱和拒绝策略"></a>饱和拒绝策略</h1><blockquote><p>好吧，面试被问到了有哪些策略，2020.11.4 更新一下。</p></blockquote><ul><li><p>默认的<strong>AbortPolicy</strong>：</p><p><strong>ThreadPoolExecutor.AbortPolicy：</strong>丢弃任务并抛出RejectedExecutionException异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A handler for rejected tasks that throws a &#123;@code RejectedExecutionException&#125;.</span><br></pre></td></tr></table></figure><p>这是线程池默认的拒绝策略，在任务不能再提交的时候，抛出异常，及时反馈程序运行状态。如果是比较关键的业务，推荐使用此拒绝策略，这样子在系统不能承载更大的并发量的时候，能够及时的通过异常发现。</p></li><li><p><strong>DiscardPolicy</strong></p><p><strong>ThreadPoolExecutor.DiscardPolicy：</strong>丢弃任务，但是不抛出异常。如果线程队列已满，则后续提交的任务都会被丢弃，且是静默丢弃。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A handler for rejected tasks that silently discards therejected task.</span><br></pre></td></tr></table></figure><p>使用此策略，可能会使我们无法发现系统的异常状态。建议是一些无关紧要的业务采用此策略。例如，本人的博客网站统计阅读量就是采用的这种拒绝策略。</p></li><li><p><strong>DiscardOldestPolicy</strong></p><p><strong>ThreadPoolExecutor.DiscardOldestPolicy：</strong>丢弃队列最前面的任务，然后重新提交被拒绝的任务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A handler for rejected tasks that discards the oldest unhandled request and then retries &#123;@code execute&#125;, unless the executor is shut down, in which case the task is discarded.</span><br></pre></td></tr></table></figure><p>此拒绝策略，是一种喜新厌旧的拒绝策略。是否要采用此种拒绝策略，还得根据实际业务是否允许丢弃老任务来认真衡量。</p></li><li><p><strong>CallerRunsPolicy</strong></p><p><strong>ThreadPoolExecutor.CallerRunsPolicy：</strong>由调用线程处理该任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A handler for rejected tasks that runs the rejected task directly in the calling thread of the &#123;@code execute&#125; method, unless the executor has been shut down, in which case the task is discarded. </span><br></pre></td></tr></table></figure><p>如果任务被拒绝了，则由调用线程（提交任务的线程）直接执行此任务。</p></li><li><p>自定义一个<strong>Policy</strong></p><p>实际开发中，我们还是会自定义一个Policy策略，比如写入日志、数据库等等。</p></li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>好了，既然大致了解了线程池的工作原理之后，可以进行一个测试来验证以下是否符合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThreadPool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ThreadFactory</span> <span class="variable">tf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadFactoryBuilder</span>()</span><br><span class="line">            .setNameFormat(<span class="string">&quot;factory-pool-%d&quot;</span>).build();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">10L</span>,</span><br><span class="line">            TimeUnit.MINUTES, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">50</span>), tf);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;================start================&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            threadPoolExecutor.execute(<span class="keyword">new</span> <span class="title class_">Task</span>(String.valueOf(i)));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;================end================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(TestThreadPool.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Task</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;[ &quot;</span> + name + <span class="string">&quot; ]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(name + <span class="string">&quot;只要干不死，就往死里干，奥利干！！&quot;</span>);</span><br><span class="line">        <span class="comment">// System.out.println(name + &quot;奥利给！！&quot;);</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个线程类<code>Task</code>，在<code>run</code>方法中打印一句「正能量」，然后<code>sleep</code>2秒来模拟处理这个任务。我们创建一个核心线程数为<strong>4</strong>，最大线程数<strong>8</strong>，容量大小为<strong>50</strong>的<code>LinkedBlockingQueue</code>队列，然后在循环中持续创建线程。当成功创建完这100个线程之后，应该会有<code>====================end====================</code>打印出来。</p><p>我们可以期待一下结果是什么？</p><p>按照上面的工作流程来说，有几种情况：</p><ol><li>线程处理的速度远远大于线程创建的速度，可能4个核心数都完全够用，甚至用不到<code>workQueue</code>，最后打印了end。emmm，当然从我们写的测试代码来说几乎是不可能的，for循环表示：烙呢？中国🇨🇳速度嗷！</li><li>线程创建的速度大于回收速度，但是<code>workQueue</code>和<code>maximumPoolSize</code>完全可以支撑，100个线程创建成功并完成任务。</li><li>当<code>corePoolSize</code>和<code>workQueue</code>以及<code>maximumPoolSize</code>都过载，丢弃任务并抛出<code>RejectedExecutionException</code>异常了。</li></ol><p>其实可以很明显知道，<code>sleep</code>2秒加上<code>logger.info()</code>方法，线程的创建的速度一定是大大于执行的。按照4、8、50的配置，当地<strong>58</strong>个创建被创建成功之后，要是目前没有任何一个线程被释放的话，第<strong>59</strong>个线程会因为上限问题而被拒绝，这时候就会抛出异常了。当然这是个<code>for</code>循环，产生的速度足够快，基本上100次循环完成，第一个线程都没完成，所以可以大胆猜测，<code>logger</code>一共会打印58行日志，并伴随着<code>RejectedExecutionException</code>的出现。</p><p>我们看一下运行的结果：</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/thread-pool/RejectedExecutionException.png" alt="异常它lei了"></p><p>果然第<strong>58</strong>个线程被创建之后，后续第<strong>59</strong>个线程想被创建就抛出了异常，如图刚好是58行（0 ~ 57），也没有<code>====================end====================</code>的出现。</p><h1 id="奥利给"><a href="#奥利给" class="headerlink" title="奥利给"></a>奥利给</h1><p>当我们把这个线程类的<code>run</code>方法分别改成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// logger.info(name + &quot;只要干不死，就往死里干，奥利干！！&quot;);</span></span><br><span class="line">System.out.println(name + <span class="string">&quot;奥利给！！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// logger.info(name + &quot;只要干不死，就往死里干，奥利干！！&quot;);</span></span><br><span class="line"><span class="comment">// System.out.println(name + &quot;奥利给！！&quot;);</span></span><br><span class="line">logger.info(name + <span class="string">&quot;奥利给！！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别看下结果：</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/thread-pool/sout.png" alt="奥利给"></p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/thread-pool/logger.png" alt="奥利给大失败"></p><p>看来<code>org.slf4j.Logger.info()</code>的耗时不是一般的长，比<code>System.out.println() </code>还长。</p>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 线程池 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2019</title>
      <link href="/post/b11fe710-1fae-11ea-9d8a-c3eaf7e57853/"/>
      <url>/post/b11fe710-1fae-11ea-9d8a-c3eaf7e57853/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h1><p>这一年心态上的起伏，2019年算是完全正式工作的一年，这一年感觉大家好像都不怎么满意，资本寒冬，每况愈下，但是自己状态不能拉胯。</p><h1 id="身体"><a href="#身体" class="headerlink" title="身体"></a>身体</h1><p>从3月份起计划在家简单健身维持运动量和塑形（主要是为了能增肌身材匀称些长胖点，现在实在是太瘦了），购置了哑铃、哑铃凳、瑜伽垫等器具。训练的动作也不多，按照keep上来实行哑铃复合动作、哑铃卧推、俯卧撑和深蹲。但是坚持不到2、3个月便吃灰了。</p><p>究其原因，一是个人意志力过于薄弱；二是没有按照日期制定实际的执行计划。第二点其实很关键，如果只是脑袋里有个一周几次的想法，很容易因为太累、其他事情等原因被自我说服从而无限推迟。有个每周训练表格，硬性规定那天一定做够训练量相对会好多。</p><p>看牙一次、胃镜一次、体检一次，倒是没什么毛病。</p><h1 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h1><p>今年没什么理财投资计划，目前也没有什么存钱计划，该用用该花花。</p><p>大概回想了下估计和往年一样很大一部分花费在服饰上（哈哈，完全不是程序员的作风）。自从去年重回了虎扑潮流区，就开启我的时装学习之旅。抛弃掉原来的工装裤、运动鞋、大LOGO的憨憨大学生套装，将眼光望向Greg Lauren、 Song for the Mute、Guidi、Maison Margiela、Amiri、Fear of God、Raf Simons、Yohij Yamamoto、Balenciaga、Dsquared2、Jil Sander这些偏时装、奢侈品的牌子。</p><p>上一年还在读带学的我还穿着Uniqlo U系列、Converse 1970s、Nike Air Force1这些学生爆款，憨憨的认为Supreme、Palace才是潮人的时候，突然就接触到了更高阶的东西，就像一个人在犹豫选择思域还是马自达昂克塞拉的时候，突然被邀请去试驾AMG-GT。可能这辈子以后永远都不会再穿AJ这些了吧。</p><p>慢慢认识到剪裁和面料带来的内味儿和高级感是一些<strong>「钱不到位」</strong>的东西无法比拟的，说白了钱不够是永远穿不到<strong>「真正好看」</strong>的服装的。</p><p>到今年才终于意识到了T恤的好看的精髓，既不是oversize的落肩也不是阳光干净的窄领口，<strong>而是廓形的胸围。</strong></p><p>开始尝试破洞紧身牛，但是由于人瘦腿长，没有一条紧身牛能穿出裤脚堆叠高街的内味儿，反而容易变成精神boy（是真难买裤子啊）。</p><p>想尝试切尔西靴，但是选择高不成低不就的那种感受属实难受。现在真是一个尴尬的节点啊，眼界上来了，钱包没跟上，反而更加不容易满足。</p><h2 id="想买的东西"><a href="#想买的东西" class="headerlink" title="想买的东西"></a>想买的东西</h2><ul><li>今年本来想买一只Seiko千米罐头，价格也比较合适，但是质量比较重并且冬天感觉过厚不宜佩戴，还在观望中。</li><li>一台27寸iMac。虽然不是144hz，但是优质的5K屏幕还是让人赏心悦目。从单位的macOS到家里的Windows会让工作流很容易断（不是加班），并且Windows没有那种容易让人产生学习的欲望。</li></ul><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>2019年对我的思想上有着不小的提升。</p><p>学会对任何事情提出质疑；思考问题相比之前会更加多维度的切入；工作上做一件事会考虑它的责任划分、职能问题、带来的影响；与人交际更加谨慎了（也不知道是好是坏）。</p><p>我一直是一个很理性的人，很少会被舆论煽动情绪。很讨厌跟风，但是这种讨厌不是狭义上的对事物本质上的「讨厌」，而是讨厌大众的东西，更倾向于差异化的标签。</p><p>今年的工作依然很杂乱：项目管理、软件开发、业务测试、系统运维。我知道现在的情况不可能允许我全身投入开发中，所以会有所计划了。</p><p>2018年我还是个讨厌写代码的臭弟弟，还在思考实习毕业之后如何逃离编程苦海，但是在正式入职后，由于广电工作的杂，居然慢慢的培养了写代码的兴趣。2019年是个快速成长的一年，犹如一个婴童开始爬爬走走，拥有了思想，也侧面强调了大学时期的我是多么的废物。也让我明白了兴趣和热爱才是真正能做事的根本，什么信念、意志都是狗屁。</p><h1 id="接下去想干的事情"><a href="#接下去想干的事情" class="headerlink" title="接下去想干的事情"></a>接下去想干的事情</h1><ul><li>去日本感受下童年的记忆，Shopping；</li><li>打个耳洞？（想走艺术路线了嗷）；</li><li>留个长发？（想走艺术路线了嗷）；</li><li>学一下游泳，觉得游泳好处实在多，小学的时候半途而废了；</li><li>想系统地学习下声乐，想当年还是艺术表演队的。变声期之后，音域异常的窄，估计其实是长期发声位置的问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 轨迹 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019.12.12</title>
      <link href="/post/5ab83c90-1cea-11ea-8d2d-637e03d8f4d1/"/>
      <url>/post/5ab83c90-1cea-11ea-8d2d-637e03d8f4d1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不正确，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ae4035732b005c49879e16eb5df67a73149014503a73f7ea27c9242827f10fc2">3bc97cd04c5ac874daf420cc647c86936afb2c613becee1541baf45818e4bd0d26ab6775c0f3c99b62d5eb61c4b877df4d19ca2e7ddfd3e208994a252b21938b7ddfb1b7af948aa6980135ab4b60b67c05c846612952b5ec3a22bd2719365e319179d2b00d969d926077a09392dc7a93f44ce62c0674653ca6cee858df592774c0b1f81968d7d04ce24fe342c63d20bc438c74818a0a24562c3fbfa637fb771a7d4a20bb0ff9e6062d7bb76145d00fb0df90656b8084c659bd7eb8827b63af7031ef3c2fa68c9f50691bf66e8c2b865406f3e9dcfef1f7a8e179c3c1645e1f171a6da18709f1ef2cb9253955f15fb450de7c35a10b2ad3eb2fc469bfa7495281d20fc650e2921f660df66484b40b4d1ab2d8898d681f6995d4b03d8cbef6750935ab314cf20dd88b065eeac755ccaa0f6ad3fcac0aa63b2bfba94b2da7ad17ee33754542f47e463c83495bf9f3dbde17cd82806c8ef03cdf2f85b925c7c4e704f3f1be8d73d44dd3a930ff8322250b7ab7a999070705f7deb73cb01af2c0397ab32c46f0630e72dba2b9d10aa94b872429c010cb38f638dcafd0a30afe2189a2be46362af8dddd15fc91d16cb1841d5f45724a92d389deeef3162952365914029ca183fe526d38a116d6a4379cb5ad14b256991e60be80c464ce6450c110fce697ca1128d430adbc6f15d5679a54f27fc5dd9b8b3371bde56f6f260bf64b763dd604291d686ba76c85f1deb54e26e07dd2571c19c4c5df514e2f625f6fc483f778ff94526ee521ad59067ceb9166e83286ba570220d2ea475735e2121a9bd2e702246620b87bd4a540fc4a143ac4f9c83792f485e9f59d047d7e22f82fd8ca3c0e42b4670e6dc099f9b90f64c7223889f057f7e7a36c3fd5379c86b6c1369c1ebf96d1cdf4285e07087d28e6922d7fa5b0c3c4fafd01f2bd465c8020286470a6c6074f6dc405f011ffcc18a952a8b2a7e6c65a8b2f6fde50c972858b012ea94e98f6097a3e2e2945b0201272e23173588f823c9458fff191d068231d007d1cf0f30fdd12c8009b76801c6762e97df3b439cc9ea24b12ea9a97380a67db731b3d5ca8c4326c08ee233bb63ebb4941f3ba94d79765516c43bff908380417ab66379e513bfe31d52191352e6e40b6223458d59433bfe25cf07892f310d762fd528ed3ecd3220e3621f9e4e4918e50b72d5df6518b49f112b640d4903a6d8b4c43a38bf18c0ed01775f5c1c244276e2341a984231325ee8c6010566ba1b3f6dd4795d3019e88fb69baf81fb8c04260028cf9b6960f5c3304c4e8000f4f2156ac1a5dbf83b21a1efd604d8cb69868dda52d98e571b94333ac6871366b8de54b4af91cef42b25dc35f7d9803c8418c2902e43cb3fdcb44b85fa4719c17f7ca9647dcbe3ebbbbfcb6c67f88e7b2db3831d11ccd540179b494484c7aff6e61e207e82ff15a8b348951b4f079178268bb54cb0982323773f17c38012e0a31edcc5660b6a6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">心态</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 轨迹 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis搭配生产者消费者模型</title>
      <link href="/post/237a2190-1258-11ea-a4fe-c7eac48cbd2c/"/>
      <url>/post/237a2190-1258-11ea-a4fe-c7eac48cbd2c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis作为一款优秀的缓存中间件，人们总是寄予他新的厚望。其列表类型的阻塞操作可以实现消息队列。</p><p>在场景中使用可以牢记以下口诀：</p><ul><li><p><strong>lpush + lpop &#x3D; Stack(栈)</strong></p></li><li><p><strong>lpush + rpop &#x3D; Queue(队列)</strong></p></li><li><p><strong>lpsh + ltrim &#x3D; Capped Collection(有限集合)</strong></p></li><li><p><strong>lpush + brpop &#x3D; Message Queue(消息队列)</strong></p></li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>假如有这样的一个需求，现有一套「较老」的公共服务可供你的系统使用，但是目前还有其他业务单位正在使用。每次请求调用下发一个任务，接着服务会响应一个回调接口，通过这个回调接口，你可以查询这个任务的执行状态，到了什么阶段，是否完成之类的。任务从下发到结束需要一定的时间，并且任务结束总是以两种状态出现：<strong>Completed</strong>或者<strong>Error</strong>。</p><p>假设这套公共服务分配给你了N个容量可以同时进行任务的调度，也就是说你系统调用下发的任务只能是N，当超过N时，就需要自定义一个队列来进行排队。当有任务完成时，任务执行池就可以释放一个空位，队列就可以pop出一个消息用于处理调用公共服务。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><strong><font color = red>为了充分深入Redis的列表的使用，</font></strong><font color = red>我打算把所有的需求点和场景都交给Redis去完成。</font></p><p>所以这个需求看起来比较简单，就变成了也有麻烦的地方，主要是四个：</p><ol><li>由于其他业务单位的存在，本系统需要有一个缓冲池和任务执行池<code>Running Pool</code>，容量为可分配的N。</li><li>业务量增加超过N时，需要有个等待队列维护出入：当目前任务执行池<code>Running Pool</code>满载时，入队；当任务<code>Running Pool</code>中的任务执行完成释放空位时，则出队进入<code>Running Pool</code>。</li><li>「实际处理」的任务并不是执行在本系统而是在公共服务上，也就是说任何状态只能<strong>被动</strong>地通过公共服务的回调接口去查。</li><li>当存在N个正在执行的任务时，单线程肯定是效率不够的。需要开启多线程去回调公共服务的接口判断任务状态是否完成&#x2F;失败，用于下一步操作出入队列。</li></ol><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><ol><li><p>我们可以在Redis中规划一块任务执行池<code>Running Pool</code>，可以是Set类型也可以是List类型，容量为N。设计这样的一个队列有个好处是如果单纯的<code>PUSH/POP</code>的话，当出队之后处理这个消息的过程中发生不可抗力、宕机，消息出队之后就会永远的丢失掉，而这样做则是消息始终持久化在Redis中，是任务结束之后出队；</p></li><li><p>有一个等待队列<code>Pending Queue</code>用于缓冲，消费者需要处理上面和这一块的业务逻辑；</p></li><li><p>一个<code>Completed Queue</code>用于完成消息的推送；</p></li><li><p>一个<code>Error Queue</code>用于任务失败消息的推送（<strong>这两者其实可以合并，作为任务结束的消息便可，具体内容可以放在value中，也通过读写DataBase。</strong>）</p></li></ol><p>为了不出现当任务队列中没有任务时，消费者每秒都会调用一次POP命令查看是否有新任务这种情况，需要在消费者中同时处理业务逻辑，当任务执行缓冲池出队时，把<code>Pending Queue</code>的消息出队，入队到<code>Running Pool</code>。</p><p>所以我们需要一个生产者RedisProducer（部分代码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> ProduceDTO <span class="title function_">produceTask</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * 数据处理代码段...</span></span><br><span class="line"><span class="comment">     * 部分业务逻辑...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 判断running queue是否还有空位</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">condition</span> <span class="operator">=</span> !redisBase.hasKey(RUNNING_QUEUE) || redisBase.lGetListSize(RUNNING_QUEUE) &lt; RUNNING_QUEUE_SIZE;</span><br><span class="line">    <span class="comment">// 如果有空位</span></span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">        redisBase.lSet(RUNNING_QUEUE, orderId, -<span class="number">1</span>, TimeUnit.DAYS);</span><br><span class="line">        <span class="comment">// 开启服务</span></span><br><span class="line">        logger.info(<span class="string">&quot;================================开启转码服务================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">         * 任务订单持久化代码段...</span></span><br><span class="line"><span class="comment">         * 部分业务逻辑... </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         <span class="type">boolean</span> <span class="variable">isUpdate</span> <span class="operator">=</span> iTaskInfoService.modifyTaskByOrderId(produceDTO);</span><br><span class="line">         <span class="keyword">if</span> (isUpdate) &#123;</span><br><span class="line">             <span class="comment">// 调用消费者</span></span><br><span class="line">             redisConsumer.consumerMessageThread(produceDTO);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MatthewHanException</span>(ServiceEnum.FIRST_UPDATE_TRANS_TASK_ERROR.getCode(), ServiceEnum.FIRST_UPDATE_TRANS_TASK_ERROR.getMessage());</span><br><span class="line">         &#125;</span><br><span class="line">            <span class="keyword">return</span> produceDTO;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没空位，则消息先进入pending queue</span></span><br><span class="line">        redisBase.lSet(PENDING_QUEUE, orderId, -<span class="number">1</span>, TimeUnit.DAYS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> produceDTO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此部分主要是先判断Redis的<code>Running Pool</code>是否还有空余，无空余则进入<code>Pending Queue</code>等待。进入了<code>Running Pool</code>的消息做DataBase的持久化业务逻辑。这一句<code>redisConsumer.consumerMessageThread(produceDTO);</code>则是主动调用消费者。</p>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 消息 </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谜の生产力插件/工具推荐（一）</title>
      <link href="/post/c875c320-10b4-11ea-b56b-c33ebe3aaf5c/"/>
      <url>/post/c875c320-10b4-11ea-b56b-c33ebe3aaf5c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>以下推荐的工具都是个人挖掘和网友介绍得来，相对于程序开发者来说较为友好。</p><h1 id="Chrome插件相关"><a href="#Chrome插件相关" class="headerlink" title="Chrome插件相关"></a>Chrome插件相关</h1><blockquote><p>过多的插件会影响使用体验。</p></blockquote><h2 id="Octotree"><a href="#Octotree" class="headerlink" title="Octotree"></a>Octotree</h2><p>过去我们在GayHub上预览代码时，常常需要不停地前进下一页和回退上一页操作来更全面的获取想要的信息。虽然GayHub有着不错的搜索功能，但是对于一个陌生的项目来说，它的结构没有很清晰直观地展示出来，我们无法快速定位到任何一处来浏览我们想要的信息。</p><p>Octotree字如其名可以将代码的结构以树形展示，可以实现对工程项目结构的大致了解，快速定位到我们想去的任何地方。另外可以固定在每一个repository的左侧或者右侧。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/octotree.gif" alt="使用演示"></p><p>Octotree拥有账号服务，当你注册了账号之后：</p><ul><li>可以在repository页面上的仓库名称右边有一个加入bookmark的按钮，可以将你的repository收藏到bookmarks中，方便直接查找，非Pro版本拥有20个仓库的容量。</li><li>可以切换代码高亮的主题，例如<code>dark♂</code>主题之类的。</li><li>支持Chrome、Firefox、Opera、Safari。</li></ul><h3 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h3><ul><li><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=zh-CN">Chrome Web Store</a></li><li><a href="https://github.com/ovity/octotree">GitHub</a></li></ul><h2 id="Vimium"><a href="#Vimium" class="headerlink" title="Vimium"></a>Vimium</h2><p>怀念Vim？害怕鼠标手（👴大二左手有过腱鞘炎，诶？为什么是左手）？Vimium都可以满足你。Vimium通过全键盘操作，可以暂时脱离鼠标，高效完成一系列动作。需要一定学习成本，但是只需学习高频操作的快捷键即可熟练地高效操作了。</p><p>如果忘记了快捷键，只需要调用<code>？</code>即可呼出Vimium Help查看所有快捷键指令。</p><p>常用指令<code>j</code>，<code>k</code>控制scroll的上下滚动；大小<code>o</code>可以选择是否以新标签页的形式打开地址栏，不过不如直接按<code>T</code>，呼出新标签页再键入地址好用。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/vimium1.png" alt="操作快捷键"></p><p>其中<code>f</code>快捷键是个重点，它帮你筛选出当前页面的所有可跳转链接，并用字符高亮显示，只需对应页面上的高亮字符用键盘键入相应的字符，即可进入链接地址。其中<code>f</code>是覆盖当前页面，<code>F</code>以新标签页的形式打开链接。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/vimium2.gif" alt="官方演示"></p><h3 id="获取方式-1"><a href="#获取方式-1" class="headerlink" title="获取方式"></a>获取方式</h3><ul><li><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=zh-CN">Chrome Web Store</a></li><li><a href="https://github.com/philc/vimium">GitHub</a></li></ul><h2 id="新浪微博图床"><a href="#新浪微博图床" class="headerlink" title="新浪微博图床"></a>新浪微博图床</h2><p>需要运营静态网站的人来说，把部分媒资素材分离并持久化是一个必要的选择。当然，稳定快速的读取并渲染展示也是支撑用户群的关键。普遍对象存储OSS都拥有直链+CDN的模式，对于访问量不高的情况下，直链的效果即可。8️⃣过目前CDN处理的比较好的有七牛和又拍云CDN，当然如果我们只是玩玩，我们还可以选择免费的新浪微博图床插件。</p><p>这款名叫Weibo-Picture-Store的扩展插件由<a href="https://github.com/Semibold">Neko Atsume</a>组织开发并开源在GayHub上。其原理就是利用新浪微博的微相册变成可支持外链的图床，在微相册中会创建一个新的相册，并且设置成为「仅自己可见」。</p><p>可以手动通过扩展插件的窗口手动上传图片，并得到4种形式的地址，Markdown的形式对于博客编写者来说十分友好。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/weibo.png" alt="界面图"></p><p>除了可以手动传图到微相册以外，该扩展还支持互联网上的图片，鼠标右键选择把这张图片上传到微相册。所有的上传记录都可以在扩展插件中浏览。</p><h3 id="获取方式-2"><a href="#获取方式-2" class="headerlink" title="获取方式"></a>获取方式</h3><ul><li><a href="%5Bhttps://chrome.google.com/webstore/detail/%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/pinjkilghdfhnkibhcangnpmcpdpmehk%5D(https://chrome.google.com/webstore/detail/%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/pinjkilghdfhnkibhcangnpmcpdpmehk)">Chrome Web Store</a></li><li><a href="https://github.com/Semibold/Weibo-Picture-Store">GitHub</a></li></ul><h2 id="Saladict-沙拉查词"><a href="#Saladict-沙拉查词" class="headerlink" title="Saladict 沙拉查词"></a>Saladict 沙拉查词</h2><p>作为一名程序员不可避免的要查阅各种官方、非官方的英文文档。有些核心语句和专业词汇十分需要一个翻译工具来做第一步：让你知道这个大概是什么意思，至于具体是什么含义需要自己去理解。</p><p>很多人说为什么不用Chrome自带的翻译？呃，自带的翻译确实够用了，但是往往只有中翻英，沙拉查词可以在后台配置多本词典，必应、柯林斯高阶、有道、剑桥等等，根据不同的词典可以翻译成多种语言，并且划词可以直接朗读。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/saladict.png" alt="多本词典多种语言翻译"></p><h3 id="获取方式-3"><a href="#获取方式-3" class="headerlink" title="获取方式"></a>获取方式</h3><ul><li><a href="https://chrome.google.com/webstore/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D-%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg">Chrome Web Store</a></li><li><a href="https://github.com/crimx/ext-saladict">GitHub</a></li></ul><h2 id="Adblock-For-YouTube"><a href="#Adblock-For-YouTube" class="headerlink" title="Adblock-For-YouTube"></a>Adblock-For-YouTube</h2><p>拥有5,919,658名用户的爆款去广告扩展插件，专为YouTube打造。喜欢看YouTube视频的朋友都知道虽然YouTube视频的片头广告可以跳过，但是在一定程度上会割裂观看体验。</p><p>👴在用了4年时间里经常在想这么出名并且有效的插件，为什么YouTube一直没有采用应对措施呢？难不成就是YouTube自己的产品。</p><h3 id="获取方式-4"><a href="#获取方式-4" class="headerlink" title="获取方式"></a>获取方式</h3><ul><li><a href="https://chrome.google.com/webstore/detail/adblock-for-youtube/cmedhionkhpnakcndndgjdbohmhepckk?hl=zh-CN">Chrome Web Store</a></li></ul><h1 id="Mac软件"><a href="#Mac软件" class="headerlink" title="Mac软件"></a>Mac软件</h1><blockquote><p>我也想当正版侠</p></blockquote><h2 id="uTools"><a href="#uTools" class="headerlink" title="uTools"></a>uTools</h2><p>为什么这个要放在第一个呢？</p><p>因为，</p><p>它有、东西。</p><p>可以这么说，有了这么一个工具平台之后，上下文中的某些工具可能完全被uTools中的工具替代。</p><blockquote><p>世界这么复杂</p><p>一个</p><p>就够了</p></blockquote><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/finalshellsearch.png" alt="纷繁化简"></p><h3 id="获取方式-5"><a href="#获取方式-5" class="headerlink" title="获取方式"></a>获取方式</h3><ul><li><a href="https://yuanliao.info/">官网地址</a></li></ul><h2 id="Downie3"><a href="#Downie3" class="headerlink" title="Downie3"></a>Downie3</h2><p>互联网视频的下载怪，只需要在窗口输入视频地址即可下载，支持后期处理。</p><p>支持的网站众多，可在偏好设置中查看。目前国内网站大部分被收录（<del>大概吧</del>），17173、bilibili、163等等。</p><p>安装完之后还需要按照官网的指示在Chrome扩展程序中加载解压好的Downie3扩展程序。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/downie1.png" alt="支持的网站"></p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/downie2.png" alt="视频下载"></p><p>Downie3是收费的，具体的「使用方法」就因人而异了。</p><h3 id="获取方式-6"><a href="#获取方式-6" class="headerlink" title="获取方式"></a>获取方式</h3><ul><li><a href="https://software.charliemonroe.net/downie/">官方地址</a></li></ul><h2 id="FinalShell"><a href="#FinalShell" class="headerlink" title="FinalShell"></a>FinalShell</h2><p>一款ssh工具，开发者也活跃在v2ex。据说是Java编写的，点个赞嗷！</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/finalshell1.png" alt="主页面"></p><p>macOS中的ssh工具本来就不多，之前使用的SSH Shell会出现多节点闪退的问题，FinalShell不但稳定运行，并且还将x-ftp和xshell的功能结合，十分好用了。</p><h3 id="获取方式-7"><a href="#获取方式-7" class="headerlink" title="获取方式"></a>获取方式</h3><ul><li><a href="http://www.hostbuf.com/">官方地址</a></li></ul><h2 id="Xnip"><a href="#Xnip" class="headerlink" title="Xnip"></a>Xnip</h2><p>非常好用的一款截图，功能性和美观性上基本取代微信、QQ、macOS系统截图。</p><p>主要有以下几点：</p><ul><li><p><strong>滚动截图</strong></p><p>非常好用，长截图必备，再也不用截多张图了，一气呵成，内容直观呈现。</p></li></ul><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/xnip2.gif" alt="演示"></p><ul><li><p><strong>窗口截图</strong></p><p>可支持屏幕多窗口截图，效果就像上面几张图，边缘自带阴影，效果就像浮在纸面一样，非常好看，逼格满满。</p></li><li><p><strong>步骤模式</strong></p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/xnip4.png" alt="步骤模式效果"></p></li><li><p><strong>贴图</strong></p><p>这个也超好用，因为很多时候朋友、同事发给你一张图片，你需要边看图片提取内容信息边工作，这时候就像Photoshop的图层一样可以使用截图「钉」在桌面最上层，使截图置顶，再干别的工作也不会把截图覆盖了。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/xnip3.jpg" alt="贴图效果"></p></li></ul><h3 id="获取方式-8"><a href="#获取方式-8" class="headerlink" title="获取方式"></a>获取方式</h3><ul><li><a href="https://zh.xnipapp.com/">官网地址</a></li></ul><h2 id="iPic-iPic-Mover"><a href="#iPic-iPic-Mover" class="headerlink" title="iPic &amp; iPic Mover"></a>iPic &amp; iPic Mover</h2><p>以下两款工具比较嗯，不支持Windows。</p><ul><li><p><strong>iPic</strong></p><p>实际还是图床工具，可以拖拽上传图片，自动生成Markdown链接，对于图床的云服务自行选择配置（支持新浪微博、七牛、又拍云、阿里腾讯、亚马逊等等），非Pro版只能使用默认的新浪微博的云服务，必须订阅之后才能全部解锁。如果这方面需求不大的话，没必要嗯冲，因为uTools就有官网开发的图床工具了，只不过iPic在使用交互体验上来说算是最方便的，因为他可以搭配<a href="http://www.typora.io/">Typora</a> ，Typora集成了 iPicUploader，可以调用 iPic 上传。</p></li><li><p><strong>iPic Mover</strong></p><p>字如其名，文件迁移，支持文件夹下的Markdowm内的图片，iPic Mover 是通过调用 iPicUploader，将图片上传至 iPic 当前选中的图床。由于需要调用 iPic 来上传图片，iPic Mover 在运行时会检测 iPic 是否安装。如果未安装，会提示在 Mac App Store 下载。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/iPic%20Mover.gif" alt="演示"></p></li></ul><h3 id="获取方式-9"><a href="#获取方式-9" class="headerlink" title="获取方式"></a>获取方式</h3><ul><li><a href="%5Bhttps://apps.apple.com/cn/app/ipic-markdown-%E5%9B%BE%E5%BA%8A-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7/id1101244278%5D(https://apps.apple.com/cn/app/ipic-markdown-%E5%9B%BE%E5%BA%8A-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7/id1101244278)">iPic Apple Store</a></li><li><a href="https://apps.apple.com/cn/app/id1183822957?mt=12">iPic Mover Apple Store</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具推荐 </tag>
            
            <tag> 生产力 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows平台Redis Cluster集群模式的坑</title>
      <link href="/post/32c6b4c0-09e7-11ea-8010-7bbe2de22c19/"/>
      <url>/post/32c6b4c0-09e7-11ea-8010-7bbe2de22c19/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在一台迷のWindows机器上搭建了一个单节点模拟的三主三从redis集群，过程中有一些坑记录下。</p><h2 id="cluster模式"><a href="#cluster模式" class="headerlink" title="cluster模式"></a>cluster模式</h2><p>Redis的Cluster模式工作至少需要三个主节点，所以一般采用三主三从实现负载。</p><p>较理想的环境是一个实例单节点部署主从，多个实例实现集群。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/windows-redis%E9%9B%86%E7%BE%A4/redis-cluster.png" alt="集群架构"></p><p>由于Redis Cluster采用哈希分区规则，哈希分区一般有以下几种方式：</p><ol><li>节点取余分区</li><li>一致性哈希分区</li><li>虚拟槽分区</li></ol><p>其中Redis Cluster就是采用虚拟槽分区，虚拟分区也是利用哈希空间，使用分散使用分散度良好的哈希函数把所有 数据映射到一个固定范围的整数集合中，整数定义为槽(slot)。这个范围一般远远大于节点数，比如Redis Cluster槽范围是0~16383。槽是集群内数据 管理和迁移的基本单位。采用大范围槽的主要目的是为了方便数据拆分和集群扩展。每个节点会负责一定数量的槽。</p><p>假设当前集群有5个节点，每个节点平均大约负责3276个槽。由于采用高质量的哈希算法，每个槽所映射的数据通常比较均匀，将数据平均划分到5个节点进行数据分区。</p><h2 id="修改集群的配置文件"><a href="#修改集群的配置文件" class="headerlink" title="修改集群的配置文件"></a>修改集群的配置文件</h2><p>一般redis.windows.conf中有以下需要修改：</p><ol><li><code>port</code>：端口号，三主三从的集群，由于是一台机器，需要6个进程模拟，所以端口号也需要6个，可以从7001~7006；</li><li><code>cluster-enabled</code>：<code>yes</code>表示开启集群模式，存储方式<code>aof</code>，会将写操作记录到日志中。</li><li><code>cluster-config-file</code>：定义一个文件，节点配置的一些信息，节点握手🤝、连接时间戳这些都保存在一个配置文件中，由redis创建和更新。<strong>每个集群节点都需要不用饿集群配置文件。</strong></li><li><code>cluster-node-timeout</code>：集群超时时间，单位毫秒，节点超过这个时间，依然无法建议通讯就可以判断是宕机了，如果可以的话需要启动从节点选举成主节点的机制。</li><li><code>bind</code>：绑定本机网卡的ip地址，这个比较重要，如果<code>bind</code>127.0.0.1的话，即使集群所在的ip可达，外部服务不在同一ip下的话，是无法建立连接的。所以一般可以使用<code>ipconfig</code>或者<code>ifconfig</code>查看网卡的情况，选择合适的可达ip进行绑定。</li></ol><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><ul><li>用redis-trib.rb搭建集群</li></ul><p><code>redis-trib.rb</code>是采用Ruby实现的Redis集群管理工具。内部通过Cluster相 关命令帮我们简化集群创建、检查、槽迁移和均衡等常见运维操作，使用之前需要安装Ruby依赖环境。但是网上的很多教程<code>redis-trib.rb</code>已经失效的，版本和Ruby环境不匹配。如果发现无法使用的话，请去GitHub的<a href="https://github.com/beebol/redis-trib.rb">这个地址</a>。Linux环境在安装完rubygem redis依赖之后可以执行以下命令来安装<code>redis-trib.rb</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /&#123;redis_home&#125;/src/redis-trib.rb /usr/local/bin</span><br></pre></td></tr></table></figure><ul><li>登陆到集群上之后执行<code>set key value</code>命令之后可能会提示“Redirected to solt [xxxx] located  at ip:port”并且跳转到其他节点</li></ul><p>因为分片的机制，这个提示的意思是该key根据哈希算法得到slot是xxxx，这个slot应该分配在xxxx的所属区间，而不是当前节点，或者当前登陆的是salve节点，所以可能就会跳转到对应的master节点上。</p><ul><li>You should use redis-cli instead</li></ul><p>如果出现这个提示，表明原本的命令失效了，可以使用redis-cli命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli --cluster create masterIp:masterPort ...</span><br></pre></td></tr></table></figure><ul><li>can’t connect to redis-server</li></ul><p>首先先确认你的Redis集群服务开启了没，然后判断是否是密码的问题，最可能的还是配置文件<code>bind</code>填写的问题，假如没有部署在一个ip下的话，是否写成了<code>bind 127.0.0.1</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro在跨域请求中会遇到的302重定向问题</title>
      <link href="/post/67db7cc0-fea4-11e9-834c-4d127eed9f1a/"/>
      <url>/post/67db7cc0-fea4-11e9-834c-4d127eed9f1a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>这边要开发一套带有权限认证的平台，懒得自己写拦截器，于是还是打算利用Shiro安全框架，由于采用的还是Cookie-Session那老一套，并没有封装成token暂时也不用考虑集群多实例共享session的问题，所以其实前端的每次请求报文都是需要携带cookie的，cookie里面的jsessionid就是验证对应服务端中的session-data能否匹配。但是这次联调处理并不顺利，还是在开发阶段就问题频出。</p><p>在CORS协议中，前端如果需要每次携带cookie，就得把<code>withCredentials</code>设置成<code>true</code>。所以在开发阶段我将配置类的<code>Access-Control-Allow-Origin</code>设置成<code>*</code>，<code>Access-Control-Allow-Credentials</code>设置成<code>true</code>。</p><p>但是在遇到PUT方法的接口（非预检请求）时，由于options类型的预检请求不带cookie所以被拦截在外。</p><h1 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h1><p>请求分为非简单请求和简单请求，其中预检请求就是导致我们联调发生的问题的原因。</p><blockquote><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。</p><p>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。</p></blockquote><p>这里引用阮一峰的网络日志的一篇名为《跨域资源共享CORS详解》解释。当请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>就会触发询问服务器的回应，要求服务器确认可以这样请求。</p><p>之前的配置类由于服务端未放行，导致触发错误。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>我们将需要预检请求的方法<code>&quot;OPTIONS&quot;.equals(request.getMethod())</code>放行，同时把<code>Access-Control-Allow-Headers</code>和<code>Access-Control-Allow-Origin</code>设置成请求的HTTP头信息，这样可以保证都放行。实际的配置就是如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CorsFilterConfiguration</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 跨域资源共享</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/15 10:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;CorsFilterConfig &quot;)</span></span><br><span class="line"><span class="meta">@Order(-100)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsFilterConfig</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(CorsFilterConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] allowDomains = &#123;<span class="string">&quot;http://localhost:8080&quot;</span>, <span class="string">&quot;http://localhost:80&quot;</span>, <span class="string">&quot;http://ip:8080&quot;</span>, <span class="string">&quot;http://ip:80&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, request.getHeader(<span class="string">&quot;Origin&quot;</span>));</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST,GET,PATCH,DELETE,PUT,OPTIONS&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是1小时（3600秒），</span></span><br><span class="line"><span class="comment">         * 即允许缓存该条回应3600秒（即1小时），在此期间，不用发出另一条预检请求。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, request.getHeader(<span class="string">&quot;Access-Control-Request-Headers&quot;</span>));</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// prefight请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;OPTIONS&quot;</span>.equals(request.getMethod())) &#123;</span><br><span class="line">            response.setStatus( <span class="number">200</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
            <tag> CORS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>@CurrentUser注解新配方</title>
      <link href="/post/592e1c90-fa2c-11e9-9168-d51acd3a11fc/"/>
      <url>/post/592e1c90-fa2c-11e9-9168-d51acd3a11fc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>自定义<code>@CurrentUser</code>注解想实现当前已登录的用户对象在各层之间进行数据交互，在简书上有一篇比较出名的解决方法：<a href="https://www.jianshu.com/p/01a6a61d9e02">通过自定义<code>@CurrentUser</code>获取当前登录用户</a></p><p>但是在安全框架Shiro中，通过<code>webRequest.getAttribute(&quot;currentUser&quot;, RequestAttributes.SCOPE_REQUEST)</code>却并不可行，也是按照该篇文章通过在登陆的业务中通过<code>HttpServletRequest</code>的<code>request.setAttribute()</code>方法存入需要的信息。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>通过对下面的一段覆写代码，可以看出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  增加方法注入，将含有 <span class="doctag">@CurrentUser</span> 注解的方法参数注入当前登录用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurrentUserMethodArgumentResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parameter.getParameterType().isAssignableFrom(User.class)</span><br><span class="line">                &amp;&amp; parameter.hasParameterAnnotation(CurrentUser.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) webRequest.getAttribute(<span class="string">&quot;currentUser&quot;</span>, RequestAttributes.SCOPE_REQUEST);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MissingServletRequestPartException</span>(<span class="string">&quot;currentUser&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绑定了该注解<code>@CurrentUser</code>的解析器是通过实现HandlerMethodArgumentResolver接口，然后通过<code>webRequest</code>对象获取之前在<code>request</code>作用域中的<code>currentUser</code>。</p><p>那么这个<code>NativeWebRequest</code>是如何得到这个值的呢？我们打开它的源码，发现WebRequest是Spring框架提供的统一请求访问接口，不仅仅可以访问请求相关数据（如参数区数据、请求头数据，但访问不到Cookie区数据），还可以访问会话和上下文中的数据；<code>NativeWebRequest</code>继承了<code>WebRequest</code>，并提供访问本地Servlet API的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RequestAttributes</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">SCOPE_REQUEST</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">SCOPE_SESSION</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">REFERENCE_REQUEST</span> <span class="operator">=</span> <span class="string">&quot;request&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">REFERENCE_SESSION</span> <span class="operator">=</span> <span class="string">&quot;session&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Object <span class="title function_">getAttribute</span><span class="params">(String var1, <span class="type">int</span> var2)</span>;</span><br></pre></td></tr></table></figure><p>而<code>ServletRequestAttributes</code>的方法则是<code>getAttribute()</code>的实现，通过对scope的不同来控制作用域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HttpServletRequest request;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> HttpSession session;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; sessionAttributesToUpdate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getAttribute</span><span class="params">(String name, <span class="type">int</span> scope)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (scope == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.isRequestActive()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Cannot ask for request attribute - request is not active anymore!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.request.getAttribute(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="built_in">this</span>.getSession(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> session.getAttribute(name);</span><br><span class="line">                <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.sessionAttributesToUpdate.put(name, value);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalStateException var5) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当scope为<code>RequestAttributes.SCOPE_REQUEST</code>的时候<code>getAttribute(name)</code>方法会返回当前线程的<code>HttpServletRequest</code>的对象的<code>getAttribute(name)</code>的值。</li><li>当scope为<code>RequestAttributes.SCOPE_REQUEST</code>时会把<code>session</code>对象的<code>getAttribute(name)</code>的value存入<code>Map&lt;String, Object&gt; sessionAttributesToUpdate</code>中。</li></ul><p>既然我之前没有从<code>HttpServletRequest</code>作用域中得到我想要的结果，那么为什么不试试利用session呢。我们可以在登陆的业务中将当前已登录的用户的信息存入session中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.setAttribute(<span class="string">&quot;currentUser&quot;</span>, currentUserDTO/token/id);</span><br></pre></td></tr></table></figure><p>可以是当前登录对象的数据传输对象，也可以是token或者id。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> webRequest.getAttribute(<span class="string">&quot;currentUser&quot;</span>, RequestAttributes.SCOPE_SESSION);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> CurrentUser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是领域模型？我们常用的贫血模型是否已经过时？</title>
      <link href="/post/ebad3220-f600-11e9-a320-89dae6093596/"/>
      <url>/post/ebad3220-f600-11e9-a320-89dae6093596/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>本文转自<a href="https://zhuanlan.zhihu.com/p/32459776">知乎</a>，作者：<a href="https://www.zhihu.com/org/mei-tuan-dian-ping-ji-shu-tuan-dui/activities">美团技术团队</a></strong></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>至少30年以前，一些软件设计人员就已经意识到领域建模和设计的重要性，并形成一种思潮，Eric Evans将其定义为领域驱动设计（Domain-Driven Design，简称DDD）。在互联网开发“小步快跑，迭代试错”的大环境下，DDD似乎是一种比较“古老而缓慢”的思想。然而，由于互联网公司也逐渐深入实体经济，业务日益复杂，我们在开发中也越来越多地遇到传统行业软件开发中所面临的问题。本文就先来讲一下这些问题，然后再尝试在实践中用DDD的思想来解决这些问题。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="过度耦合"><a href="#过度耦合" class="headerlink" title="过度耦合"></a>过度耦合</h2><p>业务初期，我们的功能大都非常简单，普通的CRUD就能满足，此时系统是清晰的。随着迭代的不断演化，业务逻辑变得越来越复杂，我们的系统也越来越冗杂。模块彼此关联，谁都很难说清模块的具体功能意图是啥。修改一个功能时，往往光回溯该功能需要的修改点就需要很长时间，更别提修改带来的不可预知的影响面。</p><p>下图是一个常见的系统耦合病例：</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/%E8%80%A6%E5%90%88.jpg" alt="耦合病例"></p><p>订单服务接口中提供了查询、创建订单相关的接口，也提供了订单评价、支付、保险的接口。同时我们的表也是一个订单大表，包含了非常多字段。在我们维护代码时，牵一发而动全身，很可能只是想改下评价相关的功能，却影响到了创单核心路径。虽然我们可以通过测试保证功能完备性，但当我们在订单领域有大量需求同时并行开发时，改动重叠、恶性循环、疲于奔命修改各种问题。</p><p>上述问题，归根到底在于系统架构不清晰，划分出来的模块内聚度低、高耦合。</p><p>有一种解决方案，按照演进式设计的理论，让系统的设计随着系统实现的增长而增长。我们不需要作提前设计，就让系统伴随业务成长而演进。这当然是可行的，敏捷实践中的重构、测试驱动设计及持续集成可以对付各种混乱问题。重构——保持行为不变的代码改善清除了不协调的局部设计，测试驱动设计确保对系统的更改不会导致系统丢失或破坏现有功能，持续集成则为团队提供了同一代码库。</p><p>在这三种实践中，重构是克服演进式设计中大杂烩问题的主力，通过在单独的类及方法级别上做一系列小步重构来完成。我们可以很容易重构出一个独立的类来放某些通用的逻辑，但是你会发现你很难给它一个业务上的含义，只能给予一个技术维度描绘的含义。这会带来什么问题呢？新同学并不总是知道对通用逻辑的改动或获取来自该类。显然，制定项目规范并不是好的idea。我们又闻到了代码即将腐败的味道。</p><p>事实上，你可能意识到问题之所在。在解决现实问题时，我们会将问题映射到脑海中的概念模型，在模型中解决问题，再将解决方案转换为实际的代码。上述问题在于我们解决了设计到代码之间的重构，但提炼出来的设计模型，并不具有实际的业务含义，这就导致在开发新需求时，其他同学并不能很自然地将业务问题映射到该设计模型。设计似乎变成了重构者的自娱自乐，代码继续腐败，重新重构……无休止的循环。</p><p>用DDD则可以很好地解决领域模型到设计模型的同步、演化，最后再将反映了领域的设计模型转为实际的代码。</p><p>注：模型是我们解决实际问题所抽象出来的概念模型，领域模型则表达与业务相关的事实；设计模型则描述了所要构建的系统。</p><h1 id="贫血症和失忆症"><a href="#贫血症和失忆症" class="headerlink" title="贫血症和失忆症"></a>贫血症和失忆症</h1><blockquote><p><strong>贫血领域对象</strong><br>贫血领域对象（Anemic Domain Object）是指仅用作数据载体，而没有行为和动作的领域对象。</p></blockquote><p>在我们习惯了J2EE的开发模式后，Action&#x2F;Service&#x2F;DAO这种分层模式，会很自然地写出过程式代码，而学到的很多关于OO理论的也毫无用武之地。使用这种开发方式，对象只是数据的载体，没有行为。以数据为中心，以数据库ER设计作驱动。分层架构在这种开发模式下，可以理解为是对数据移动、处理和实现的过程。</p><p>以笔者最近开发的系统抽奖平台为例：</p><ul><li>场景需求</li></ul><p>奖池里配置了很多奖项，我们需要按运营预先配置的概率抽中一个奖项。<br>实现非常简单，生成一个随机数，匹配符合该随机数生成概率的奖项即可。</p><ul><li>贫血模型实现方案</li></ul><p>先设计奖池和奖项的库表配置：</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/clazz.jpg" alt="抽奖库表"></p><ul><li>设计AwardPool和Award两个对象，只有简单的get和set属性的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AwardPool</span> &#123;</span><br><span class="line">    <span class="type">int</span> awardPoolId;</span><br><span class="line">    List&lt;Award&gt; awards;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Award&gt; <span class="title function_">getAwards</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> awards;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAwards</span><span class="params">(List&lt;Award&gt; awards)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.awards = awards;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Award</span> &#123;</span><br><span class="line">   <span class="type">int</span> awardId;</span><br><span class="line">   <span class="type">int</span> probability;<span class="comment">//概率</span></span><br><span class="line"></span><br><span class="line">   ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Service代码实现</li></ul><p>设计一个LotteryService，在其中的drawLottery()方法写服务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sql查询，将数据映射到AwardPool对象</span></span><br><span class="line"><span class="type">AwardPool</span> <span class="variable">awardPool</span> <span class="operator">=</span> awardPoolDao.getAwardPool(poolId);</span><br><span class="line"><span class="keyword">for</span> (Award award : awardPool.getAwards()) &#123;</span><br><span class="line">   <span class="comment">// 寻找到符合award.getProbability()概率的award</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>按照我们通常思路实现，可以发现：在业务领域里非常重要的抽奖，我的业务逻辑都是写在Service中的，Award充其量只是个数据载体，没有任何行为。<strong>简单的业务系统采用这种贫血模型和过程化设计是没有问题的，</strong>但在业务逻辑复杂了，业务逻辑、状态会散落到在大量方法中，原本的代码意图会渐渐不明确，我们将这种情况称为由贫血症引起的失忆症。</li></ul><p>更好的是采用领域模型的开发方式，将数据和行为封装在一起，并与现实世界中的业务对象相映射。各类具备明确的职责划分，将领域逻辑分散到领域对象中。继续举我们上述抽奖的例子，使用概率选择对应的奖品就应当放到AwardPool类中。</p><h1 id="为什么选择DDD"><a href="#为什么选择DDD" class="headerlink" title="为什么选择DDD"></a>为什么选择DDD</h1><h2 id="软件系统复杂性应对"><a href="#软件系统复杂性应对" class="headerlink" title="软件系统复杂性应对"></a>软件系统复杂性应对</h2><p>解决<strong>复杂和大规模软件</strong>的武器可以被粗略地归为三类：抽象、分治和知识。</p><p><strong>分治</strong> 把问题空间分割为规模更小且易于处理的若干子问题。分割后的问题需要足够小，以便一个人单枪匹马就能够解决他们；其次，必须考虑如何将分割后的各个部分装配为整体。分割得越合理越易于理解，在装配成整体时，所需跟踪的细节也就越少。即更容易设计各部分的协作方式。评判什么是分治得好，即高内聚低耦合。</p><p><strong>抽象</strong> 使用抽象能够精简问题空间，而且问题越小越容易理解。举个例子，从北京到上海出差，可以先理解为使用交通工具前往，但不需要一开始就想清楚到底是高铁还是飞机，以及乘坐他们需要注意什么。</p><p><strong>知识</strong> 顾名思义，DDD可以认为是知识的一种。</p><p>DDD提供了这样的知识手段，让我们知道如何抽象出限界上下文以及如何去分治。</p><h2 id="与微服务架构相得益彰"><a href="#与微服务架构相得益彰" class="headerlink" title="与微服务架构相得益彰"></a>与微服务架构相得益彰</h2><p>微服务架构众所周知，此处不做赘述。我们创建微服务时，需要创建一个高内聚、低耦合的微服务。而DDD中的限界上下文则完美匹配微服务要求，可以将该限界上下文理解为一个微服务进程。</p><p>上述是从更直观的角度来描述两者的相似处。</p><p>在系统复杂之后，我们都需要用分治来拆解问题。一般有两种方式，技术维度和业务维度。技术维度是类似MVC这样，业务维度则是指按业务领域来划分系统。</p><p>微服务架构更强调从业务维度去做分治来应对系统复杂度，而DDD也是同样的着重业务视角。<br>如果<strong>两者在追求的目标（业务维度）达到了上下文的统一</strong>，那么在具体做法上有什么联系和不同呢？</p><p>我们将架构设计活动精简为以下三个层面：</p><ul><li>业务架构——根据业务需求设计业务模块及其关系</li><li>系统架构——设计系统和子系统的模块</li><li>技术架构——决定采用的技术及框架</li></ul><p>以上三种活动在实际开发中是有先后顺序的，但不一定孰先孰后。在我们解决常规套路问题时，我们会很自然地往熟悉的分层架构套（先确定系统架构），或者用PHP开发很快（先确定技术架构），在业务不复杂时，这样是合理的。</p><p>跳过业务架构设计出来的架构关注点不在业务响应上，可能就是个大泥球，在面临需求迭代或响应市场变化时就很痛苦。</p><p><strong>DDD的核心诉求就是将业务架构映射到系统架构上，在响应业务变化调整业务架构时，也随之变化系统架构。而微服务追求业务层面的复用，设计出来的系统架构和业务一致；在技术架构上则系统模块之间充分解耦，可以自由地选择合适的技术架构，去中心化地治理技术和数据。</strong></p><p>可以参见下图来更好地理解双方之间的协作关系：</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/%E6%9E%B6%E6%9E%84.jpg" alt="技术架构"></p><h1 id="如何实践DDD"><a href="#如何实践DDD" class="headerlink" title="如何实践DDD"></a>如何实践DDD</h1><p>我们将通过上文提到的抽奖平台，来详细介绍我们如何通过DDD来解构一个中型的基于微服务架构的系统，从而做到系统的高内聚、低耦合。</p><p>首先看下抽奖系统的大致需求：<br>运营——可以配置一个抽奖活动，该活动面向一个特定的用户群体，并针对一个用户群体发放一批不同类型的奖品（优惠券，激活码，实物奖品等）。<br>用户-通过活动页面参与不同类型的抽奖活动。</p><p>设计领域模型的一般步骤如下：</p><ol><li>根据需求划分出初步的领域和限界上下文，以及上下文之间的关系；</li><li>进一步分析每个上下文内部，识别出哪些是实体，哪些是值对象；</li><li>对实体、值对象进行关联和聚合，划分出聚合的范畴和聚合根；</li><li>为聚合根设计仓储，并思考实体或值对象的创建方式；</li><li>在工程中实践领域模型，并在实践中检验模型的合理性，倒推模型中不足的地方并重构。</li></ol><h2 id="战略建模"><a href="#战略建模" class="headerlink" title="战略建模"></a>战略建模</h2><p>战略和战术设计是站在DDD的角度进行划分。战略设计侧重于高层次、宏观上去划分和集成限界上下文，而战术设计则关注更具体使用建模工具来细化上下文。</p><h2 id="领域"><a href="#领域" class="headerlink" title="领域"></a>领域</h2><p>现实世界中，领域包含了问题域和解系统。一般认为软件是对现实世界的部分模拟。在DDD中，解系统可以映射为一个个限界上下文，限界上下文就是软件对于问题域的一个特定的、有限的解决方案。</p><h2 id="限界上下文"><a href="#限界上下文" class="headerlink" title="限界上下文"></a><strong>限界上下文</strong></h2><blockquote><p><strong>限界上下文</strong><br>一个由显示边界限定的特定职责。领域模型便存在于这个边界之内。在边界内，每一个模型概念，包括它的属性和操作，都具有特殊的含义。</p></blockquote><p>一个给定的业务领域会包含多个限界上下文，想与一个限界上下文沟通，则需要通过显示边界进行通信。系统通过确定的限界上下文来进行解耦，而每一个上下文内部紧密组织，职责明确，具有较高的内聚性。</p><p>一个很形象的隐喻：细胞质所以能够存在，是因为细胞膜限定了什么在细胞内，什么在细胞外，并且确定了什么物质可以通过细胞膜。</p><h2 id="划分限界上下文"><a href="#划分限界上下文" class="headerlink" title="划分限界上下文"></a>划分限界上下文</h2><p>划分限界上下文，不管是Eric Evans还是Vaughn Vernon，在他们的大作里都没有怎么提及。</p><p>显然我们不应该按技术架构或者开发任务来创建限界上下文，应该按照语义的边界来考虑。</p><p><strong>我们的实践是，考虑产品所讲的通用语言，从中提取一些术语称之为概念对象，寻找对象之间的联系；或者从需求里提取一些动词，观察动词和对象之间的关系；我们将紧耦合的各自圈在一起，观察他们内在的联系，从而形成对应的界限上下文。形成之后，我们可以尝试用语言来描述下界限上下文的职责，看它是否清晰、准确、简洁和完整。简言之，限界上下文应该从需求出发，按领域划分。</strong></p><p>前文提到，我们的用户划分为运营和用户。其中，运营对抽奖活动的配置十分复杂但相对低频。用户对这些抽奖活动配置的使用是高频次且无感知的。根据这样的业务特点，我们首先将抽奖平台划分为C端抽奖和M端抽奖管理平台两个子域，让两者完全解耦。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/%E6%8A%BD%E5%A5%96%E9%A2%86%E5%9F%9F.jpg" alt="抽奖领域"></p><p>在确认了M端领域和C端的限界上下文后，我们再对各自上下文内部进行限界上下文的划分。下面我们用C端进行举例。</p><p>产品的需求概述如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 抽奖活动有活动限制，例如用户的抽奖次数限制，抽奖的开始和结束的时间等；</span><br><span class="line">2. 一个抽奖活动包含多个奖品，可以针对一个或多个用户群体；</span><br><span class="line">3. 奖品有自身的奖品配置，例如库存量，被抽中的概率等，最多被一个用户抽中的次数等等；</span><br><span class="line">4. 用户群体有多种区别方式，如按照用户所在城市区分，按照新老客区分等；</span><br><span class="line">5. 活动具有风控配置，能够限制用户参与抽奖的频率。</span><br></pre></td></tr></table></figure><p>根据产品的需求，我们提取了一些关键性的概念作为子域，形成我们的限界上下文。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/%E5%AD%90%E5%9F%9F.jpg"></p><p>首先，抽奖上下文作为整个领域的核心，承担着用户抽奖的核心业务，抽奖中包含了奖品和用户群体的概念。</p><ul><li>在设计初期，我们曾经考虑划分出抽奖和发奖两个领域，前者负责选奖，后者负责将选中的奖品发放出去。但在实际开发过程中，我们发现这两部分的逻辑紧密连接，难以拆分。并且单纯的发奖逻辑足够简单，仅仅是调用第三方服务进行发奖，不足以独立出来成为一个领域。</li></ul><p>对于活动的限制，我们定义了活动准入的通用语言，将活动开始&#x2F;结束时间，活动可参与次数等限制条件都收拢到活动准入上下文中。</p><p>对于抽奖的奖品库存量，由于库存的行为与奖品本身相对解耦，库存关注点更多是库存内容的核销，且库存本身具备通用性，可以被奖品之外的内容使用，因此我们定义了独立的库存上下文。</p><p>由于C端存在一些刷单行为，我们根据产品需求定义了风控上下文，用于对活动进行风控。<br>最后，活动准入、风控、抽奖等领域都涉及到一些次数的限制，因此我们定义了计数上下文。</p><p>可以看到，通过DDD的限界上下文划分，我们界定出抽奖、活动准入、风控、计数、库存等五个上下文，每个上下文在系统中都高度内聚。</p><h2 id="上下文映射图"><a href="#上下文映射图" class="headerlink" title="上下文映射图"></a>上下文映射图</h2><p>在进行上下文划分之后，我们还需要进一步梳理上下文之间的关系。</p><blockquote><p><strong>康威（梅尔·康威）定律</strong><br>任何组织在设计一套系统（广义概念上的系统）时，所交付的设计方案在结构上都与该组织的沟通结构保持一致。</p></blockquote><p>康威定律告诉我们，系统结构应尽量的与组织结构保持一致。这里，我们认为团队结构（无论是内部组织还是团队间组织）就是组织结构，限界上下文就是系统的业务结构。因此，团队结构应该和限界上下文保持一致。</p><p>梳理清楚上下文之间的关系，从团队内部的关系来看，有如下好处：</p><ol><li>任务更好拆分，一个开发人员可以全身心的投入到相关的一个单独的上下文中；</li><li>沟通更加顺畅，一个上下文可以明确自己对其他上下文的依赖关系，从而使得团队内开发直接更好的对接。</li></ol><p>从团队间的关系来看，明确的上下文关系能够带来如下帮助：</p><ol><li>每个团队在它的上下文中能够更加明确自己领域内的概念，因为上下文是领域的解系统；</li><li>对于限界上下文之间发生交互，团队与上下文的一致性，能够保证我们明确对接的团队和依赖的上下游。</li></ol><blockquote><p><strong>限界上下文之间的映射关系</strong></p></blockquote><ul><li>合作关系（Partnership）：两个上下文紧密合作的关系，一荣俱荣，一损俱损。</li><li>共享内核（Shared Kernel）：两个上下文依赖部分共享的模型。</li><li>客户方-供应方开发（Customer-Supplier Development）：上下文之间有组织的上下游依赖。</li><li>遵奉者（Conformist）：下游上下文只能盲目依赖上游上下文。</li><li>防腐层（Anticorruption Layer）：一个上下文通过一些适配和转换与另一个上下文交互。</li><li>开放主机服务（Open Host Service）：定义一种协议来让其他上下文来对本上下文进行访问。</li><li>发布语言（Published Language）：通常与OHS一起使用，用于定义开放主机的协议。</li><li>大泥球（Big Ball of Mud）：混杂在一起的上下文关系，边界不清晰。</li><li>另谋他路（SeparateWay）：两个完全没有任何联系的上下文。</li></ul><p>上文定义了上下文映射间的关系，经过我们的反复斟酌，抽奖平台上下文的映射关系图如下：</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/%E6%98%A0%E5%B0%84.jpg" alt="映射关系"></p><p>由于抽奖，风控，活动准入，库存，计数五个上下文都处在抽奖领域的内部，所以它们之间符合“一荣俱荣，一损俱损”的合作关系（PartnerShip，简称PS）。</p><p>同时，抽奖上下文在进行发券动作时，会依赖券码、平台券、外卖券三个上下文。抽奖上下文通过防腐层（Anticorruption Layer，ACL）对三个上下文进行了隔离，而三个券上下文通过开放主机服务（Open Host Service）作为发布语言（Published Language）对抽奖上下文提供访问机制。</p><p><strong>通过上下文映射关系，我们明确的限制了限界上下文的耦合性，即在抽奖平台中，无论是上下文内部交互（合作关系）还是与外部上下文交互（防腐层），耦合度都限定在数据耦合（Data Coupling）的层级。</strong></p><h2 id="战术建模——细化上下文"><a href="#战术建模——细化上下文" class="headerlink" title="战术建模——细化上下文"></a>战术建模——细化上下文</h2><p>梳理清楚上下文之间的关系后，我们需要从战术层面上剖析上下文内部的组织关系。首先看下DDD中的一些定义。</p><blockquote><p><strong>实体</strong><br>当一个对象由其标识（而不是属性）区分时，这种对象称为实体（Entity）。<br>例：最简单的，公安系统的身份信息录入，对于人的模拟，即认为是实体，因为每个人是独一无二的，且其具有唯一标识（如公安系统分发的身份证号码）。</p></blockquote><p>在实践上建议将属性的验证放到实体中。</p><blockquote><p><strong>值对象</strong><br>当一个对象用于对事务进行描述而没有唯一标识时，它被称作值对象（Value Object）。<br>例：比如颜色信息，我们只需要知道{“name”:”黑色”，”css”:”#000000”}这样的值信息就能够满足要求了，这避免了我们对标识追踪带来的系统复杂性。</p></blockquote><p>值对象很重要，在习惯了使用数据库的数据建模后，很容易将所有对象看作实体。使用值对象，可以更好地做系统优化、精简设计。</p><p>它具有不变性、相等性和可替换性。</p><p>在实践中，需要保证值对象创建后就不能被修改，即不允许外部再修改其属性。在不同上下文集成时，会出现模型概念的公用，如商品模型会存在于电商的各个上下文中。在订单上下文中如果你只关注下单时商品信息快照，那么将商品对象视为值对象是很好的选择。</p><blockquote><p><strong>聚合根</strong><br>Aggregate(聚合）是一组相关对象的集合，作为一个整体被外界访问，聚合根（Aggregate Root）是这个聚合的根节点。</p></blockquote><p>聚合是一个非常重要的概念，核心领域往往都需要用聚合来表达。其次，聚合在技术上有非常高的价值，可以指导详细设计。</p><p>聚合由根实体，值对象和实体组成。</p><p>如何创建好的聚合？</p><ul><li>边界内的内容具有一致性：在一个事务中只修改一个聚合实例。如果你发现边界内很难接受强一致，不管是出于性能或产品需求的考虑，应该考虑剥离出独立的聚合，采用最终一致的方式。</li><li>设计小聚合：大部分的聚合都可以只包含根实体，而无需包含其他实体。即使一定要包含，可以考虑将其创建为值对象。</li><li>通过唯一标识来引用其他聚合或实体：当存在对象之间的关联时，建议引用其唯一标识而非引用其整体对象。如果是外部上下文中的实体，引用其唯一标识或将需要的属性构造值对象。<br>如果聚合创建复杂，推荐使用工厂方法来屏蔽内部复杂的创建逻辑。</li></ul><p>聚合内部多个组成对象的关系可以用来指导数据库创建，但不可避免存在一定的抗阻。如聚合中存在List&lt;值对象&gt;，那么在数据库中建立1:N的关联需要将值对象单独建表，此时是有id的，建议不要将该id暴露到资源库外部，对外隐蔽。</p><blockquote><p><strong>领域服务</strong><br>一些重要的领域行为或操作，可以归类为领域服务。它既不是实体，也不是值对象的范畴。</p></blockquote><p>当我们采用了微服务架构风格，一切领域逻辑的对外暴露均需要通过领域服务来进行。如原本由聚合根暴露的业务逻辑也需要依托于领域服务。</p><blockquote><p><strong>领域事件</strong><br>领域事件是对领域内发生的活动进行的建模。</p></blockquote><p>抽奖平台的核心上下文是抽奖上下文，接下来介绍下我们对抽奖上下文的建模。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/%E5%BB%BA%E6%A8%A1.jpg" alt="进行建模"></p><p>在抽奖上下文中，我们通过抽奖(DrawLottery)这个聚合根来控制抽奖行为，可以看到，一个抽奖包括了抽奖ID（LotteryId）以及多个奖池（AwardPool），而一个奖池针对一个特定的用户群体（UserGroup）设置了多个奖品（Award）。</p><p>另外，在抽奖领域中，我们还会使用抽奖结果（SendResult）作为输出信息，使用用户领奖记录（UserLotteryLog）作为领奖凭据和存根。</p><p><strong>谨慎使用值对象</strong></p><p>在实践中，我们发现虽然一些领域对象符合值对象的概念，但是随着业务的变动，很多原有的定义会发生变更，值对象可能需要在业务意义具有唯一标识，而对这类值对象的重构往往需要较高成本。因此在特定的情况下，我们也要根据实际情况来权衡领域对象的选型。</p><h2 id="DDD工程实现"><a href="#DDD工程实现" class="headerlink" title="DDD工程实现"></a>DDD工程实现</h2><p>在对上下文进行细化后，我们开始在工程中真正落地DDD。</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块（Module）是DDD中明确提到的一种控制限界上下文的手段，在我们的工程中，一般尽量用一个模块来表示一个领域的限界上下文。</p><p>如代码中所示，一般的工程中包的组织方式为{com.公司名.组织架构.业务.上下文.*}，这样的组织结构能够明确的将一个上下文限定在包的内部。</p><p><strong>代码演示1 模块的组织：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.company.team.bussiness.lottery.*;<span class="comment">//抽奖上下文</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.riskcontrol.*;<span class="comment">//风控上下文</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.counter.*;<span class="comment">//计数上下文</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.condition.*;<span class="comment">//活动准入上下文</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.stock.*;<span class="comment">//库存上下文</span></span><br></pre></td></tr></table></figure><p>对于模块内的组织结构，一般情况下我们是按照领域对象、领域服务、领域资源库、防腐层等组织方式定义的。</p><p><strong>代码演示2 模块的组织：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.company.team.bussiness.lottery.domain.valobj.*;<span class="comment">//领域对象-值对象</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.lottery.domain.entity.*;<span class="comment">//领域对象-实体</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.lottery.domain.aggregate.*;<span class="comment">//领域对象-聚合根</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.lottery.service.*;<span class="comment">//领域服务</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.lottery.repo.*;<span class="comment">//领域资源库</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.lottery.facade.*;<span class="comment">//领域防腐层</span></span><br></pre></td></tr></table></figure><p>每个模块的具体实现，我们将在下文中展开。</p><h2 id="领域对象"><a href="#领域对象" class="headerlink" title="领域对象"></a>领域对象</h2><p>前文提到，领域驱动要解决的一个重要的问题，就是解决对象的贫血问题。这里我们用之前定义的抽奖（DrawLottery）聚合根和奖池（AwardPool）值对象来具体说明。</p><p>抽奖聚合根持有了抽奖活动的id和该活动下的所有可用奖池列表，它的一个最主要的领域功能就是根据一个抽奖发生场景（DrawLotteryContext），选择出一个适配的奖池，即chooseAwardPool方法。</p><p>chooseAwardPool的逻辑是这样的：DrawLotteryContext会带有用户抽奖时的场景信息（抽奖得分或抽奖时所在的城市），DrawLottery会根据这个场景信息，匹配一个可以给用户发奖的AwardPool。</p><p><strong>代码演示3 DrawLottery：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.team.bussiness.lottery.domain.aggregate;</span><br><span class="line"><span class="keyword">import</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawLottery</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> lotteryId; <span class="comment">//抽奖id</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;AwardPool&gt; awardPools; <span class="comment">//奖池列表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter &amp; setter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLotteryId</span><span class="params">(<span class="type">int</span> lotteryId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(id&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;非法的抽奖id&quot;</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.lotteryId = lotteryId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据抽奖入参context选择奖池</span></span><br><span class="line">    <span class="keyword">public</span> AwardPool <span class="title function_">chooseAwardPool</span><span class="params">(DrawLotteryContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(context.getMtCityInfo()!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> chooseAwardPoolByCityInfo(awardPools, context.getMtCityInfo());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> chooseAwardPoolByScore(awardPools, context.getGameScore());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据抽奖所在城市选择奖池</span></span><br><span class="line">    <span class="keyword">private</span> AwardPool <span class="title function_">chooseAwardPoolByCityInfo</span><span class="params">(List&lt;AwardPool&gt; awardPools, MtCifyInfo cityInfo)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(AwardPool awardPool: awardPools) &#123;</span><br><span class="line">            <span class="keyword">if</span>(awardPool.matchedCity(cityInfo.getCityId())) &#123;</span><br><span class="line">                <span class="keyword">return</span> awardPool;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据抽奖活动得分选择奖池</span></span><br><span class="line">    <span class="keyword">private</span> AwardPool <span class="title function_">chooseAwardPoolByScore</span><span class="params">(List&lt;AwardPool&gt; awardPools, <span class="type">int</span> gameScore)</span> &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在匹配到一个具体的奖池之后，需要确定最后给用户的奖品是什么。这部分的领域功能在AwardPool内。</p><p><strong>代码演示4 AwardPool：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.team.bussiness.lottery.domain.valobj;</span><br><span class="line"><span class="keyword">import</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AwardPool</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cityIds;<span class="comment">//奖池支持的城市</span></span><br><span class="line">    <span class="keyword">private</span> String scores;<span class="comment">//奖池支持的得分</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userGroupType;<span class="comment">//奖池匹配的用户类型</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Awrad&gt; awards;<span class="comment">//奖池中包含的奖品</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前奖池是否与城市匹配</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matchedCity</span><span class="params">(<span class="type">int</span> cityId)</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前奖池是否与用户得分匹配</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matchedScore</span><span class="params">(<span class="type">int</span> score)</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据概率选择奖池</span></span><br><span class="line">    <span class="keyword">public</span> Award <span class="title function_">randomGetAward</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sumOfProbablity</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Award award: awards) &#123;</span><br><span class="line">            sumOfProbability += award.getAwardProbablity();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">randomNumber</span> <span class="operator">=</span> ThreadLocalRandom.current().nextInt(sumOfProbablity);</span><br><span class="line">        range = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Award award: awards) &#123;</span><br><span class="line">            range += award.getProbablity();</span><br><span class="line">            <span class="keyword">if</span>(randomNumber&lt;range) &#123;</span><br><span class="line">                <span class="keyword">return</span> award;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与以往的仅有getter、setter的业务对象不同，领域对象具有了行为，对象更加丰满。同时，比起将这些逻辑写在服务内（例如Service），领域功能的内聚性更强，职责更加明确。</p><h2 id="资源库"><a href="#资源库" class="headerlink" title="资源库"></a>资源库</h2><p>领域对象需要资源存储，存储的手段可以是多样化的，常见的无非是数据库，分布式缓存，本地缓存等。资源库（Repository）的作用，就是对领域的存储和访问进行统一管理的对象。在抽奖平台中，我们是通过如下的方式组织资源库的。</p><p><strong>代码演示5 Repository组织结构：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据库资源</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.lottery.repo.dao.AwardPoolDao;<span class="comment">//数据库访问对象-奖池</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.lottery.repo.dao.AwardDao;<span class="comment">//数据库访问对象-奖品</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.lottery.repo.dao.po.AwardPO;<span class="comment">//数据库持久化对象-奖品</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.lottery.repo.dao.po.AwardPoolPO;<span class="comment">//数据库持久化对象-奖池</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.lottery.repo.cache.DrawLotteryCacheAccessObj;<span class="comment">//分布式缓存访问对象-抽奖缓存访问</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.lottery.repo.repository.DrawLotteryRepository;<span class="comment">//资源库访问对象-抽奖资源库</span></span><br></pre></td></tr></table></figure><p>资源库对外的整体访问由Repository提供，它聚合了各个资源库的数据信息，同时也承担了资源存储的逻辑（例如缓存更新机制等）。</p><p>在抽奖资源库中，我们屏蔽了对底层奖池和奖品的直接访问，而是仅对抽奖的聚合根进行资源管理。代码示例中展示了抽奖资源获取的方法（最常见的Cache Aside Pattern）。</p><p>比起以往将资源管理放在服务中的做法，由资源库对资源进行管理，职责更加明确，代码的可读性和可维护性也更强。</p><p><strong>代码演示6 DrawLotteryRepository：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.team.bussiness.lottery.repo;</span><br><span class="line"><span class="keyword">import</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawLotteryRepository</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AwardDao awardDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AwardPoolDao awardPoolDao;</span><br><span class="line">    <span class="meta">@AutoWired</span></span><br><span class="line">    <span class="keyword">private</span> DrawLotteryCacheAccessObj drawLotteryCacheAccessObj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DrawLottery <span class="title function_">getDrawLotteryById</span><span class="params">(<span class="type">int</span> lotteryId)</span> &#123;</span><br><span class="line">        <span class="type">DrawLottery</span> <span class="variable">drawLottery</span> <span class="operator">=</span> drawLotteryCacheAccessObj.get(lotteryId);</span><br><span class="line">        <span class="keyword">if</span>(drawLottery!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> drawLottery;</span><br><span class="line">        &#125;</span><br><span class="line">        drawLottery = getDrawLotteyFromDB(lotteryId);</span><br><span class="line">        drawLotteryCacheAccessObj.add(lotteryId, drawLottery);</span><br><span class="line">        <span class="keyword">return</span> drawLottery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DrawLottery <span class="title function_">getDrawLotteryFromDB</span><span class="params">(<span class="type">int</span> lotteryId)</span> &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防腐层"><a href="#防腐层" class="headerlink" title="防腐层"></a>防腐层</h2><p>亦称适配层。在一个上下文中，有时需要对外部上下文进行访问，通常会引入防腐层的概念来对外部上下文的访问进行一次转义。</p><p>有以下几种情况会考虑引入防腐层：</p><ul><li>需要将外部上下文中的模型翻译成本上下文理解的模型。</li><li>不同上下文之间的团队协作关系，如果是供奉者关系，建议引入防腐层，避免外部上下文变化对本上下文的侵蚀。</li><li>该访问本上下文使用广泛，为了避免改动影响范围过大。</li></ul><p>如果内部多个上下文对外部上下文需要访问，那么可以考虑将其放到通用上下文中。</p><p>在抽奖平台中，我们定义了用户城市信息防腐层(UserCityInfoFacade)，用于外部的用户城市信息上下文（微服务架构下表现为用户城市信息服务）。</p><p>以用户信息防腐层举例，它以抽奖请求参数(LotteryContext)为入参，以城市信息(MtCityInfo)为输出。</p><p><strong>代码演示7 UserCityInfoFacade：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.team.bussiness.lottery.facade;</span><br><span class="line"><span class="keyword">import</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserCityInfoFacade</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LbsService lbsService;<span class="comment">//外部用户城市信息RPC服务</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MtCityInfo <span class="title function_">getMtCityInfo</span><span class="params">(LotteryContext context)</span> &#123;</span><br><span class="line">        <span class="type">LbsReq</span> <span class="variable">lbsReq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LbsReq</span>();</span><br><span class="line">        lbsReq.setLat(context.getLat());</span><br><span class="line">        lbsReq.setLng(context.getLng());</span><br><span class="line">        <span class="type">LbsResponse</span> <span class="variable">resp</span> <span class="operator">=</span> lbsService.getLbsCityInfo(lbsReq);</span><br><span class="line">        <span class="keyword">return</span> buildMtCifyInfo(resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MtCityInfo <span class="title function_">buildMtCityInfo</span><span class="params">(LbsResponse resp)</span> &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="领域服务"><a href="#领域服务" class="headerlink" title="领域服务"></a>领域服务</h2><p>上文中，我们将领域行为封装到领域对象中，将资源管理行为封装到资源库中，将外部上下文的交互行为封装到防腐层中。此时，我们再回过头来看领域服务时，能够发现领域服务本身所承载的职责也就更加清晰了，即就是通过串联领域对象、资源库和防腐层等一系列领域内的对象的行为，对其他上下文提供交互的接口。</p><p>我们以抽奖服务为例（issueLottery），可以看到在省略了一些防御性逻辑（异常处理，空值判断等）后，领域服务的逻辑已经足够清晰明了。</p><p><strong>代码演示8 LotteryService：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.team.bussiness.lottery.service.impl</span><br><span class="line"><span class="keyword">import</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LotteryServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LotteryService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DrawLotteryRepository drawLotteryRepo;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserCityInfoFacade UserCityInfoFacade;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AwardSendService awardSendService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AwardCounterFacade awardCounterFacade;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IssueResponse <span class="title function_">issueLottery</span><span class="params">(LotteryContext lotteryContext)</span> &#123;</span><br><span class="line">        <span class="type">DrawLottery</span> <span class="variable">drawLottery</span> <span class="operator">=</span> drawLotteryRepo.getDrawLotteryById(lotteryContext.getLotteryId());<span class="comment">//获取抽奖配置聚合根</span></span><br><span class="line">        awardCounterFacade.incrTryCount(lotteryContext);<span class="comment">//增加抽奖计数信息</span></span><br><span class="line">        <span class="type">AwardPool</span> <span class="variable">awardPool</span> <span class="operator">=</span> lotteryConfig.chooseAwardPool(bulidDrawLotteryContext(drawLottery, lotteryContext));<span class="comment">//选中奖池</span></span><br><span class="line">        <span class="type">Award</span> <span class="variable">award</span> <span class="operator">=</span> awardPool.randomChooseAward();<span class="comment">//选中奖品</span></span><br><span class="line">        <span class="keyword">return</span> buildIssueResponse(awardSendService.sendAward(award, lotteryContext));<span class="comment">//发出奖品实体</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IssueResponse <span class="title function_">buildIssueResponse</span><span class="params">(AwardSendResponse awardSendResponse)</span> &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据流转"><a href="#数据流转" class="headerlink" title="数据流转"></a>数据流转</h2><p>在抽奖平台的实践中，我们的数据流转如下图所示：</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BD%AC.jpg" alt="数据流"></p><p>首先领域的开放服务通过信息传输对象（DTO）来完成与外界的数据交互；在领域内部，我们通过领域对象（DO）作为领域内部的数据和行为载体；在资源库内部，我们沿袭了原有的数据库持久化对象（PO）进行数据库资源的交互。同时，DTO与DO的转换发生在领域服务内，DO与PO的转换发生在资源库内。</p><p>与以往的业务服务相比，当前的编码规范可能多造成了一次数据转换，但每种数据对象职责明确，数据流转更加清晰。</p><h2 id="上下文集成"><a href="#上下文集成" class="headerlink" title="上下文集成"></a>上下文集成</h2><p>通常集成上下文的手段有多种，常见的手段包括开放领域服务接口、开放HTTP服务以及消息发布-订阅机制。</p><p>在抽奖系统中，我们使用的是开放服务接口进行交互的。最明显的体现是计数上下文，它作为一个通用上下文，对抽奖、风控、活动准入等上下文都提供了访问接口。<br>同时，如果在一个上下文对另一个上下文进行集成时，若需要一定的隔离和适配，可以引入防腐层的概念。这一部分的示例可以参考前文的防腐层代码示例。</p><h2 id="分离领域"><a href="#分离领域" class="headerlink" title="分离领域"></a>分离领域</h2><p>接下来讲解在实施领域模型的过程中，如何应用到系统架构中。</p><p>我们采用的微服务架构风格，与Vernon在《实现领域驱动设计》并不太一致，更具体差异可阅读他的书体会。</p><p>如果我们维护一个从前到后的应用系统：</p><p>下图中领域服务是使用微服务技术剥离开来，独立部署，对外暴露的只能是服务接口，领域对外暴露的业务逻辑只能依托于领域服务。而在Vernon著作中，并未假定微服务架构风格，因此领域层暴露的除了领域服务外，还有聚合、实体和值对象等。此时的应用服务层是比较简单的，获取来自接口层的请求参数，调度多个领域服务以实现界面层功能。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/%E9%A2%86%E5%9F%9F%E6%9C%8D%E5%8A%A1.jpg" alt="领域服务"></p><p>随着业务发展，业务系统快速膨胀，我们的系统属于核心时：</p><p>应用服务虽然没有领域逻辑，但涉及到了对多个领域服务的编排。当业务规模庞大到一定程度，编排本身就富含了业务逻辑（除此之外，应用服务在稳定性、性能上所做的措施也希望统一起来，而非散落各处），那么此时应用服务对于外部来说是一个领域服务，整体看起来则是一个独立的限界上下文。</p><p>此时应用服务对内还属于应用服务，对外已是领域服务的概念，需要将其暴露为微服务。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/%E5%BE%AE%E6%9C%8D%E5%8A%A1.jpg" alt="微服务"></p><p>注：具体的架构实践可按照团队和业务的实际情况来，此处仅为作者自身的业务实践。除分层架构外，如CQRS架构也是不错的选择</p><p>以下是一个示例。我们定义了抽奖、活动准入、风险控制等多个领域服务。在本系统中，我们需要集成多个领域服务，为客户端提供一套功能完备的抽奖应用服务。这个应用服务的组织如下：</p><p><strong>代码演示9 LotteryApplicationService：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LotteryApplicationService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LotteryRiskService riskService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LotteryConditionService conditionService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LotteryService lotteryService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户参与抽奖活动</span></span><br><span class="line">    <span class="keyword">public</span> Response&lt;PrizeInfo, ErrorData&gt; <span class="title function_">participateLottery</span><span class="params">(LotteryContext lotteryContext)</span> &#123;</span><br><span class="line">        <span class="comment">//校验用户登录信息</span></span><br><span class="line">        validateLoginInfo(lotteryContext);</span><br><span class="line">        <span class="comment">//校验风控 </span></span><br><span class="line">        <span class="type">RiskAccessToken</span> <span class="variable">riskToken</span> <span class="operator">=</span> riskService.accquire(buildRiskReq(lotteryContext));</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//活动准入检查</span></span><br><span class="line">        <span class="type">LotteryConditionResult</span> <span class="variable">conditionResult</span> <span class="operator">=</span> conditionService.checkLotteryCondition(otteryContext.getLotteryId(),lotteryContext.getUserId());</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//抽奖并返回结果</span></span><br><span class="line">        <span class="type">IssueResponse</span> <span class="variable">issueResponse</span> <span class="operator">=</span> lotteryService.issurLottery(lotteryContext);</span><br><span class="line">        <span class="keyword">if</span>(issueResponse!=<span class="literal">null</span> &amp;&amp; issueResponse.getCode()==IssueResponse.OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> buildSuccessResponse(issueResponse.getPrizeInfo());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;   </span><br><span class="line">            <span class="keyword">return</span> buildErrorResponse(ResponseCode.ISSUE_LOTTERY_FAIL, ResponseMsg.ISSUE_LOTTERY_FAIL)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validateLoginInfo</span><span class="params">(LotteryContext lotteryContext)</span>&#123;...&#125;</span><br><span class="line">    <span class="keyword">private</span> Response&lt;PrizeInfo, ErrorData&gt; <span class="title function_">buildErrorResponse</span> <span class="params">(<span class="type">int</span> code, String msg)</span>&#123;...&#125;</span><br><span class="line">    <span class="keyword">private</span> Response&lt;PrizeInfo, ErrorData&gt; <span class="title function_">buildSuccessResponse</span> <span class="params">(PrizeInfo prizeInfo)</span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>在本文中，我们采用了分治的思想，从抽象到具体阐述了DDD在互联网真实业务系统中的实践。通过领域驱动设计这个强大的武器，我们将系统解构的更加合理。</p><p>但值得注意的是，如果你面临的系统很简单或者做一些SmartUI之类，那么你不一定需要DDD。尽管本文对贫血模型、演进式设计提出了些许看法，但它们在特定范围和具体场景下会更高效。读者需要针对自己的实际情况，做一定取舍，适合自己的才是最好的。</p><p>本篇通过DDD来讲述软件设计的术与器，本质是为了高内聚低耦合，紧靠本质，按自己的理解和团队情况来实践DDD即可。</p><p>另外，关于DDD在迭代过程中模型腐化的相关问题，本文中没有提及，将在后续的文章中论述，敬请期待。</p><p>鉴于作者经验有限，我们对领域驱动的理解难免会有不足之处，欢迎大家共同探讨，共同提高。</p><h1 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h1><blockquote><p>Eric Evans.领域驱动设计.赵俐 盛海艳 刘霞等译.人民邮电出版社，2016.<br>Vaughn Vernon.实现领域驱动设计.滕云译.电子工业出版社，2014.</p></blockquote><h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><p>文彬、子维，美团点评资深研发工程师，毕业于南京大学，现从事美团外卖营销相关的研发工作。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领域模型 </tag>
            
            <tag> DDD </tag>
            
            <tag> 架构模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《码出高效》系列笔记（三）：异常与日志</title>
      <link href="/post/43892940-eb34-11e9-8e01-011debd96741/"/>
      <url>/post/43892940-eb34-11e9-8e01-011debd96741/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇汲取了本书中较为精华的知识要点和实践经验加上读者整理，作为本系列里的第三篇章：异常与日志篇。</p><p><strong>本系列目录</strong>：</p><ul><li><a href="https://www.yuanmo.xyz/post/0bdf0b10-c25b-11e9-9d06-1f20e5bd3f76/">《码出高效》系列笔记（一）：面向对象中的类</a></li><li><a href="https://www.yuanmo.xyz/post/b1acf8e0-c89b-11e9-9ee1-01379c6f9115/">《码出高效》系列笔记（一）：面向对象中的方法</a></li><li><a href="https://www.yuanmo.xyz/post/3239f2f0-c89d-11e9-89c4-bd64deffb20f/">《码出高效》系列笔记（一）：面向对象中的其他知识点</a></li><li><a href="https://www.yuanmo.xyz/post/d5aea070-d2ac-11e9-ab1f-f97e9fd39695/">《码出高效》系列笔记（二）：代码风格</a></li><li><a href="https://www.yuanmo.xyz/post/43892940-eb34-11e9-8e01-011debd967415/">《码出高效》系列笔记（三）：异常与日志</a></li><li><a href="https://www.yuanmo.xyz/post/025b9630-626f-11ea-8f75-554d885c423a/">《码出高效》系列笔记（四）：数据结构与集合的框架</a></li><li><a href="https://www.yuanmo.xyz/post/d6e37130-64cb-11ea-a19c-b3eaacf8ea9d/">《码出高效》系列笔记（四）：数据结构与集合的数组和泛型</a></li><li><a href="https://www.yuanmo.xyz/post/31c8add0-69af-11ea-ad58-59a2dd622848/">《码出高效》系列笔记（四）：元素的比较</a></li><li><a href="https://www.yuanmo.xyz/post/5a0667d0-fd7d-11ea-ad87-11fe3cadc827/">走进JVM之内部布局</a></li><li><a href="https://www.yuanmo.xyz/post/132bab40-fcc4-11ea-ab6f-7dc412045e4d/">走进JVM之字节码与类加载</a></li><li><a href="https://www.yuanmo.xyz/post/bd0fa690-fcae-11ea-897f-29deed537cb3/">走进JVM之GC</a></li></ul><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>处理异常程序时，需要解决以下3个问题：</p><ol><li>哪里发生异常</li><li>谁来处理异常</li><li>如何处理异常</li></ol><p><strong>无论采用哪种方式处理异常，都严禁捕获异常后什么都不做或打印一行日志了事</strong>。</p><p>学会对任何事情提出质疑；思考问题相比之前会更加多维度的切入；工作上做一件事会考虑它的责任划分、职能问题、；更加谨慎了（也不知道是好是坏）</p><h1 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h1><p>JDK中定义了一套完整的异常机制，所有异常都是Throwable的子类，分为Error（致命异常）和Exception（非致命异常）。其中Exception又分为checked（受检型异常）和unchecked（非受检型异常）。</p><h2 id="checked异常与unchecked异常"><a href="#checked异常与unchecked异常" class="headerlink" title="checked异常与unchecked异常"></a>checked异常与unchecked异常</h2><p><strong>checked异常是需要在代码中显示处理的异常，否则会编译出错。</strong></p><ul><li>力所能及、坦然处置型。如发生未授权异常（UnAuthorizedException），程序可以跳转至权限申请页面。</li></ul><p>unchecked异常是运行时异常，它们是都继承自RuntimeException，不需要程序进行显式的捕捉和处理，该类异常可以分为以下3类：</p><ul><li>可预测型异常（Predicted Exception）：常见的大家都很熟悉包括IndexOutOfBoundsException、NullPointException等，此类异常不应该产生或者抛出，而应该提前做好边界检查、空指针判断处理等。显式的声明<strong>很蠢</strong>。</li><li>需捕捉异常（Caution Exception）：例如在使用Dubbo框架在进行RPC调用时产生的远程服务超时异常DubboTimeoutException，此类异常是客户端必须显示处理的异常，不应该出现因产生该异常而导致不可用的情况，一般处理方法是重试或者降级处理。</li><li>可透出异常（Ignored Exception）：主要是指框架或系统产生的且会自动处理的异常，而程序无需关心。例如Spring框架中抛出的NoSuchRequestHandlingMethodException异常，Spring框架会自己完成异常的处理，默认将自身抛出的异常自动映射到合适的状态码，比如启动防护机制跳转到404页面。</li></ul><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BC%82%E5%B8%B8%E5%88%86%E7%B1%BB%E7%BB%93%E6%9E%84.png/wm" alt="异常分类结构"></p><p>针对上图的结构，下面结合旅行的实例来说明一下异常分类。</p><p>第一，机场地震，属于不可抗力，对应异常分类中的Error。平时在出行时无需考虑该因素。</p><p>第二，堵车属于checked异常，应对这种异常，我们可以提前出发，或者改签机票。而飞机延误异常，虽然也需要check，但是我们无能为力，只能持续关注航班动态。</p><p>第三，忘带护照，可提前预测的异常，在出发前检查避免。去机场路上厕纸抛锚，突发异常难以预料，但是必须处理，属于需要捕获的异常，可以通过更换交通工具应对。检票机器故障属于可透出型异常，交由航空公司处理，我们无须关心。</p><h1 id="try代码块"><a href="#try代码块" class="headerlink" title="try代码块"></a>try代码块</h1><p><code>try-catch-finally</code>是处理程序异常的三部曲。当存在try时，可以只有catch代码块，也可以只有finally代码块，就是不能单独只有try这个光杆司令。</p><ol><li>try代码块：监视代码执行过程，一旦发现发现异常则直接跳转至catch，如果没有catch，则直接跳转至finally。</li><li>catch代码块：可选执行的代码块，如果没有异常发生则不会执行；如果发现异常则进行处理或向上抛出。这一切都在catch代码块中执行。</li><li>finally代码块：必选执行的代码块，不管是否有异常产生，即使发生OutOfMemoryError也会执行，通常用于处理善后清理工作。如果finally代码块没有执行，那么有三种可能：<ul><li>没有进入try代码块</li><li>进入try代码块，但是代码运行中出现了死循环或死锁状态</li><li>进入try代码块，但是执行了System.exit()操作</li></ul></li></ol><h2 id="和return的关系"><a href="#和return的关系" class="headerlink" title="和return的关系"></a>和return的关系</h2><p>finally是在return表达式运行后执行的，此时将要return的结果已经被暂存起来，待finally代码块执行结束后再将之前的暂存的结果返回。</p><p>打印的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value = <span class="number">101</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">11</span></span><br><span class="line">z = <span class="number">101</span></span><br></pre></td></tr></table></figure><p>以上的结果说明：</p><ol><li><font color = #FF8C00>最后return的动作是由finally代码块中的<code>return ++z</code>完成的，所以方法返回的结果101。</font></li><li><font color = #FF8C00>语句<code>return ++x</code>中的<code>++x</code>被成功执行，所以运行结果是2。</font></li><li><font color = #FF8C00>如果有异常抛出，那么运行结果将会是y&#x3D;11，而x&#x3D;1。</font></li></ol><p>finally代码块中使用return语句，使返回值的判断变得复杂，所以避免返回值不可控，我们不要在finally代码块中使用return语句。</p><h2 id="try与锁的关系"><a href="#try与锁的关系" class="headerlink" title="try与锁的关系"></a>try与锁的关系</h2><p>lock方法可能会抛出unchecked异常，如果放在try中，必然触发finally中的unlock方法执行。对未加锁的对象解锁会抛出unchecked异常。所以在try代码块之前调用lock方法，避免由于加锁失败导致finally调用unlock抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XxxLock</span>();</span><br><span class="line">preDo();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 无论加锁是否成功，unlock都会被执行。</span></span><br><span class="line">  lock.lock();</span><br><span class="line">  doSomething();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在try代码块之前调用lock方法，避免由于加锁失败导致finally调用unlock方法抛出异常。<code>lock.lock();</code>这段代码应该移到try的上方。</p><h1 id="异常的抛与接"><a href="#异常的抛与接" class="headerlink" title="异常的抛与接"></a>异常的抛与接</h1><ul><li>对外提供的开放接口，使用错误码；</li><li>公司内部跨应用远程服务调用优先考虑使用Result对象来封装错误码、错误描述、栈信息；</li><li>应用内部者推荐直接抛出异常对象。</li></ul><p>个人习惯：无论是否自定义了异常类或者 handle，都应该做两点：根据实际情况选择是否输出、保留原始栈信息；向上转型成分类好的错误码和简要描述。</p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><blockquote><p>日志有什么用就不用多说了吧</p></blockquote><h2 id="日志规范"><a href="#日志规范" class="headerlink" title="日志规范"></a>日志规范</h2><p>推荐的日志的命名方式：<code>appName_logType_logName.log</code>，其中<code>logType</code>位日志类型，推荐分类有status、monitor、visit等，<code>logName</code>为日志描述。<br>日志的保存至少在15天，当然还是以实际情况为准。</p><p>日志的级别由低到高排序：</p><ul><li>DEBUG：记录对调试程序有帮助的信息。</li><li>INFO：记录程序运行现场，一般作用于对其他错误的指导意义。</li><li>WARN：也可记录程序运行现场，但是更偏向于表明此处有出现潜在错误的可能。</li><li>ERROR：表明此处发生了错误，需要被关注，但是当前发生的错误，并未影响系统的运行。</li><li>FATAL：表明当前程序运行出现了严重的错误事件，并且将会导致应用程序中断。</li></ul><p>不同的级别，要有不同的处理方式。</p><ol><li><p>预先判断日志的级别<br>使用占位符的形式打印，避免字符串的拼接输出信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;id = &#123;&#125; and symbol = &#123;&#125;&quot;</span>, id, symbol);</span><br></pre></td></tr></table></figure></li><li><p>避免无效日志打印<br>生产环境禁止DEBUG日志打印且有选择的输出INFO日志。<br>避免重复打印，设置additivity&#x3D;false，示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span> = <span class="string">&quot;com.xxx.xxx.config&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>区别对待错误日志<br>一般设定ERROR级别的日志需要人为介入</p></li><li><p>保证记录内容完整</p><ul><li>记录异常时一定要输出异常堆栈，例如<code>logger.error(&quot;xxx&quot; + e.getMessage(), e);</code>。</li><li>日志中如果输出对象实例，要确保实例类重写了toString方法，否则只会输出对象的hashCode的值，没有实际意义。</li></ul></li></ol><h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><blockquote><p>现在ELK也非常流行，功能比较强大。</p></blockquote><ol><li><p>日志门面<br>门面设计模式是面向对象设计模式中的一种，类似JDBC的概念。提供一套接口规范，本身不具备实现，目的是让使用者不用关注底层是哪个日志库。最广泛的有两种：slf4j和commons-logging。</p></li><li><p>日志库<br>它是具体实现日志的相关功能，主流有三个，分别是log4j、log-jdk、logback。logback最晚出现，和log4j是同一个作者，是它的升级版并且本身就实现了slf4j的接口。</p></li></ol><p>业界标准门面模式：slf4j+logback组合。</p><p><strong>日志打印规范如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Xxx.class);</span><br></pre></td></tr></table></figure><p>logger被定义为static变量，是因为与当前的类绑定，避免每次都new一个新的对象，造成资源浪费，甚至引发OOM问题。</p><p>另外注意日志库冲突。例如：页面出现500错误，但是整个系统中未发现任务异常日志。由于是log4j作为当前日志库，但是间接地引入了logback日志库，导致打印日志的logger引用实际指向<code>ch.qos.logback.classic.Logger</code>对象，冲突导致日志打印失效。</p>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Easy Coding </tag>
            
            <tag> 异常 </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D区</title>
      <link href="/post/3f573050-d915-11e9-9d5e-538baaf5d924/"/>
      <url>/post/3f573050-d915-11e9-9d5e-538baaf5d924/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p><code>“我上次是不得已啊...”</code></p><p><code>“我是不要再做这个胃镜了。”</code></p><p>…</p><p><code>“好像大家都很怕这个胃镜啊...”</code>我刨了两口饭。</p><p>当晚，胃灼、不适愈发明显。</p><p>手术台、注射剂、胃癌细胞一幕幕浮现我的眼前。</p><blockquote><p>晚饭时刚聊完这个话题，就轮到我了吗？</p></blockquote><p>其实胃镜我很早就想做了，从小到大一直很瘦。小时候营养科去诊查过，微量元素也检测过并未发现有什么异常，只能默默归咎于体质和饮食。果然是肠胃不好吗？</p><p>遂马上预约浙医二院第二天的精英门诊，即便平台提醒我初诊挂普通门诊就好。想着还是好好检查下胃吧，胃镜痛苦就痛苦了。挂完号之后大概是心理作用胃更加难受了。</p><p><code>“医生，我最近偶有胃部不适、微灼感，时长几天左右，半年就有这个情况，去药店吃药解决了。另外最近没有吃辣和刺激性的食物。”</code></p><p><code>“嗯...那要不要做个胃肠镜？”</code></p><p>胃肠镜？肠镜这个好像有点超出了我的接受范围了，听说半小时到一小时不等。</p><p><code>“就先做个胃镜吧。”</code></p><p><code>“预约个胃镜吧。”</code></p><p>门诊就这么几句话，毕竟是初诊，再有经验的医生也不能只凭你的几句描述就做出相应精确的诊断，尤其是消化内科，说了一大堆最后还是变成先做胃肠镜。精英门诊的初诊和普通门诊比就只是不用排很久的队而已。</p><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>预约的周一下午，为保证胃镜的准确性，需要空腹8小时，禁饮4小时以上。</p><p>到达医院后望了一眼排队等待屏幕，普通胃镜的排队名单只有零星二三，而无痛胃镜下一大串名单，排队人数是普通的几倍。我顿时咽了咽口水，今天喉咙还有点不舒服，那我是不是还挺勇敢的？</p><p>周围一半都是有家属陪同的老人👴👵，有些被搀扶着还颤颤巍巍即将送去做无痛胃肠镜。我突然想到了几十年后的我，如果年轻就不注意自己的身体的话，年老之后的痛苦会一一找上门吧。但是转念一想，有些人早晚刷牙使用牙线、冲牙器还是得了龋齿；有些人作息健康、坚持健身锻炼还是得了癌症；有些人烟酒都沾，还是能长命百岁。也许就是个患病风险大小的问题吧。</p><p><code>“一瓶油，一瓶药。这瓶油现在先喝，药等医生和你说再喝。”</code></p><p>我翻出楼下药房取得那瓶白色小瓶子，二甲硅油乳剂，混浊浓稠的液体。一开始还以为是涂抹在医疗器械上的，原来是口服的，心想这真的能喝吗。味道无味，非常的粘稠，查了下才知道一般用于检测前清洁胃肠道。不过另一瓶麻醉消化道的药就是真难喝了，比苦还要复杂一点的感觉，不过比起即将要面对的胃镜这点苦味似乎也不算什么了。为了更好地麻痹自己的喉咙，我还把药在口腔中逗留了一会儿，第一次把药喝得这么干净。</p><p>麻醉药很快就表现出药效，约莫二分钟就能感觉到已经无法正常咽喉咙和吞口水了，而且这时候强咽口水反而会有误入气管的风险，只得乖乖侧躺在病床等待。</p><p><code>“你怎么这么瘦？”</code></p><p><code>“可能就是因为胃不太好才来看病，所以才这么瘦的啊。”</code>又双叒叕一次回答了别人对我瘦的疑问。</p><p>胃镜的管子大概1厘米粗，头上有一闪一闪五颜六色的灯，应该是一个摄像头，说实话有点好看。在管子伸入你喉咙之前为了不让你的牙齿接触到，会有一个类似扩口器一样的道具让你咬住。</p><p><code>“放松，鼻子吸气嘴巴吐气。”</code></p><blockquote><p>“口区……”</p></blockquote><p>管子刚进入喉咙的那一刻，是窒息的。身体本能抵抗的呕吐感强烈袭来，我尽管已经预想到了这种感觉，已经尽量控制绷紧自己的胸腔和肌肉还是止不住的干呕。我闭上双眼用右手抵住嘴巴上的道具为了不被我吐出，慢慢调整呼吸，尽量先用鼻子吸气吐气，可是节奏还是被剧烈的呕吐感打乱。</p><blockquote><p>“口区……”</p></blockquote><p>我突然体会到了 AV 女优们的不容易。大概干呕了两次之后，我设法转移我的注意力。管子移动也开始慢了起来，很快像是肾部位有捅感，不知道是不是是到了十二指肠了，这种感觉很奇妙，不痛不痒冰冰凉凉的。任由它在我身体内自由穿梭，通过慢吸慢呼后面基本在平静中度过。</p><p>整个过程5分钟，实际体验还以为只有3分钟。除开前面的干呕了二次让人感受到了死亡以外，后面的过程只要配合医生，掌握好呼吸节奏不要有吞咽的动作很快就可以结束，拔出管子的那一刻也没有任何不适。胃镜项目中医生还取胃窦小弯一块进行活检，用于一周之后的病理报告。</p><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>所幸基本没什么问题，就是需要注意以后的饮食结构和规律了。</p>]]></content>
      
      
      <categories>
          
          <category> 点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 轨迹 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《码出高效》系列笔记（二）：代码风格</title>
      <link href="/post/d5aea070-d2ac-11e9-ab1f-f97e9fd39695/"/>
      <url>/post/d5aea070-d2ac-11e9-ab1f-f97e9fd39695/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇汲取了本书中较为精华的知识要点和实践经验加上读者整理，作为本系列里的第二篇章：代码风格篇。</p><p><strong>本系列目录</strong>：</p><ul><li><a href="https://www.yuanmo.xyz/post/0bdf0b10-c25b-11e9-9d06-1f20e5bd3f76/">《码出高效》系列笔记（一）：面向对象中的类</a></li><li><a href="https://www.yuanmo.xyz/post/b1acf8e0-c89b-11e9-9ee1-01379c6f9115/">《码出高效》系列笔记（一）：面向对象中的方法</a></li><li><a href="https://www.yuanmo.xyz/post/3239f2f0-c89d-11e9-89c4-bd64deffb20f/">《码出高效》系列笔记（一）：面向对象中的其他知识点</a></li><li><a href="https://www.yuanmo.xyz/post/d5aea070-d2ac-11e9-ab1f-f97e9fd39695/">《码出高效》系列笔记（二）：代码风格</a></li><li><a href="https://www.yuanmo.xyz/post/43892940-eb34-11e9-8e01-011debd967415/">《码出高效》系列笔记（三）：异常与日志</a></li><li><a href="https://www.yuanmo.xyz/post/025b9630-626f-11ea-8f75-554d885c423a/">《码出高效》系列笔记（四）：数据结构与集合的框架</a></li><li><a href="https://www.yuanmo.xyz/post/d6e37130-64cb-11ea-a19c-b3eaacf8ea9d/">《码出高效》系列笔记（四）：数据结构与集合的数组和泛型</a></li><li><a href="https://www.yuanmo.xyz/post/31c8add0-69af-11ea-ad58-59a2dd622848/">《码出高效》系列笔记（四）：元素的比较</a></li><li><a href="https://www.yuanmo.xyz/post/5a0667d0-fd7d-11ea-ad87-11fe3cadc827/">走进JVM之内部布局</a></li><li><a href="https://www.yuanmo.xyz/post/132bab40-fcc4-11ea-ab6f-7dc412045e4d/">走进JVM之字节码与类加载</a></li><li><a href="https://www.yuanmo.xyz/post/bd0fa690-fcae-11ea-897f-29deed537cb3/">走进JVM之GC</a></li></ul><h1 id="命名规约"><a href="#命名规约" class="headerlink" title="命名规约"></a>命名规约</h1><p>代码风格一般不会影响程序运行，通常与数据结构、逻辑表达无关。往往指代不可见字符的展示方式、代码元素的命名方式和代码注释风格等，但是却会隐藏潜在风险。虽然编码习惯不存在明显优劣之分，但是在团队开发效率上也许会是一个巨大的内耗，牺牲小我，成就大我，提升效能也许来的更关键。<br>但是我们都是独一无二有灵魂有思想的个体，不是clone出来的机器人，难免在理解和习惯有所偏差，如何去统一部分习惯呢？这本《码出高效》最早就是以规约而出名，本人也遵循了本书的中的大部分规则用于日常的开发中，书中有很多点因为阿里大量业务经验的存在而比我们考虑规范周全得多，所以直接采用本书的一些“规定”往往会便捷的多。</p><h2 id="命名符合本语言特性"><a href="#命名符合本语言特性" class="headerlink" title="命名符合本语言特性"></a>命名符合本语言特性</h2><p>每种语言都有自己独特的命名风格，有些语言在定义时提倡以前缀来区分局部变量、全局变量、控件类型。比如li_count表示local int局部整型变量，dw_report表示data window用于暂时报表数据的控件，有些语言规定以下划线为前缀来进行命名。<strong>在Java中，所有代码元素的命名均不能以下划线或美元符号开始或结束</strong>。</p><h2 id="命名体现代码元素特征"><a href="#命名体现代码元素特征" class="headerlink" title="命名体现代码元素特征"></a>命名体现代码元素特征</h2><ol><li>类名采用大驼峰形式（UpperCamelCase），一般为名词，例如：Object、StringBuffer、FileInputStream等。</li><li>方法名采用小驼峰形式（lowerCamelCase），一般为动词，与参数组成动宾结构，例如Object的wait()、StringBuffer的append(String)、FileInputStream的read()等。</li><li>变量包括参数、成员变量、局部变量等，也采用小驼峰形式。</li><li>常量的命名方式比较特殊，除了局部常量外字母全部大写，单词之间用下划线连接。</li></ol><p>在Java命名时，以下列方式体现元素特征：</p><ul><li>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英文单词。包名统一使用单数形式，但是类名如果有复数含义，则可以使用复数形式。</li><li>抽象类命名是用Abstract或Base开头；异常类明明采用Exception结尾；测试类命名以它要测试的类名开始，以Test结尾。</li><li>类型与中括号紧挨着相连来定义数组，例如：<code>String[] args</code>。</li><li>枚举类名带上Enum后缀，枚举成员名称参考常量的命名方式。</li></ul><h2 id="命名最好望文知义"><a href="#命名最好望文知义" class="headerlink" title="命名最好望文知义"></a>命名最好望文知义</h2><p>从名称上就能理解某个词句的确切含义是坠吼滴，带到自解释的目的。</p><ul><li>所以要避免不规范的缩写，比如condition缩写成condi、consumer缩写成cons，类似随意的缩写会严重降低代码的可理解性。</li><li>避免中文拼音、中英混合的方式，比如DaZePromotion（打折促销类）、PfmxBuilder（评分模型抽闲工厂类）。alibaba、baidu、taobao这类国际通用的名称，视为英文。</li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>作为在作用域内保持不变的值，一般用final关键字进行修饰，根据作用域划分成：全局常量、类内常量、局部常量。</p><ol><li>全局常量：指类的公开静态属性，使用<code>public static final</code>修饰。</li><li>类内常量：私有静态属性，使用<code>private static final</code>修饰，</li><li>局部常量分为方法常量和参数常量，前者是在方法或代码内定义的常量，后者是定义形式参数是，增加final标识，表示此参数值不能被修改。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyCoding</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GLOBAL_CONSTANT</span> <span class="operator">=</span> <span class="string">&quot;shared in global&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLASS_CONSTANT</span> <span class="operator">=</span> <span class="string">&quot;shared in class&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(String a)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">methodConstant</span> <span class="operator">=</span> <span class="string">&quot;shared in method&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">g</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="comment">// 编译出错，不允许对常量参数进行重新赋值</span></span><br><span class="line">        b = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量在代码中具有穿透性，使用甚广，所以必须是一个恰当的命名并且保证长期使用。常量是为了干掉一些可能会在迭代中改变的魔法值，比如某业务中，12345五种代表着课程的审核状态，在团队规模小时口口相传加上注释可以保证不出错，但是在业务扩展的过程中会变得更加复杂（课程的等级状态也有12345五种，很容易混淆），则需要一套枚举类和全局常量类提高可读性来管理这些状态。</p><p>书中认为，系统成长到某个阶段后，重构是一种必然选择。优秀的架构设计不是去阻止未来一切重构的可能性，毕竟技术栈、业务方向和规模都在不断变化，二是尽量让重构来得晚一些，幅度小一些。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>广义来说，在程序中变量是一切通过分配内存并赋值的量，分为不可变量（常量）和可变变量。<br>变量命名需要满足小驼峰形式，体现业务含义即可。重点强调：在POJO类中，针对布尔类型的变量，命名不可以加is前缀。例如ORM映射关系中，数据库<code>is_deleted</code>字段，在类中不可以这样声明<code>Boolean isDeleted;</code>，因为getter方法也是<code>isDeleted()</code>，因为框架反向解析时会误以为对应的属性是<code>deleted</code>，导致获取不到属性，进而抛出异常。我们可以通过<resultMap>中添加下映射就vans辣！</p><h1 id="代码展示风格"><a href="#代码展示风格" class="headerlink" title="代码展示风格"></a>代码展示风格</h1><h2 id="缩进、空格和空行"><a href="#缩进、空格和空行" class="headerlink" title="缩进、空格和空行"></a>缩进、空格和空行</h2><p>像Python这种没有大括号的语言，对缩进的使用非常严格，Java虽然没有这么严格，但是井然有序的风格让review变得更加高效。</p><ul><li><p>缩进：缩进表示层次对应关系，由于不同编辑器对Tab的解析不一致，而空格在编辑器中往往是兼容的，所以一般规定采用<strong>4个空格</strong>作为默认的缩进方式，当然现在IDE这么智能，早就不需要手打4个空格了，可以再Tab键和空格之间实现快速转换。其中IDEA设置Tab键为4个空格时，请勿勾选Use tab character；而在eclipse中，必须勾选Inset spaces for tabs。高版本的IDEA好像已经是默认4个空格代替tab缩进。<br><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/easy%20coding/tab.png" alt="IDEA中的配置"></p></li><li><p>空格：空格用于分隔不同的的编程元素，空格使得各元素之间错落有致，方便定位。一般有如下规定：</p><ol><li>任何二目、三目运算符的左右两边都必须加一个空格。</li><li>注释的双斜线与注释内容之间有且仅有一个空格。</li><li>方法参数在定义和传入时，多个参数逗号后面必须加空格。</li><li>没有必要增加若干空格使变量的赋值等号遇上一行对应位置的等号对齐。</li><li>如果是大括号内为空，那么简洁的写成{}即可，大括号中间无需换行和空格。</li><li>左右小括号与括号内部的相邻字符之间不要出现空格。</li><li>左大括号前需要加空格。</li></ol></li></ul><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyCoding</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不需要等号的位置一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">one</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">two</span> <span class="operator">=</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Long</span> <span class="variable">three</span> <span class="operator">=</span> <span class="number">2L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">weChat</span> <span class="operator">=</span> <span class="string">&quot;weChat&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 缩进4个空格，并且在try关键字与左大括号之间保留一个空格</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 二目运算符的左右必须有一个空格</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 三目运算符的左右两边必须有一个空格，小括号相邻字符无需空格。</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">condition</span> <span class="operator">=</span> (count == <span class="number">1</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (count == <span class="number">0</span>) ? <span class="number">99</span> : -<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * if关键字与小括号之间保留一个空格</span></span><br><span class="line"><span class="comment">             * 小括号与大括号之间保留一个空格</span></span><br><span class="line"><span class="comment">             * 建议使用IDE的自动补全</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;996&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * if-else后无论逻辑复杂与否，都需要加上大括号，并且之间保留一个空格</span></span><br><span class="line"><span class="comment">             * else不用换行</span></span><br><span class="line"><span class="comment">             */</span>    </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;965&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 多个实参逗号后面必须有一个空格</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fuckTheWorld</span> <span class="operator">=</span> getStr(one, two);</span><br><span class="line">            System.out.println(fuckTheWorld);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// catch体是不应该出现空内容的，但是这里为了讲解需要。&#123;&#125;中无需换行和空格。    </span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个形参，逗号后面保留一个空格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> one</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> two</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getStr</span><span class="params">(String one, String two)</span> &#123;</span><br><span class="line">        <span class="comment">// 任何二目运算符的左右必须有一个空格，包括赋值运算符，加号运算符。</span></span><br><span class="line">        <span class="keyword">return</span> one + two;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>空行：空行用来分隔功能相似、逻辑内聚、意思相近的代码片段，是的代码布局更加清晰。一般在如下地方可以添加空行：<ol><li><font color = #FF8C00>方法定义</font></li><li><font color = #FF8C00>属性定义结束</font></li><li><font color = #FF8C00>不同逻辑</font></li><li><font color = #FF8C00>不同于一</font></li><li><font color = #FF8C00>不同业务</font></li></ol></li></ul><h2 id="换行与高度"><a href="#换行与高度" class="headerlink" title="换行与高度"></a>换行与高度</h2><ul><li>换行：单行字符不超过120个，超过必须要换行，换行遵循以下原则：<ol><li><font color = #FF8C00>第二行相对第一行缩进4个空格，从第三行开始，不再继续缩进，参考示例</font></li><li><font color = #FF8C00>运算符与下文一起换行</font></li><li><font color = #FF8C00>方法调用的点符号与下文一起换行</font></li><li><font color = #FF8C00>方法调用中的多个参数需要换行时，在逗号后面换行</font></li><li><font color = #FF8C00>在括号前不要换行</font></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">sb.append(<span class="string">&quot;我&quot;</span>).append(<span class="string">&quot;要&quot;</span>)...</span><br><span class="line">    .append(<span class="string">&quot;正&quot;</span>)...</span><br><span class="line">    .append(<span class="string">&quot;能&quot;</span>)...</span><br><span class="line">    .append(<span class="string">&quot;量&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>方法行数限制：<br>方法是执行单位，也是阅读代码逻辑的最高粒度模块。代码逻辑要分为主次、个性与共性，抽取次要逻辑作为独立方法，共性逻辑抽取陈共性方法（日期、参数校验、权限判断）。<br>约定单个方法的总行数不超过80行。</li></ul><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><p>控制语句遵循如下约定：</p><ul><li>在if、else、for、while、do-while等语句中必须使用大括号。即使只有一行代码，也要加上大括号。</li><li>在条件表达式中不允许有赋值操作，也不允许在判断表达式中出现复杂的逻辑组合。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反例：如下。</span></span><br><span class="line"><span class="keyword">if</span> ((file.open(fileName, <span class="string">&quot;w&quot;</span>) != <span class="literal">null</span>) &amp;&amp; (...) || (...)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正例：而是应该赋值给一个布尔变量。</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">existed</span> <span class="operator">=</span> (file.open(fileName, <span class="string">&quot;w&quot;</span>) != <span class="literal">null</span>) &amp;&amp; (...) || (...);</span><br><span class="line"><span class="keyword">if</span> (existed) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多层嵌套不要超过3层。还记得太吾绘卷的一个if-else走天下吗？如果确实比较复杂的判断逻辑，可以采用卫语句、策略模式、状态模式来实现。其中卫语句即代码逻辑先考虑失败、异常、中断、退出等直接返回的情况，以方法多个出口的方式，解决代码中判断 分支嵌套的问题，这是逆向思维的体现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> func &#123;</span><br><span class="line">    <span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (condition3) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>避免采用取反逻辑运算符。判断x是否小于1，应该采用<code>if (x &lt; 1)</code>而不是<code>if (!(x &gt;= 1))</code>。</li></ul><h2 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h2><h3 id="Javadoc规范"><a href="#Javadoc规范" class="headerlink" title="Javadoc规范"></a>Javadoc规范</h3><p>类、类属性和类方法的注释必须遵循Javadoc规范，使用文档注释（&#x2F;** *&#x2F;）的格式。规范编写的注释，可以生成规范的JavaAPI文档，为外部用户提供有效支持。IDE也会自动提示所用到的类、方法的注释。</p><ol><li><font color = #FF8C00>枚举类十分特殊，他的代码极为稳定。</font>（我以前就有这个疑问，枚举类的一般的description属性加上name已经可以描述该枚举，为什么还要再加上注释。但是枚举类和全局常量一样，穿透性极强，而且在定义前就要深思熟虑，因为影响较大，所以注释是必须。）</li><li><font color = #FF8C00>注释的内容不仅限于解释属性值的含义，还可以包括注意事项、业务逻辑。</font>（修改代码，可以加上修改和创建时间。）</li><li><font color = #FF8C00>枚举类的删除或者修改都存在很大的风险。</font>（一般需要标注为过时属性，不可直接删除。）</li></ol><h3 id="简单注释"><a href="#简单注释" class="headerlink" title="简单注释"></a>简单注释</h3><p>包括单行和多行注释，<strong>特别强调此类注释不可写在代码后方，必须写在代码上方</strong>。双划线的注释与注释内容保留一个空格。</p>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Easy Coding </tag>
            
            <tag> 代码风格 </tag>
            
            <tag> 系统规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心态的起伏</title>
      <link href="/post/d6b414b0-cd29-11e9-8b45-c56f88a832c9/"/>
      <url>/post/d6b414b0-cd29-11e9-8b45-c56f88a832c9/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不正确，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3e4abaead307f8f2cce708b8625e286d4a4d61734c27ef0fc1b26fea72037686"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">heartBeat</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轨迹 </tag>
            
            <tag> 职业 </tag>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《码出高效》系列笔记（一）：面向对象中的其他知识点</title>
      <link href="/post/3239f2f0-c89d-11e9-89c4-bd64deffb20f/"/>
      <url>/post/3239f2f0-c89d-11e9-89c4-bd64deffb20f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇汲取了本书中较为精华的知识要点和实践经验加上读者整理，作为本系列里的第一篇章第三节：面向对象的其他知识点篇。</p><p><strong>本系列目录</strong>：</p><ul><li><a href="https://www.yuanmo.xyz/post/0bdf0b10-c25b-11e9-9d06-1f20e5bd3f76/">《码出高效》系列笔记（一）：面向对象中的类</a></li><li><a href="https://www.yuanmo.xyz/post/b1acf8e0-c89b-11e9-9ee1-01379c6f9115/">《码出高效》系列笔记（一）：面向对象中的方法</a></li><li><a href="https://www.yuanmo.xyz/post/3239f2f0-c89d-11e9-89c4-bd64deffb20f/">《码出高效》系列笔记（一）：面向对象中的其他知识点</a></li><li><a href="https://www.yuanmo.xyz/post/d5aea070-d2ac-11e9-ab1f-f97e9fd39695/">《码出高效》系列笔记（二）：代码风格</a></li><li><a href="https://www.yuanmo.xyz/post/43892940-eb34-11e9-8e01-011debd967415/">《码出高效》系列笔记（三）：异常与日志</a></li><li><a href="https://www.yuanmo.xyz/post/025b9630-626f-11ea-8f75-554d885c423a/">《码出高效》系列笔记（四）：数据结构与集合的框架</a></li><li><a href="https://www.yuanmo.xyz/post/d6e37130-64cb-11ea-a19c-b3eaacf8ea9d/">《码出高效》系列笔记（四）：数据结构与集合的数组和泛型</a></li><li><a href="https://www.yuanmo.xyz/post/31c8add0-69af-11ea-ad58-59a2dd622848/">《码出高效》系列笔记（四）：元素的比较</a></li><li><a href="https://www.yuanmo.xyz/post/5a0667d0-fd7d-11ea-ad87-11fe3cadc827/">走进JVM之内部布局</a></li><li><a href="https://www.yuanmo.xyz/post/132bab40-fcc4-11ea-ab6f-7dc412045e4d/">走进JVM之字节码与类加载</a></li><li><a href="https://www.yuanmo.xyz/post/bd0fa690-fcae-11ea-897f-29deed537cb3/">走进JVM之GC</a></li></ul><h1 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h1><p>同步调用是刚性调用，是阻塞式操作，必须等待调用方法体执行结束。而异步调用是柔性调用，是非阻塞式操作。<br>举个与我们息息相关的例子，git代码提交托管时，提交代码的操作是同步调用，需要实时返回给用户结果，但是当前库代码相关活动就不是时间敏感的，在提交代码时，发送一个消息到后台的缓存队列中，后台服务器定时消费这些消息即可。</p><h1 id="覆写"><a href="#覆写" class="headerlink" title="覆写"></a>覆写</h1><p>覆写是多态的一中表现，大部分人可能把它称为重写，我也遵循了本书的命名，重写可能暗示了推倒重来的过程，而覆写则更多的表达出重写一部分而覆盖。出现覆写的情况非常的多，POJO类<code>toString()</code>方法的覆写，工厂模式的抽象工厂类调用具体工厂子类的方法。通常这也被称作向上转型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"><span class="comment">// son 覆写了此方法</span></span><br><span class="line">father.doSomething();</span><br></pre></td></tr></table></figure><p>向上转型时，通过父类应用执行子类方法时需要注意以下两点：</p><ul><li>无法调用到子类中存在而父类本身不存在的方法。</li><li>可以调用到子类中覆写了父类的方法，这是一种多态实现。</li></ul><p>成功覆写父类方法，满足以下4个条件：</p><ul><li>访问权限不能变小。具体表现为父类中public的方法，在子类继承覆写该方法时变成了private，则破坏了封装，编译也不会通过，所以不允许将访问权限缩小：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我要逃离这里。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">virus</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2020，更加爱宁！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="comment">// 编译报错</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用笔尖微颤歪歪扭扭的线条&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 编译通过</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">virus</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2020，病毒横行！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>返回类型能够向上转型称为父类的返回类型。</li><li>异常也要能向上转型成为父类的异常。unchecked异常（空指针异常这些）不需要显式的向上抛出，但是checked异常只能抛出异常或者此异常的子类。</li><li>方法名和参数类型以及个数必须严格一致。所以建议添加一个<code>@Override</code>注解，编译器会自动检查覆写方法签名是否一致。防止出现明明是要覆写该方法变成新的方法。<code>@Override</code>还可以避免控制权限修饰符可见范围引发的问题，比如Father类中的A方法，是无权限修饰符，Son类继承Father类但是不在一个包下，Son类直接覆写A方法，若是没有加上<code>@Override</code>注解，可能会被编译器认为是一个新的方法。</li></ul><p>总结成口诀：「一大两小两同」。</p><ul><li>一大：之类的方法访问权限控制符只能相同或者变大。</li><li>两小：抛出的异常和返回值只能变小，可以转型成父类对象。子类的返回值、抛出异常类型必须与父类的返回值、抛出异常类型存在继承关系。</li><li>两同：方法名和参数必须相同。</li></ul><p><strong>另外注意</strong>：子类和父类不要相互调用彼此的方法，不然会变成循环调用，最后直至JVM崩溃，产生StackOverflowError异常。</p><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><p>在同一个类中，如果多个方法有相同的方法名、不同的参数，即称为重载，比如一个POJO类中多个构造方法。以及String类中的<code>valueOf</code>，它有9个方法，可以将输入的基本数据类型、数组、Object等转化成为字符串。<br>我们再回顾下方法签名的概念：方法名称+参数类型+参数个数，组成一个<font color=red><strong>唯一键</strong></font>，成为方法签名，这个唯一键是⑧能重复的。JVM就是通过这个唯一键决定调用那种重载的方法。<br>以下代码就是错误的重载方式，他们都有共同的特征，就是方法签名重复冲突了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyCoding</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodForOverload</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编译出错，返回值并不是方法签名的一部分。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">methodForOverload</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编译出错，访问权限控制符也不是方法签名的一部分。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">methodForOverload</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编译出错，静态标识符而不是方法签名的一部分。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodForOverload</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编译出错，final标识符一样也⑧是方法签名的一部分。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">methodForOverload</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么下面这几种情况，编译器是如何判断正确调用的呢，比如下面几种重载方法，第一处和第二处的结果是什么呢：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyCoding</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodForOverload</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;int&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodForOverload</span><span class="params">(Integer arg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodForOverload</span><span class="params">(Integer... args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodForOverload</span><span class="params">(Object arg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">EasyCoding</span> <span class="variable">ec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EasyCoding</span>();</span><br><span class="line">        <span class="comment">// 第一处</span></span><br><span class="line">        ec.methodForOverload(<span class="number">996</span>);</span><br><span class="line">        <span class="comment">// 第二处</span></span><br><span class="line">        ec.methodForOverload();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一处答案是「<font color=red>int</font>」，第二处的答案是「<font color=red>Integer…</font>」。那么为什么<code>ec.methodForOverload(996)</code>方法编译器会匹配到<code>methodForOverload(int arg)</code>呢，而<code>ec.methodForOverload()</code>无参方法缺席的情况下却匹配到了可变参数<code>methodForOverload(Integer... args)</code>?<br>可变参数的个数其实是从0个到多个，所以首先它也会和其他方法抢夺匹配<code>ec.methodForOverload(996)</code>，然而他的优先级是最低的，弟中弟嗷。但是在无参方法缺席的情况，只有他符合这一条件，所以<code>ec.methodForOverload()</code>无参方法自然匹配上。而<code>int</code>和<code>Integer</code>还有<code>Object</code>的较量中胜出的原因是不需要自动装箱，假如把<code>int</code>类型改成<code>long</code>类型，编译器一定也是Match<code>long</code>类型，而优于装箱的<code>Interger</code>。<br>但是如果是<code>methodForOverload(null)</code>这种情况则会调用参数为<code>Integer</code>的方法，Null可以匹配任何类对象，从最底层一次向上查找，会找到<code>Integer</code>和<code>Integer...</code>这两个参数方法，但是会报错，因为他们同时Match上了。<br>JVM在重载方法的顺序如下：</p><ol><li>精确匹配。</li><li>如果是基本数据类型，自动转换成更大表示范围的基本类型。</li><li>通过自动拆箱和装箱。</li><li>通过子类向上转型继承路线依次匹配。</li><li>通过可变参数匹配。</li></ol><p>我们程序猿心情不好的时候也会把气撒在编译器上，有时候，我们会不断挑战编译器的下限，比如这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyCoding</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodForOverload</span><span class="params">(<span class="type">int</span> arg, Integer arg2)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;int arg, Integer arg2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodForOverload</span><span class="params">(Integer arg, <span class="type">int</span> arg2)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer arg, int arg2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodForOverload</span><span class="params">(<span class="type">int</span>... args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;int...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodForOverload</span><span class="params">(Integer... args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">EasyCoding</span> <span class="variable">ec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EasyCoding</span>();</span><br><span class="line">        <span class="comment">// 第一处</span></span><br><span class="line">        ec.methodForOverload(<span class="number">965</span>,<span class="number">996</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此种方式就是完全在挑战编译器的底线了，虽然编译会通过，但是调用的时候一定会报错。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/easy%20coding/Overload.png" alt="编译器此刻的内心是绝望的"></p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>泛型也许是很多人相对陌生的领域，但是它⑧是多么神秘，本质是类型参数化，解决不确定具体对象类型的问题。Java在引入泛型之前，表示可变类型往往存在类型安全的风险，举个例子，微波炉最主要的功能是加热食物，而食物也有几十几百种可能，所以一般会像下面这样写业务设计：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyCoding</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">heat</span><span class="params">(Object food)</span> &#123;</span><br><span class="line">        System.out.println(food + <span class="string">&quot;isOK&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> food;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Meat</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Meat</span>();</span><br><span class="line">        m = (Meat) EasyCoding.heat(m);</span><br><span class="line">        <span class="type">Soup</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Soup</span>();</span><br><span class="line">        s = (Soup) EasyCoding.heat(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>heat</code>方法就是为了避免给每个类型的食物定义一个加热方法，但是只能采用“向上转型”的方式才能具备加热任意类型食物的能力。但是会让客户端困惑，因为对加热的内容不能正确区分，在取出时进行强制类型转换就会存在类型转换风险。而泛型就是为了解决这个而生。</p><h2 id="泛型使用"><a href="#泛型使用" class="headerlink" title="泛型使用"></a>泛型使用</h2><p>泛型可以定义在类、接口、方法中，编译器通过识别尖括号和尖括号内的字母来解析泛型。现在一般约定俗成的符号有：</p><ul><li>E：代表Element，用于集合中的元素。</li><li>T：代表the type of object，表示某个类。</li><li>K：代表Key。</li><li>V：代表Value，K和V用于键值对元素。</li></ul><p>下面这段代码可以很好地说明泛型定义的概念：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyCoding</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &lt;String, T, Object&gt; String <span class="title function_">get</span><span class="params">(String arg1, Object arg2)</span> &#123;</span><br><span class="line">        System.out.println(arg1.getClass());</span><br><span class="line">        System.out.println(arg2.getClass());</span><br><span class="line">        <span class="keyword">return</span> arg1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">arg1</span> <span class="operator">=</span> <span class="number">996</span>;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">arg2</span> <span class="operator">=</span> <span class="number">965L</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result1</span> <span class="operator">=</span> get(arg1,arg2);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] b1 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">666</span>];</span><br><span class="line">        <span class="type">byte</span>[] b2 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">666</span>];</span><br><span class="line">        <span class="type">byte</span>[] result2 = get(b1,b2);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先这段代码是完全可以通过编译的，可能没用过泛型的小伙伴会疑问为什么<code>get()</code>方法可以传入<code>Integer</code>和<code>Long</code>甚至是<code>byte[]</code>类型？而且返回的结果不应该是<code>String</code>类型吗？其实关键就在于<code>&lt;String, T, Object&gt;</code>这个泛型标识，<code>String</code>是我们常见的所熟知的包装类了，<code>Object</code>是所有类的父类，但是在泛型标识里，它就不是<code>String</code>和<code>Object</code>了，而是可以成为任意类型，属于完全未知的类型，入参的第一个参数如果是<code>Integer</code>类型，那么在方法体内的所有<code>arg1</code>就不是我们认知里的<code>java.lang.String</code>了，这个<code>String</code>就是相当于之前说明的<code>T</code>，<code>Object</code>也是一种<code>T</code>，仅仅只是一个代号。<br>当然我们平时编码不会也不要这样去定义泛型，确实会容易引发歧义和造成其他问题。所以我应该注意以下几点：</p><ol><li>尖括号里的每个元素都指代一种位置类型。<code>&lt;String&gt;</code>这里的<code>String</code>就不是我们认知上的<code>java.lang.String</code>了，仅仅只是个代号。包括类名后的<code>&lt;T&gt;</code>和get方法前的<code>&lt;T&gt;</code>是两个指代，互不影响。</li><li>尖括号的位置非常讲究，必须在类名之后或方法返回值之前。</li><li>泛型在定义处只具备执行Object方法的能力。所以<code>arg1</code>和<code>arg2</code>只能调用Object类中的方法，比如<code>toString()</code>。</li><li>对于编码之后的字节码指令，其实没有这些花头花脑的方法签名，充分说明了泛型只是一种编码时的语法检查。</li></ol><p>所以之前微波炉加热食物的例子可以用泛型这样改写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyCoding</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">heat</span><span class="params">(T food)</span> &#123;</span><br><span class="line">        System.out.println(food.getClass());</span><br><span class="line">        System.out.println(food + <span class="string">&quot;isOK&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> food;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        heat(<span class="keyword">new</span> <span class="title class_">Meat</span>());</span><br><span class="line">        heat(<span class="keyword">new</span> <span class="title class_">Soup</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>避免使用Object作为输入和输出可以控制强制转换带来的风险。因为依据墨菲定律，只要这种风险存在，就一定会发生<code>ClassCastException</code>异常。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>基本数据类型9种：int、short、long、float、double、char、boolean、byte、refvar，其中refvar是句柄，是面向对象中的引用变量，默认值为Null。详细如下表格：</p><table><thead><tr><th align="left">类型名称</th><th align="left">默认值</th><th align="left">大小</th><th align="left">最小值</th><th align="left">最大值</th><th align="left">包装类</th><th align="left">缓存区域</th></tr></thead><tbody><tr><td align="left">boolean</td><td align="left">false</td><td align="left">1B</td><td align="left">0(flase)</td><td align="left">1(true)</td><td align="left">Boolean</td><td align="left">无</td></tr><tr><td align="left">byte</td><td align="left">(byte)0</td><td align="left">1B</td><td align="left">-128</td><td align="left">127</td><td align="left">Byte</td><td align="left">-128~127</td></tr><tr><td align="left">char</td><td align="left">‘\u0000’</td><td align="left">2B</td><td align="left">‘\u0000’</td><td align="left">‘\uFFFF’</td><td align="left">Character</td><td align="left">(char)0~(char)127</td></tr><tr><td align="left">short</td><td align="left">(short)0</td><td align="left">2B</td><td align="left">-2^15</td><td align="left">2^15-1(32767)</td><td align="left">Short</td><td align="left">-128~127</td></tr><tr><td align="left">int</td><td align="left">0</td><td align="left">4B</td><td align="left">-2^31</td><td align="left">2^31-1</td><td align="left">Integer</td><td align="left">-128~127</td></tr><tr><td align="left">long</td><td align="left">0L</td><td align="left">8B</td><td align="left">-2^63</td><td align="left">2^63-1</td><td align="left">Long</td><td align="left">-128~127</td></tr><tr><td align="left">float</td><td align="left">0.0f</td><td align="left">4B</td><td align="left">1.4e-45</td><td align="left">3.4e+38</td><td align="left">Float</td><td align="left">无</td></tr><tr><td align="left">double</td><td align="left">0.0d</td><td align="left">8B</td><td align="left">4.9e-324</td><td align="left">1.798e+308</td><td align="left">Double</td><td align="left">无</td></tr></tbody></table><p><strong><font color=red>注意：其中缓存区间是个有意思的东西，估计很多人没有深究过，大厂面试很有可能就来这么一道题，所以接下来的包装类的内容要仔细看看哦~</font></strong></p><p>对象分为三块存储区域：</p><ul><li>对象头。对象头占用12B，其中包括：哈希码、GC标记、GC次数、同步锁标记、偏向锁持有者（反正👴⑧是很懂）。</li><li>实例数据。存储本类对象的实例成员变量和所有可见的父类成员变量。</li><li>对齐填充。</li></ul><h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><p>包装类的存在是为了解决了基本数据类型无法做到的事情：泛型类型参数、序列化、类型转换、<code>高频区间数据缓存</code>。尤其是最后一个，因为除了Float和Double之外，其他包装类型都会缓存。拿Integer举例，缓存区间在-127~128，所以在这个区间的赋值，Integer对象会由IntegerCache.cache产生，就不会复用已有对象。<strong>因此，推荐所有包装类对象之间的比较，全都使用equals()方法。</strong><br>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个包装类的缓存区间：</p><ul><li>Boolean：使用静态final变量定义，valueOf()就是返回这两个静态值。</li><li>Byte：表示范围是-128~127，全部缓存。</li><li>Short：表示范围是-32768<del>32767，缓存范围是-128</del>127。</li><li>Charater：表示范围是0<del>65535，缓存范围是0</del>127。</li><li>Long：表示范围是[-2^63,2^63-1]，缓存范围是-128~127。</li><li>Integer：表示范围hi[-2^31,2^31-1]。</li></ul><p>接下来我们看看如果不使用equals()方法去进行包装类的比较会出现什么情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="number">127L</span>;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">l2</span> <span class="operator">=</span> <span class="number">127L</span>;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">l3</span> <span class="operator">=</span> <span class="number">128L</span>;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">l4</span> <span class="operator">=</span> <span class="number">128L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一处</span></span><br><span class="line">    System.out.println(i1 == i2);</span><br><span class="line">    System.out.println(i3 == i4);</span><br><span class="line">    <span class="comment">// 第二处</span></span><br><span class="line">    System.out.println(i1.equals(i2));</span><br><span class="line">    System.out.println(i3.equals(i4));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第三处</span></span><br><span class="line">    System.out.println(l1 == l2);</span><br><span class="line">    System.out.println(l3 == l4);</span><br><span class="line">    <span class="comment">// 第四处</span></span><br><span class="line">    System.out.println(l1.equals(l2));</span><br><span class="line">    System.out.println(l3.equals(l4));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>以上代码四处打印的结果是不是让人觉得都是<code>true</code>？<br>但是答案是第一处打印的结果是<code>true</code>和<code>flase</code>，第二处全是<code>true</code>，第三处也是<code>true</code>和<code>flase</code>，第四处全是<code>true</code>。<br>那么为什么<code>System.out.println(i1 == i2);</code>的结果是<code>true</code>，而<code>System.out.println(i3 == i4);</code>是<code>flase</code>呢？<br>该例很好地说明了Integer和Long只是缓存了-128~127之间的值，而大于或者小于区间的值没有被缓存，<code>i3</code>和<code>i4</code>是128，刚好超出了这个区间，下面的<code>l3</code>和<code>l4</code>同理。<br>当然我们也可以修改包装类的缓存范围，在VM options加入参数<code>-XX:AutoBoxCacheMax=7777</code>，即可设置最大缓存值为7777，那么以上代码的打印结果全为<code>true</code>。</p><p>在选择使用包装类和基本类型的时候，也不能完全按照心情，我们可以从以下几点来看：</p><ol><li>所有的POJO类属性必须使用包装数据类型。</li><li>RPC方法的返回值和参数必须使用包装数据类型。</li><li>所有的局部变量推荐使用基本数据类型。</li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是从堆上分配而来，算是基本数据类型的小弟。主要是三种：String、StringBuilder、StringBuffer。</p><ol><li>String是只读字符串，典型的immutable对象，对它的任何改动，其实都是创建一个新对象，再把引用指向该对象。String对象赋值操作后，会在常量池中进行缓存，下次申请创建对象时，缓存中已经存在，则直接返回相应引用给调用者。</li><li>StringBuffer可以在原对象上进行修改，是线程安全的。</li><li>StringBuilder是非线程安全的，把多线程的锁的处理交给工程师（也就是宁👴）来处理，所以操作效率比较高。<br>线程安全的对象的产生一般是因为计算机的发展总是从单线程到多线程，从单机到分布式。</li></ol><p>字符串的连接方式在循环体内非常不推荐使用String类型相加，而是应该使用StringBuilder的append方法。</p>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> Easy Coding </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《码出高效》系列笔记（一）：面向对象中的方法</title>
      <link href="/post/b1acf8e0-c89b-11e9-9ee1-01379c6f9115/"/>
      <url>/post/b1acf8e0-c89b-11e9-9ee1-01379c6f9115/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇汲取了本书中较为精华的知识要点和实践经验加上读者整理，作为本系列里的第一篇章第二节：面向对象之方法篇。</p><p><strong>本系列目录</strong>：</p><ul><li><a href="https://www.yuanmo.xyz/post/0bdf0b10-c25b-11e9-9d06-1f20e5bd3f76/">《码出高效》系列笔记（一）：面向对象中的类</a></li><li><a href="https://www.yuanmo.xyz/post/b1acf8e0-c89b-11e9-9ee1-01379c6f9115/">《码出高效》系列笔记（一）：面向对象中的方法</a></li><li><a href="https://www.yuanmo.xyz/post/3239f2f0-c89d-11e9-89c4-bd64deffb20f/">《码出高效》系列笔记（一）：面向对象中的其他知识点</a></li><li><a href="https://www.yuanmo.xyz/post/d5aea070-d2ac-11e9-ab1f-f97e9fd39695/">《码出高效》系列笔记（二）：代码风格</a></li><li><a href="https://www.yuanmo.xyz/post/43892940-eb34-11e9-8e01-011debd967415/">《码出高效》系列笔记（三）：异常与日志</a></li><li><a href="https://www.yuanmo.xyz/post/025b9630-626f-11ea-8f75-554d885c423a/">《码出高效》系列笔记（四）：数据结构与集合的框架</a></li><li><a href="https://www.yuanmo.xyz/post/d6e37130-64cb-11ea-a19c-b3eaacf8ea9d/">《码出高效》系列笔记（四）：数据结构与集合的数组和泛型</a></li><li><a href="https://www.yuanmo.xyz/post/31c8add0-69af-11ea-ad58-59a2dd622848/">《码出高效》系列笔记（四）：元素的比较</a></li><li><a href="https://www.yuanmo.xyz/post/5a0667d0-fd7d-11ea-ad87-11fe3cadc827/">走进JVM之内部布局</a></li><li><a href="https://www.yuanmo.xyz/post/132bab40-fcc4-11ea-ab6f-7dc412045e4d/">走进JVM之字节码与类加载</a></li><li><a href="https://www.yuanmo.xyz/post/bd0fa690-fcae-11ea-897f-29deed537cb3/">走进JVM之GC</a></li></ul><h1 id="方法签名"><a href="#方法签名" class="headerlink" title="方法签名"></a>方法签名</h1><p>方法签名包括方法名称和参数列表，将JVM标识方法的唯一索引，不包括返回值，更加不包括访问权限控制符、异常类型等。</p><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>参数一般又分为实参和形参，在代码注释中用<code>@param</code>表示参数类型，属于方法签名的一部分，包含参数类型和参数个数，在代码风格中，约定每个逗号猴年必须要有一个空格，不管是形参和实参。<br>想到有一次面试时，就问到了成员变量和局部变量的传递过程，虽然很简单，说明还是有一些面试官会注意到这些方面。</p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>一种特殊的参数————可变参数。在JDK5版本中引进，在实际应用中不算多见，适用于不确定参数个数的场景。<br>有时候我们需要打印多个变量或参数的时候，用字符串拼接并不是很省力的方式，我们可以利用<code>format</code>或者<code>printf</code>来进行格式化输出。其中<code>PrintStream</code>类中<code>printf()</code>方法就是使用了可变参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PrintStream <span class="title function_">printf</span><span class="params">(String format, Object... args)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> format(format, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第一处</span></span><br><span class="line">System.out.printf(<span class="string">&quot;%d&quot;</span>, n);</span><br><span class="line"><span class="comment">// 第二处</span></span><br><span class="line">System.out.printf(<span class="string">&quot;%d %s&quot;</span>, n, <span class="string">&quot;str&quot;</span>);</span><br></pre></td></tr></table></figure><p>在第一处调用传入了两个参数，在第二处调用传入了三个参数，他们调用的都是<code>printf(String format, Object... args)</code>方法。<br>这种方式即是<code>语法糖</code>，也可能是<code>小恶魔</code>，在实际开发中处理不当，容易影响代码可读性和可维护性，书中也建议不要使用<code>Object</code>作为可变参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">late</span><span class="params">(Object... args)</span> &#123;</span><br><span class="line">    System.out.println(args.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 第一处，此处打印结果为2</span></span><br><span class="line">    late(<span class="number">4</span>, <span class="keyword">new</span> <span class="title class_">Integer</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    <span class="comment">// 第二处，此处打印结果为3</span></span><br><span class="line">    late(<span class="keyword">new</span> <span class="title class_">Integer</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Object参数过于灵活，在第一处<code>new Integer[] &#123;1, 2, 3&#125;</code>和<code>4</code>都转型成了<code>Object[]</code>，作为2个对象，在第二处则是作为3个<code>int[]</code>对象，所以不同类型的参数尽量避免使用该种方式传参。</p><h2 id="入参保护"><a href="#入参保护" class="headerlink" title="入参保护"></a>入参保护</h2><p>入参保护是对服务提供商的保护，常见于批量接口。因为批量接口虽然能够处理一批数据，但其处理能力是有限的，因此要对入参的数据进行判断和控制，超出处理能力的，直接返回错误给客户端。</p><h2 id="入参校验"><a href="#入参校验" class="headerlink" title="入参校验"></a>入参校验</h2><p>需要进行参数校验的场景：</p><ol><li>调用频度低的方法。</li><li>执行时间开销很大的方法。此情形中，参数校验的时间相对于就是小开销了，但是如果遇到因为参数错误导致中间执行回退或者错误，则得不偿失。</li><li>需要极高稳定性和可用性的方法。</li><li>对外提供的开放接口。</li><li>敏感权限入口。</li></ol><p>不需要参数校验的场景：</p><ol><li>极有可能被循环调用的方法。但是在方法说明里必须注明外部参数检查。</li><li>底层调用平度较高的方法。由于是频度较高，反而不容易是参数问题而引发，一般DAO和SERVICE都在同一个应用中，部署在同一台服务器中，所以可以省略DAO的参数校验。</li><li>声明private只会被自己的代码调用的方法。如果能够确定调用方法的代码传入参数已经做过检查，一般就不太会出现这种问题，此时便可不需要参数校验。</li></ol><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><p>构造方法是方法名与类名相同的特殊方法，在新建对象时调用，可以通过不同的构造方法实现不同方式的对象初始化，他有如下特征：</p><ol><li>构造方法名称必须与类名相同。</li><li>构造方法是没有返回类型的，即使是void也不能有。<font color=#FF8C00>他返回对象的地址，并赋值给引用变量。</font></li><li>构造方法不能被继承，不能被覆写，不能被直接调用。<font color=#FF8C00>调用途径有三种：一是通过<code>new</code>关键字，二是在子类的构造方法中通过<code>super</code>关键字调用父类的构造方法（前面super关键字那里可以看下），三是通过反射方式获取。</font></li><li>类定义时提供了默认的无参构造方法。<font color=#FF8C00>但是如果显式的定义了有参构造方法，此无参构造方法就会被覆盖。</font></li><li>构造方法可以私有。<font color=#FF8C00>外部无法使用私有构造方法创建对象。</font></li><li>一个类可以有多个参数不同的构造方法，称为构造方法的重载。</li></ol><h1 id="类内方法"><a href="#类内方法" class="headerlink" title="类内方法"></a>类内方法</h1><p>在面向过程的语言中，所有的方法都是全局静态方法。在引入面向对象理念后，某些方法才归属于具体对象，即类内方法。除了构造方法外，还有三类方法：实例方法、静态方法、静态代码块。</p><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p>又称为非静态方法，依附于某个对象，可以通过引用变量调用其方法。类内部各个实例方法互相调用，但是不包含<code>this</code>。实例方法可以调用静态变量和静态方法，当从外部创建对象后，应该尽量使用「类名.静态方法」来调用，而不是对象名，依赖为编译器减负，二来提升代码可读性。</p><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>又称为类方法。其中注意以下两点：</p><ul><li>静态方法中不能使用实例成员变量和实例方法。</li><li>静态方法不能使用<code>super</code>和<code>this</code>关键字，这两个关键字指代的都是需要被创建出来的对象。</li></ul><p>通常静态方法用于定义工具类的方法等，静态方法使用了可修改的对象，那么在并发时会存在线程安全问题。所以工具类常见静态方法和单例相伴而生。</p><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><p>在书中是极不推荐的一种处理方式，这里就不提啦~</p><h1 id="getter与setter"><a href="#getter与setter" class="headerlink" title="getter与setter"></a>getter与setter</h1><p>这是一类比较特殊的方法，一般自身不包含任何业务逻辑，仅仅为了类成员属性提供读取和修改的方法，这样设计的好处就是：</p><ul><li>满足面向对象语言封装的特性。将类成员属性设置成private，访问与修改统统交由getter与setter方法处理。</li><li>有利于统一控制。</li></ul><p><strong>以下情况不推荐使用</strong></p><ol><li>getter与setter中添加了业务逻辑。</li><li>同时定义<code>isXxx()</code>和<code>getXxx()</code>。</li><li>相同的属性名容易带来歧义。主要体现在子类与父类之间。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> Easy Coding </tag>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《码出高效》系列笔记（一）：面向对象中的类</title>
      <link href="/post/0bdf0b10-c25b-11e9-9d06-1f20e5bd3f76/"/>
      <url>/post/0bdf0b10-c25b-11e9-9d06-1f20e5bd3f76/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>虽然在<a href="https://github.com/alibaba/p3c">GitHub</a>有着17000+的star和大量的学习者，这本书即使涵盖的知识点对于很多入行较久developer来说并没有太大深入研究的价值，但是当时刚刚出炉的开发手册PDF精简版却一点一点的影响了我。也许是知乎上关注的技术话题下孤尽先生发布的回答吸引到了我，我开始注意到了平时编码中的那些事。</p><p>本篇汲取了本书中较为精华的知识要点和实践经验加上读者整理，作为本系列里的第一篇章第一节：面向对象之类篇。</p><p><strong>本系列目录</strong>：</p><ul><li><a href="https://www.yuanmo.xyz/post/0bdf0b10-c25b-11e9-9d06-1f20e5bd3f76/">《码出高效》系列笔记（一）：面向对象中的类</a></li><li><a href="https://www.yuanmo.xyz/post/b1acf8e0-c89b-11e9-9ee1-01379c6f9115/">《码出高效》系列笔记（一）：面向对象中的方法</a></li><li><a href="https://www.yuanmo.xyz/post/3239f2f0-c89d-11e9-89c4-bd64deffb20f/">《码出高效》系列笔记（一）：面向对象中的其他知识点</a></li><li><a href="https://www.yuanmo.xyz/post/d5aea070-d2ac-11e9-ab1f-f97e9fd39695/">《码出高效》系列笔记（二）：代码风格</a></li><li><a href="https://www.yuanmo.xyz/post/43892940-eb34-11e9-8e01-011debd967415/">《码出高效》系列笔记（三）：异常与日志</a></li><li><a href="https://www.yuanmo.xyz/post/025b9630-626f-11ea-8f75-554d885c423a/">《码出高效》系列笔记（四）：数据结构与集合的框架</a></li><li><a href="https://www.yuanmo.xyz/post/d6e37130-64cb-11ea-a19c-b3eaacf8ea9d/">《码出高效》系列笔记（四）：数据结构与集合的数组和泛型</a></li><li><a href="https://www.yuanmo.xyz/post/31c8add0-69af-11ea-ad58-59a2dd622848/">《码出高效》系列笔记（四）：元素的比较</a></li><li><a href="https://www.yuanmo.xyz/post/5a0667d0-fd7d-11ea-ad87-11fe3cadc827/">走进JVM之内部布局</a></li><li><a href="https://www.yuanmo.xyz/post/132bab40-fcc4-11ea-ab6f-7dc412045e4d/">走进JVM之字节码与类加载</a></li><li><a href="https://www.yuanmo.xyz/post/bd0fa690-fcae-11ea-897f-29deed537cb3/">走进JVM之GC</a></li></ul><h1 id="集成IDE"><a href="#集成IDE" class="headerlink" title="集成IDE"></a>集成IDE</h1><p>《码出高效》不但有实体书，同时在IDE中有对应的插件，可以帮助你在实际开发中扫描代码编写存在的问题和可能会引发的隐患。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/easy%20coding/plugins.png/wm" alt="在Intellij IDEA中集成"></p><p>Intellij IDEA在Plugins中直接搜索alibaba，如图所示的第一个点击install即可，第二个名为cloud Toolkit是阿里中间件团队出品的Apache dubbo快速开发部署的插件，可以快速创建Apache Dubbo工程，<a href="http://jm.taobao.org/tags/">阿里中间件团队博客。</a></p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/easy%20coding/plugins2.png/wm" alt="代码扫描"></p><p>在需要扫描的地方邮件，最后有个编码规约扫描，当然也可以将整个工程扫描。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/easy%20coding/plugins3.png/wm" alt="扫描结果"></p><p>扫描的结果，可以根据tips进行代码的整改，当然这个插件也没有那么智能，有些特定场景不需要这些提示，可以将自行定义。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/easy%20coding/plugins4.png/wm" alt="edit"></p><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><blockquote><p>一切万物皆对象</p></blockquote><p>面向过程让计算机有步骤地按照顺次做一件事情，是一种过程化的叙事思维。但是在大型软件开发中，流程互相穿插，模块互相耦合，往往牵一发动全身。面向对象就是计算机世界里解决复杂软件工程的方法论，拆解问题复杂度。</p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><blockquote><p>无类鬼</p></blockquote><p>面向过程的结构相对松散，强调如何流程化地解决问题；面向对象的思维往往更加内聚，强调低耦合，高内聚，先抽象模型，定义共性行为，再解决实际问题。<br>传统意义上，面向对象有三大特性：<code>封装</code>、<code>继承</code>、<code>多态</code>。在《码出高效》这本书中将<code>抽象</code>也作为面向对象的特性之一，进而成为四大特性。<br>OOP（Object Oriented Programming）</p><ul><li>第一特性<code>封装</code>：使模块之间的耦合度变低，增强复用性，更具有维护性。例如多个业务类中<code>socket</code>对象需要对请求消息体的对象转化成字节数组并且计算消息体长度，在多个业务类中分别去实现是不合适的，不但低效而且一旦需求变更将会更改大量的代码，抽象出共性的行为特征封装成专门维护请求消息对象的类才是正确的选择。</li><li>第二特性<code>继承</code>：在代码中广泛存在，子类继承父类，获得父类的部分属性和行为，也是增强复用性的体现。例如我们最常见的集合中的<code>List</code>，<code>Set</code>接口就是继承于<code>Collection</code>接口，而<code>Collection</code>则继承于<code>Iterable</code>接口。假如自定义的一个<code>exception</code>类，我们可以将它继承<code>RuntimeException</code>，通过<code>super</code>方法去<code>个性化</code>构建一个我们想要catch到的异常格式。</li><li>第三特性<code>多态</code>：多态使得模块在复用性的基础上更加具有扩展性，让运行期更具有想象空间。可以进行覆写<code>Override</code>和重载<code>Overload</code>就是很好地体现了多态的意义。前面篇章中的工厂模式也是很好体验了多态的作用。</li><li>第四特性<code>抽象</code>：抽象其实是完全囊括了以上三种特性，应该是所有程序员的核心素养之一。体现出程序员对业务的建模能力，以及对架构的宏观掌控力，从抽象到具体，逐步形象化的过程。比如Object类，是任何类的默认父类，是对万事万物的抽象，高度概括事物的自然行为和社会行为。<br>我们在写代码中会常见到这些：<code>getClass()</code>是用来说明本质上是谁；<code>toString()</code>是当前名片；<code>finalize()</code>是再度向销毁时触发的方法；<code>clone()</code>是繁殖对象的一种方式；<code>hashCode</code>和<code>equals()</code>是判断你其他元素是否相等的身份证。</li></ul><h2 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h2><table><thead><tr><th align="left">语法维度</th><th align="left">抽象类</th><th align="left">接口</th></tr></thead><tbody><tr><td align="left">定义关键字</td><td align="left">abstract</td><td align="left">interface</td></tr><tr><td align="left">子类继承或实现的关键字</td><td align="left">extends</td><td align="left">extends</td></tr><tr><td align="left">方法访问控制符</td><td align="left">无限制</td><td align="left">有限制，默认是public abstract类型</td></tr><tr><td align="left">属性访问控制符</td><td align="left">无限制</td><td align="left">有限制，默认是public abstract类型</td></tr><tr><td align="left">静态方法</td><td align="left">可以有</td><td align="left">不能有</td></tr><tr><td align="left">static{静态代码块}</td><td align="left">可以有</td><td align="left">不能有</td></tr><tr><td align="left">本类型之间扩展</td><td align="left">单继承</td><td align="left">多继承</td></tr><tr><td align="left">本类型之间扩展的关键字</td><td align="left">extends</td><td align="left">extends</td></tr></tbody></table><p>总结：抽象类在被<code>继承</code>时体现的是<code>is-a</code>关系，而接口被实现时是<code>can-do</code>关系。抽象类可以包含抽象方法、属性变量、实体方法。抽象方法与接口一样，继承他的类必须要覆写实现。抽象类往往是用作同类食物的抽象，比如各类排行榜（常见的土豪排行榜、天台排行榜、天梯排行榜）他们中有着相似的特征。飞机会飞，鸟类也会飞，而<code>fly()</code>不应该被定义在抽象类中，因为飞机和鸟类除了都会飞以外很难再找到其他的共同特征。<br>抽象类是模板式设计，类似一个模具，而接口是契约式设计，更像一个合同。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>在一个.java源文件中，只能定义一个类名与文件名完全一致的公开类，使用<code>public class</code>关键字来修饰，我们可以在这个类的内部和外部分别去定义另外的类，前者就叫内部类，后者叫外部类，内部类就成了这个类本身的一个属性，与其他属性的定义方式一致，可以使用<code>public</code>，<code>private</code>，<code>protected</code>访问权限关键字。可以定义成<code>static</code>静态内部类，当然类型也可以定义成<code>class</code>，<code>interface</code>和<code>enum</code>。</p><h2 id="访问权限控制"><a href="#访问权限控制" class="headerlink" title="访问权限控制"></a>访问权限控制</h2><p>我们在讲到封装的时候往往不能忽略掉使用关键字来限制类外部对类内属性和方法的随意访问，那么在Java中访问权限主要分为以下四个等级</p><table><thead><tr><th align="center">访问权限控制符</th><th align="center">任何地方</th><th align="center">包外子类</th><th align="center">包内</th><th align="center">类内</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">OK</td><td align="center">OK</td><td align="center">OK</td><td align="center">OK</td></tr><tr><td align="center">protected</td><td align="center">NO</td><td align="center">OK</td><td align="center">OK</td><td align="center">OK</td></tr><tr><td align="center">无</td><td align="center">NO</td><td align="center">NO</td><td align="center">OK</td><td align="center">OK</td></tr><tr><td align="center">private</td><td align="center">NO</td><td align="center">NO</td><td align="center">NO</td><td align="center">OK</td></tr></tbody></table><ul><li><strong>public</strong>：可以修饰<code>外部类</code>、<code>属性</code>、<code>方法</code>，其他不详写了。</li><li><strong>protected</strong>：只能修饰<code>属性</code>和<code>方法</code>，只能够被包内的类访问，当然还有一种情况就是只要是他的子类都可以访问。</li><li><strong>无</strong>：这个比较陌生，Intellij IDEA有时会提示是否把一些只在包内访问的方法修改成无控制符。他并非是default，书中也明确说到定义外部类也极少用到无控制符的方式，一般要么定义public class，包外实例化；要么定义内部类，功能内聚。</li><li><strong>private</strong>：修饰<code>属性</code>，<code>方法</code>，<code>内部类</code>，被其修饰过的属性或方法只能在该类访问，子类no way，包内外部类no way，包外without thinking。</li></ul><p>在代码重构时，private方法过旧，可以直接删除，且无后顾之忧。但是删除一个public的方法就要谨慎小心地检查是否被调用。变量就像自己的小孩（我还没小孩），要尽量控制在自己的视线范围内，作用域太大，往往容易出现问题。因此，在定义类时，推荐访问控制级别从严处理：</p><ol><li>如果不允许通过外部通过new创建对象，构造方法必须是private。</li><li>工具类不允许有public或者default构造方法。</li><li>类非static成员变量并且与子类共享，必须是protected。</li><li>类非static成员变量并且仅在本类使用，必须是private。</li><li>类static成员变量如果仅在本类使用，必须是private。</li><li>类static成员变量，必须考虑是否为final。</li><li>类成员方法只供类内部调用，必须是private。</li><li>类成员方法只对继承类公开，那么限制为protected。</li></ol><h2 id="this与super"><a href="#this与super" class="headerlink" title="this与super"></a>this与super</h2><p>对象实例化时，至少有一条从本类到Object的通路，打通这一条路的工兵就是<code>this</code>和<code>super</code>，但是<code>this</code>和<code>super</code>往往是默默无闻的，在很多情况不需要显式的调用，比如：</p><ul><li>本类方法调用本类属性</li><li>本类方法调用另一个本类方法</li><li>子类构造器隐含调用<code>super()</code></li></ul><p>子类基层的父类，而父类坚持不提供默认的无参构造方法，必须在本类的无参构造方法中使用<code>super</code>方法调用父类的有参构造方法，比如以下情形：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(<span class="type">int</span> arg)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">123</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">关键字</th><th align="left">基本概念</th><th align="left">查找范围</th><th align="left">特异功能</th></tr></thead><tbody><tr><td align="left"><strong>this</strong></td><td align="left">访问本类属性和方法</td><td align="left">先找本类，没有则找父类</td><td align="left">单独使用时，表示当前对象</td></tr><tr><td align="left"><strong>super</strong></td><td align="left">由子类访问父类中的实例属性和方法</td><td align="left">直接查找父类</td><td align="left">在子类覆写父类方法时，访问父类同名方法</td></tr><tr><td align="left"><strong>共同点1</strong></td><td align="left">都是关键字，起指代作用</td><td align="left"><strong>共同点2</strong></td><td align="left">在构造方法中必须出现在第一行</td></tr></tbody></table><h2 id="类关系"><a href="#类关系" class="headerlink" title="类关系"></a>类关系</h2><p>5种类型：</p><ul><li><strong>继承</strong>：extends（is-a关系）</li><li><strong>实现</strong>：implements（can-do关系）</li><li><strong>组合</strong>：类是成员变量（contains-a关系）</li><li><strong>聚合</strong>：类似成员变量（has-a关系）</li><li><strong>依赖</strong>：import类（use-a关系）</li></ul><table><thead><tr><th align="left">类关系</th><th align="left">英文名</th><th align="left">description</th><th align="left">权力强侧</th><th align="left">示例说明</th></tr></thead><tbody><tr><td align="left">继承</td><td align="left">Generalization</td><td align="left">父类与子类之间的关系：is-a</td><td align="left">父类方</td><td align="left">舔狗继承于动物，完全符合里式代换</td></tr><tr><td align="left">实现</td><td align="left">Realization</td><td align="left">接口与实现类之间的关系：can-do</td><td align="left">接口方</td><td align="left">舔狗实现了舔的接口行为</td></tr><tr><td align="left">组合</td><td align="left">Composition</td><td align="left">比聚合更强的关系：contains-a</td><td align="left">整体方</td><td align="left">头只能是身体强组合的一部分，两者完全不可分，具有相同的生命周期</td></tr><tr><td align="left">聚合</td><td align="left">Aggregation</td><td align="left">暂时组装的关系：has-a</td><td align="left">组装方</td><td align="left">小狗与项圈之间只是暂时的聚合的关系，项圈完全可以复用在另一条舔狗身上</td></tr><tr><td align="left">依赖</td><td align="left">Dependency</td><td align="left">一个类用到另一个类：use-a</td><td align="left">被依赖方</td><td align="left">女神玩弄舔狗，舔狗作为参数传入，是一种依赖关系（这里是女神依赖舔狗哦，舔狗大翻身！）</td></tr></tbody></table><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>内存中的数据对象只有转换为二进制流才可以进行数据持久化和网络传输。将数据对象转换为二进制流的过程称为对象的序列化。反之，将二进制流恢复为数据对象的过程称为反序列化。序列化常见的场景是RPC框架的数据传输。<br>常见的序列化方式有三种：</p><ul><li>Java原生序列化</li><li>Hessian序列化</li><li>JSON序列化</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 类 </tag>
            
            <tag> Easy Coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近期学习计划</title>
      <link href="/post/fae94450-bd9c-11e9-bafd-2904b28e3726/"/>
      <url>/post/fae94450-bd9c-11e9-bafd-2904b28e3726/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="2020年10月开始的学习计划"><a href="#2020年10月开始的学习计划" class="headerlink" title="2020年10月开始的学习计划"></a>2020年10月开始的学习计划</h1><blockquote><p>wdnmd</p></blockquote><ul><li><p><strong>SpringCloud全家桶</strong></p><ul><li>先学会使用吧，感觉没什么难度</li></ul></li><li><p><strong>NIO（Netty）</strong></p><ul><li>感觉这个很有趣</li></ul></li><li><p><strong>EasticSearch相关</strong></p><ul><li>梦开始的地方</li></ul></li><li><p><strong>Docker</strong></p><ul><li>重点系统学习</li><li>近期不打算花时间了</li></ul></li><li><p><strong>网红教你设计模式</strong></p><ul><li>持续更新</li></ul></li></ul><h1 id="基本完成的计划"><a href="#基本完成的计划" class="headerlink" title="基本完成的计划"></a>基本完成的计划</h1><blockquote><p>wdnmd</p></blockquote><ul><li><strong>JUC相关</strong><ul><li>关键字</li><li>Api</li><li>多线程、高并发</li></ul></li><li><strong>JVM相关</strong><ul><li>GC相关</li><li>类加载机制</li><li>内存模型</li></ul></li><li><strong>Spring源码</strong><ul><li>极客时间小马哥课程学习</li></ul></li><li><strong>《码出高效》笔记</strong><ul><li>规范代码风格整理</li><li>细节整理</li><li>知识点整理</li></ul></li><li><strong>Redis深入</strong><ul><li>《Redis开发与实战》书籍学习</li><li>极客时间学习</li></ul></li><li><strong>数据库</strong><ul><li>基本按照极客时间《MySQL45讲》来学习了。</li><li>B+树、基础巩固</li><li>日志系统</li><li>事务</li></ul></li><li><strong>LeetCode刷题</strong><ul><li>长期计划</li><li>[<font color = red>动态规划</font>, <font color = orange>贪心</font>, <font color = green>位运算</font>]重点巩固</li><li>只需要每天刷「每日一题」和有空参加下周赛即可</li></ul></li></ul><h1 id="进度记录"><a href="#进度记录" class="headerlink" title="进度记录"></a>进度记录</h1><br /><div id="echarts9724" style="width: 100%;height: 500px;margin: 0 auto"></div><script src="https://cdn.bootcss.com/echarts/3.8.0/echarts.common.min.js"></script><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts9724'));        // 指定图表的配置项和数据        var option = {    title: {        text: "近期计划",        x: "center",        padding: 20    },    tooltip: {        trigger: "axis"    },    legend: {        data: ["期望投入", "实际投入"],        selectedMode: "multiple",        x: "left",        padding: 20,        borderColor: "#ccc"    },    toolbox: {        show: true,        feature: {            mark: {                show: true            },            dataView: {                show: true,                readOnly: true            },            magicType: {                show: false,                type: ["line", "bar"]            },            restore: {                show: true            },            saveAsImage: {                show: true            }        },        showTitle: true    },    calculable: true,    xAxis: [        {            type: "value",            boundaryGap: [0, 0.01]        }    ],    yAxis: [        {            type: "category",            data: ["SpringCloud全家桶", "NIO（Netty）", "EasticSearch相关", "JVM", "JUC", "Spring源码", "Redis", "数据库", "设计模式", "Docker", "《码出高效》笔记", "LeetCode"]        }    ],    series: [        {            name: "期望投入",            type: "bar",            data: [6, 6, 6, 6, 6, 6, 6, 6, 8, 6, 8, 8]        },        {            name: "实际投入",            type: "bar",            data: [6, 0, 0, 6, 6, 3, 4, 4, 2, 2, 8, 8]        }    ],    grid: {        x: 120    }}        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script>]]></content>
      
      
      <categories>
          
          <category> 点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019.08.08</title>
      <link href="/post/faab9f10-bd9c-11e9-b52a-878085b5c0f3/"/>
      <url>/post/faab9f10-bd9c-11e9-b52a-878085b5c0f3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不正确，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bb583b836cd1c06ceecb0d810bcd35bc37f8159f620d46f004dc98d98f6c095f">e16d0df969db5e1d18430d65bd736207f794cef5f2e56c953144ea5d8c953d880f5899afe0568b66b73526aeae48fbed4d163a6f1ddef0a3b9f2c4a48ccc9dea9fd0d7dbff6974443fdf584996264d86145eb1e68c4e058817e72c9f0434c98540f9248bc2c1063e627f3f8efb127c5a543367eb2c2e07f82205805c11d354dc32d452e5f267a2b6e16c64146e9aff8ef9a394ce3462bf9307e009f427804a8e9b4e8ac006e12d857f6c4464d47c2b2c69fc7e4f09527852dbe0c23a2633eefd10285f074286733c896b8fc93deb6957249e1ba3cd63930a830ee60366da47fe0ada331d9c7a3d942a3c51eeaf08eba252f7bd984e033caeeccdc0c136af1b7f07ea42ea8217b321c8376bceae6880290d6a237b8ced190c417c0d2d69c44d2d62d334d3d27780e7f9b4f3932b47b690c1fd591fec130f19060bb68509ff20b2ec2018517a447a7803e2e34d68669867b8083fc568397237cb0548f2c048fbdc43e63041405d5ed10345b5d1a3b4ae1064c1d8b16232f6c454e722f7ba8e737d3767b3a2f3ded55d16c3e97e92d6ca3e1d0417f73c8cf7233c803fcb9d3f7582495a603cd13ee4cbe5b339946055b09694277f44789d5cdccbc8ed67abf4927dcc8587b656af40ac600ae0499f291957d56a7692dd2ca4fdd0b0ae72584a19181d510399d1dc4be861a7f2403d43b8f8975efed8ad5248b9a2f7a9d3eef4ee18489008e029bdc7c5a262b6e249bc468b662c85bab6887dc150239e36d818f999534fe38fc7f9446cb607e9ecd23229706082df610755212bfa2032c9cf91875c6f490a53e44b4a8049b3125b82c74af78e46e14a74d358ede00f2d578d13a1d877be217dc9ffef3f55863a8f87e1ba6a15308a7d1cdf3fd01c8ca332876b6b6c6c1823b0bdec26f6141a84a92097c73ba0b81eff300a15a75377b06aedc9bea851bcd2f880222f61a323817a848aba2d992e433101c9d429f1faf6508ecbc593f806c41bcc29ef98270724bd983e389f5a3818791fc59bf57db39c3ea91cc2c1ec93358e310a25aec4bf2c240fd6f5d267bef3cbb24da161a2209f028f9872f119b8067f5de7dc8db6bd0696de188fc78cceec0f1e599225ac7a9ce19aab822efea36c03153d4b218921add52ed1bf01bc0942de5a33cbc2bab2c6be92feaf6f0053a17eb482a3720ea34f5608d854801b15efb547acb64bf0ff292c71471ba2afaf0562f7fd04dfadc5ae44637b6f09c5316ff28b4b3c9e3152e714d9bcdb41f36e231b6b29f9a2f9c91f8c3eb5489336f9ac9a70b41fb1582f5ea59ec929da46f67f7d40d70aaa9438faec0bae87c9ee2610e2bc7cecca525ddae756cf4e6dcc499e1a51028d805a6adc0d9bd5089d82377c0b9cd44c0976f6f011c4fc0f71fcd8bf447ce2767ad761e9317ca45b78f6f2cb6cbe0db89a1013a3f15288c8d5ef0d3ec54f0701f13a225c9fdb5eaef5f531a213f45e3a8e058586fee0e3968e3e4c20719c1cfa4fbe87a90bea1b89669f3ea08e1984b15004a7e3eaba087fc2d309c2dcd99632b9810f0e973ae865a357eae8e6146b6ebc5185e946929a5b6618c8cb4217b0e6f5c22a04bd06dea13f8bb990ba6966c2c99313afac318fc706958ef65db6b67ca63bad30bc6a877393a254fde5d30292032054dbb9ae45b0cf24748add14f560c1ac7bb79d1b996edb4c2bfe60a9a9b2ba701d5b86a188de4796ff8c5de131ce1abf1c96b16a29aa76639f72fe96dbad1ed5d2bb8d2a159955ccf7e8be44128535a5505c189a90bc035ff460864dab79be9e9076b9e564ac35db036f4791b7e5ef696d9098d27dded01708197a995f23494a9be49670b28fbc1f43af3eedc52e306dbc3a01e056c65d3a0f8b03dc8670c6edfbcf4afe75287753da71d6e808e54070937ff13a4ff5b04471e7a5da01cc52c6c9d45b4aa891dc5f1bab8c72093bcf2e655a3bc86b4d8aa484ef9bbb26dc49d92f310e20da1b400c8dee2476d584db5ad33240777c357f154d84d54f7a7b16e718cc224116633113abcc67cfd4dce8d6e77f2e2334aea2df5f142f9071ec91803e64fa0d3bdd6df1b6dad8537491921ab0b04717a47dd3462773bd067ac4698838ae831c2e4baf6e9f4db898f3c6f962e93f003c6c33aeff04a4fcb84bbc2c04803880062b2959c4287146f2365898da7ae1b61fbb623b17b9b479bbc5f1a0ddcb9eca7c0d82c0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">浮生日记GKD</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 轨迹 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千千万万设计模式之工厂模式</title>
      <link href="/post/faabc628-bd9c-11e9-b52a-878085b5c0f3/"/>
      <url>/post/faabc628-bd9c-11e9-b52a-878085b5c0f3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>禁止私下搞对象，对象统一由工厂发放！</p></blockquote><h1 id="血汗工厂的由来"><a href="#血汗工厂的由来" class="headerlink" title="血汗工厂的由来"></a>血汗工厂的由来</h1><p>大家在写代码的时候都知道要注意解耦、增加复用性，但是偶尔也许会<code>ctrl+c</code>，<code>ctrl+v</code>大法来覆写代码片，包括Intellij IDEA编辑器发现有重复代码片也有用黄色波浪线来提醒。然而网上的教程都是如何教你去掉该死的黄色波浪线，1️⃣0️⃣🐭弟弟行为。实际上出现这种问题，你更应该去关注你的代码设计的是否合理，是否符合开闭原则，有共性的地方能否提取出来？<br>工厂模式一共有三种，其中<code>简单工厂模式</code>是比较特殊的实现，首先它违背了开闭原则，根据工厂类的静态方法通过<code>if...else...</code>或者<code>switch...case...</code>来判断分支，一旦需要增减改分支都要去改代码。<br>工厂模式是适用性最广也是应用最多的一种工厂模式，该模式强调，每一个对象都有一个对应管理的工厂（<del>你的对象其实是工具人</del>）。</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="抽象类的解释"><a href="#抽象类的解释" class="headerlink" title="抽象类的解释"></a>抽象类的解释</h2><p>一般我们需要对象时候，通常的做法是<code>new</code>一个对象，工厂模式则是强调由具体的工厂来生产一个对象给你使用。</p><p>首先最好解释一下<code>抽象类</code>，我当初就是一直不太能理解，可能对于很多初学者来说也是。简单来说，抽象类像是一个模板，比如说Apple的MacBook Pro产品线，基本上历年迭代一次。而最新2019年MacBook Pro产品线中，包含着几款配置不同的产品。这些产品的屏幕、键盘、CPU、内存、金属一体外壳是抽象出来的共同特征，每一款具体的产品都离不开这些属性。而不同型号的产品又存在差异化和卖点，比如15inch和13inch的屏幕，低中高配的CPU、显卡、存储，特有的touch bar和触控ID等等。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/factory1-3.png/wm" alt="2019 MacBook Pro"></p><p>为了方便举例，我们理想化的认为这些不同型号产品的诞生都是由一个MacBook Pro<code>模具</code>从抽象到具体的过程，针对不同需求的人群差异化的结果。抽象类也是如此，它通过类的继承可以有不同版本的实现，不同版本都会做相应的增删改。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>什么时候用工厂模式比较好？它能解决什么问题？</p><blockquote><p><strong>其实我觉得就一句话，降低耦合度和批量化生产。</strong></p></blockquote><p>因为工厂模式是针对单一产品簇的对象，比如一类膨化食品、一类手机、一类blazer。这些产品不去麻烦客户而交给工厂去处理，之后产品大面积出现问题返厂或者迭代更新也都是各个工厂的事。</p><p>这里有4个关于工厂模式的角色概念，我用下图表示了他们之间的关系。</p><ul><li><strong>抽象工厂(Abstract Factory)角色</strong>：是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂类必须实现这个接口。</li><li><strong>具体工厂(Concrete Factory)角色</strong>：这是实现抽象工厂接口的具体工厂类，包含与应用程序密切相关的逻辑，并且受到应用程序调用以创建某一种产品对象。</li><li><strong>抽象产品(AbstractProduct)角色</strong>：工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口。</li><li><strong>具体产品(Concrete Product)角色</strong>：这个角色实现了抽象产品角色所定义的接口。某具体产品有专门的具体工厂创建，它们之间往往一一对应。</li></ul><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/factory1-2.png/wm" alt="本文实例"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MacBookFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> MacBook的抽象工厂类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/1 18:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MacBookFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MacBook抽象工厂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AbstractMacBookProduct <span class="title function_">createMacBook</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>MacBook的抽象工厂类，用于描述所有具体型号生产的MacBook工厂的抽象基类。</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> AbstractMacBookProduct</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 所有MacBook抽象产品类，可以理解成各种型号的MacBook笔记本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/1 18:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Setter(value = AccessLevel.PUBLIC)</span></span><br><span class="line"><span class="meta">@Getter(value = AccessLevel.PUBLIC)</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractMacBookProduct</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String sn;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String display;</span><br><span class="line">    <span class="keyword">private</span> String keyboard;</span><br><span class="line">    <span class="keyword">private</span> String weight;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印结账语</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">printSlogan</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>一类MacBook产品的抽象产品，差异化的产品配置。</center><p>抽象二兄弟的实现比较简单，其中抽象工厂接口定义的是<code>生产MacBook</code>的方法，就像是和各个工厂之间签了一份略有差别的合同，那么在具体生产的工厂中需要严格按照这份合同执行。抽象产品类则是体现<code>is-a</code>关系，更像是把这类产品的雏形给雕琢出来的模具，是具体产品的爹，具体工厂按照合同去生产合规的产品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MacBook13Factory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> MacBook 13-inch的具体工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/2 09:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacBook13Factory</span> <span class="keyword">implements</span> <span class="title class_">MacBookFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AbstractMacBookProduct <span class="title function_">createMacBook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MacBook13Product</span> <span class="variable">macBook13</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MacBook13Product</span>();</span><br><span class="line">        macBook13.setSn(RandomUtil.getStr());</span><br><span class="line">        macBook13.setType(<span class="string">&quot;MacBook Pro 13-inch&quot;</span>);</span><br><span class="line">        macBook13.setDisplay(<span class="string">&quot;13-inch&quot;</span>);</span><br><span class="line">        macBook13.setKeyboard(<span class="string">&quot;new keyboard&quot;</span>);</span><br><span class="line">        macBook13.setPrice(<span class="number">999D</span>);</span><br><span class="line">        macBook13.setWeight(<span class="string">&quot;88kg&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 游戏大礼包竟然是！</span></span><br><span class="line"><span class="comment">         * 《坦克大战乔碧萝》</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        macBook13.setGameGiftBag(<span class="string">&quot;《坦克大战乔碧萝》&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> macBook13;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MacBook13Product</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> MacBook 13-inch具体产品类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/2 09:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Setter(value = AccessLevel.PUBLIC)</span></span><br><span class="line"><span class="meta">@Getter(value = AccessLevel.PUBLIC)</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacBook13Product</span> <span class="keyword">extends</span> <span class="title class_">AbstractMacBookProduct</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 13-inch MacBook附赠游♂戏大礼包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String gameGiftBag;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">printSlogan</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;This is your new MacBook 13-inch.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>13-inch MacBook的具体工厂和他生产的具体产品13-inch MacBook</center>13-inch MacBook具体工厂也按照`合同`和`模具`对MacBook进行批量生产组装加工，`MacBook13Product`通过`extend`的方式，完全继承了模具的属性和行为，其中《坦克大战乔碧萝》这个游戏礼包是该产品的特有属性。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MacBook15Factory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> MacBook 15-inch具体工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/2 09:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacBook15Factory</span> <span class="keyword">implements</span> <span class="title class_">MacBookFactory</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AbstractMacBookProduct <span class="title function_">createMacBook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MacBook15Product</span> <span class="variable">macBook15</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MacBook15Product</span>();</span><br><span class="line">        macBook15.setSn(RandomUtil.getStr());</span><br><span class="line">        macBook15.setType(<span class="string">&quot;MacBook Pro 15-inch&quot;</span>);</span><br><span class="line">        macBook15.setDisplay(<span class="string">&quot;15-inch&quot;</span>);</span><br><span class="line">        macBook15.setKeyboard(<span class="string">&quot;new keyboard&quot;</span>);</span><br><span class="line">        macBook15.setPrice(<span class="number">1999D</span>);</span><br><span class="line">        macBook15.setWeight(<span class="string">&quot;88kg&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 蕴含着神秘力量的密码</span></span><br><span class="line"><span class="comment">         * 带你找回丢失的纯真时光</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        macBook15.setCode(<span class="string">&quot;magnet:?xt=urn:btih:36AAB086D9AF39A323082CBAD452D6BDC42147D1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> macBook15;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MacBook15Product</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> MacBook 15-inch具体产品类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/2 09:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Setter(value = AccessLevel.PUBLIC)</span></span><br><span class="line"><span class="meta">@Getter(value = AccessLevel.PUBLIC)</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacBook15Product</span> <span class="keyword">extends</span> <span class="title class_">AbstractMacBookProduct</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 15-inch MacBook附赠的神秘代♂码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">printSlogan</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;This is your new MacBook 15-inch.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><center>15-inch MacBook的具体工厂和他生产的具体产品15-inch MacBook</center>15-inch MacBook具体工厂也按照`合同`和`模具`对MacBook进行批量生产组装加工，`MacBook13Product`通过`extend`的方式，完全继承了模具的属性和行为，其中神秘代码是该产品的特有属性。<p>来测试一下这些代工厂996生产的产品到底合不合规：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createMacBook</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 抽象==================&gt;具体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">MacBookFactory</span> <span class="variable">macBook13Factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MacBook13Factory</span>();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 13-inch MacBook实例化对象就由MacBook13Factory创建</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">AbstractMacBookProduct</span> <span class="variable">mac13WithMatthew</span> <span class="operator">=</span> macBook13Factory.createMacBook();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 具体工厂生产的对象与具体产品类实例化的产品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">MacBook13Product</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MacBook13Product</span>();</span><br><span class="line">    assertEquals(c.getClass(), mac13WithMatthew.getClass());</span><br><span class="line">    </span><br><span class="line">    System.out.println(mac13WithMatthew.getClass());</span><br><span class="line">    System.out.println(mac13WithMatthew.printSlogan());</span><br><span class="line">    System.out.println(mac13WithMatthew);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createMacBook</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 抽象==================&gt;具体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">MacBookFactory</span> <span class="variable">macBook15Factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MacBook15Factory</span>();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 15-inch MacBook实例化对象就由MacBook15Factory创建</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">AbstractMacBookProduct</span> <span class="variable">mac15WithMatthew</span> <span class="operator">=</span> macBook15Factory.createMacBook();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 具体工厂生产的对象与具体产品类实例化的产品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">MacBook15Product</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MacBook15Product</span>();</span><br><span class="line">    assertEquals(c.getClass(), mac15WithMatthew.getClass());</span><br><span class="line">    </span><br><span class="line">    System.out.println(mac15WithMatthew.getClass());</span><br><span class="line">    System.out.println(mac15WithMatthew.printSlogan());</span><br><span class="line">    System.out.println(mac15WithMatthew);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/factory1-5.png/wm" alt="单元测试"><br><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/factory1-6.png/wm" alt="单元测试"></p><p><code>System.out.println(mac13WithMatthew)</code>打印的结果只有<code>gameGiftBag</code>是因为子类重写父类的<code>toString()</code>方法，如果把子类（<code>MacBook13Product</code>）的<code>@ToString</code>注解去掉的话，就是默认继承的父类（<code>AbstractMacBookProduct</code>）的<code>toString()</code>方法了。</p><h1 id="避免滥用"><a href="#避免滥用" class="headerlink" title="避免滥用"></a>避免滥用</h1><p>事实上，在SpringBoot中已经用到了不少设计模式，在<a href="https://www.yuanmo.xyz/post/faabc628-bd9c-11e9-b52a-878085b5c0f3/">单例模式</a>那章讲过的<code>Bean</code>就用到了单例模式和今天讲的工厂模式（很怀念第一次使用Spring框架手写第一个Bean的时候），模板方法(Template Method)，<code>Jdbctempldate</code>、<code>Redistemplate</code>等等。但是切记一定不要过于拘泥与死板，为了设计模式而设计模式，忽略本身业务场景和实际情况。模式本身是对编程思想的扩展，我们在编写代码的时候还是要专注于业务本身，设计模式的初衷就是解决问题采用最优解，为了追求更高效率而诞生，保护需要加班的你。最靠谱的还是实践中慢慢总结，踩过的坑自己去总结、优化。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Maven标签详解</title>
      <link href="/post/faabc62a-bd9c-11e9-b52a-878085b5c0f3/"/>
      <url>/post/faabc62a-bd9c-11e9-b52a-878085b5c0f3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>现在真的空，能不能给我点任务？</p></blockquote><h1 id="关于Maven"><a href="#关于Maven" class="headerlink" title="关于Maven"></a>关于Maven</h1><p>Apache Maven发布于2004年。目的是解决码农使用Ant所带来的一些问题。</p><p>Maven作为Java开发者最常用的构建工具之一，就相当于前端的npm和yarn，现在任何项目自动化对团队来说是非常普遍和重要的。大多数Java开发者对Maven来说是比较熟悉的了，因为在Spring框架覆盖几乎整个Java后端开发的环境里，很多时候复杂、晦涩的配置也有大量的共性，所以基本上可以演变成一部分人完成，几代人模仿使用。</p><p>虽然没用过Gradle，但是各大论坛的反映都是比Maven友好，构建越复杂Gradle的优势越明显，貌似Android开发基本都是使用Gradle，以后Gradle可能就是主流了呢。</p><p>Springboot提倡干掉XML，用<code>Bean</code>配置类注入的方式，而Maven的独立核心配置文件<code>pom.xml</code>依然是采用XML语言作为编写构建配置的文件格式，不过好在Maven中的<code>pom.xml</code>的还是比较好用的，除了<code>&lt;build&gt;插件&lt;/build&gt;</code>会麻烦点。</p><h1 id="项目配置和标签解释"><a href="#项目配置和标签解释" class="headerlink" title="项目配置和标签解释"></a>项目配置和标签解释</h1><p><strong>Apache Maven官方文档</strong>：<a href="https://maven.apache.org/pom.html">https://maven.apache.org/pom.html</a></p><p>我对于Maven的了解，也就停留在知其然而不知其所以然，连很多标签的含义都没有完全熟悉，之前<a href="https://travis-ci.org/">travis-ci</a>持续集成的过程中就因为Maven打包跳过<code>javadoc</code>环节出了问题而半天不清楚问题的源头在哪。<br>不同类型的项目在初始化创建的过程中生成的<code>pom.xml</code>可能略有不同，下面拿实际的例子来解释。</p><h2 id="生命周期-基本命令"><a href="#生命周期-基本命令" class="headerlink" title="生命周期&amp;基本命令"></a>生命周期&amp;基本命令</h2><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/maven%E6%A0%87%E7%AD%BE/maven2.png/wm" alt="生命周期"></p><p><strong>一共三套生命周期，每套生命周期都包含一些命令：</strong></p><ul><li><strong>clean</strong>：清理项目<ul><li><strong>clean</strong>：这个应该很熟悉，清理上一次构建生成的文件，在Intellij IDEA就相当于<code>target</code>（单个<code>module</code>编译后）</li></ul></li><li><strong>default</strong>：构建项目<ul><li><strong>compile</strong>：编译项目主源码，将<code>src/main/resources</code>目录的内容经过处理后，复制到项目输出的主<code>classpath</code>目录中。</li><li><strong>test</strong>：这个也应该很熟悉，使用单元测试框架运行测试，测试代码不会被打包或部署。</li><li><strong>package</strong>：将编译好的代码，打包成可发布的格式。</li><li><strong>install</strong>：发布到本地仓库</li><li><strong>deploy</strong>：发布到远程仓库</li><li><strong>verify</strong>：运行任何检查，验证包是否有效且达到质量标准。</li><li><strong>validate</strong>：验证工程是否正确，所有需要的资源是否OK。</li></ul></li><li><strong>site</strong>：建立和发布项目<ul><li><strong>site</strong>：生成项目站点文档</li></ul></li></ul><p><code>package</code>和<code>install</code>命令的看起来好像实现的功能都一样，都是编译打包，但是<code>package</code>命令其实进行了打包步骤，而<code>install</code>命令同时把打好的可执行包布署到本地Maven仓库，但没有布署到远程Maven私服仓库。假设B项目依赖A项目，A项目仅仅是<code>package</code>将发布的包发布在target下，这时候编译目标B项目，就会GG报找不到A项目依赖的问题~所以要先把A项目install发布在本地仓库后，即可编译（compile）、打包、部署。如下图该jar是我执行<code>install</code>命令后在本地仓库部署的结果。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/maven%E6%A0%87%E7%AD%BE/maven6.png/wm" alt="执行install命令"></p><p>自写的jar或者收费产品添加到本地仓库：<code>mvn install:install-file -Dfile=$&#123;jar包的位置&#125; -DgroupId=$&#123;设置groupId&#125; -DartifactId=$&#123;设置artifactId&#125; -Dversion=$&#123;设置version&#125; -Dpackaging=jar</code>。<br>比如<code>ojdbc6.jar</code>添加到本地仓库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle.ojdbc_6<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>com.oracle.ojdbc_6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他还有一些命令比较好用，比如<code>mvn dependency:tree</code>：打印依赖目录树。<br><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/maven%E6%A0%87%E7%AD%BE/maven4.png/wm" alt="Maven命令"></p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/maven%E6%A0%87%E7%AD%BE/maven3.png/wm" alt="打印结果"></p><h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><p>项目中的多jar同时引用了相同的jar时，如果以来的版本不一致就可能产生依赖冲突。</p><p>由于Maven采用<code>短路优先</code>的策略，假如<code>project--&gt;A--&gt;B--&gt;C(1.0)</code>，<code>project--&gt;D--&gt;C(1.1)</code>那么实际最终依赖C的版本是1.1，因为他的依赖路径最短，那如果一样路径的情况下，则是<code>声明优先</code>，谁先被声明就优先被使用。一般来说，只要不是太久太老的依赖，出现这个问题还是好解决的，可以通过锁定版本一致，或者排除某个依赖。太旧的依赖容易造成版本一致却引起其他依赖无法正常工作。</p><p>为了营造这个冲突效果我特地试验了两个依赖，项目引入了<code>5.1.8.RELEASE</code>的<code>spring-webmvc</code>，同时引入了<code>5.1.1.RELEASE</code>的<code>spring-security-web</code>。可以看到<code>spring-security-web</code>的依赖关系是<code>5.1.1.RELEASE</code>的<code>spring-security-core</code>，并提示<code>omitted for duplicate</code>，因为<code>spring-security-web</code>的依赖路径较长，根据<code>短路优先</code>原则，所有相同的依赖被重写成了<code>5.1.8.RELEASE</code>版本。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/maven%E6%A0%87%E7%AD%BE/maven5.png/wm" alt="依赖冲突"></p><h2 id="依赖继承"><a href="#依赖继承" class="headerlink" title="依赖继承"></a>依赖继承</h2><p>当一个项目比较大的时候，通常会拆分成多个<code>module</code>，多个<code>module</code>同时运行就称为聚合。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>core<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>framework<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>market<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>payment<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>sender<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当这些被聚合的项目需要引入相同的jar时（这是很常见的事吧！），可以将这些jar写入父pom中，各个子项目继承该pom即可。</p><p><strong>父pom</strong>：以下依赖将会被子pom继承~</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle.ojdbc_6<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>com.oracle.ojdbc_6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>子pom</strong>：父pom的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>父pom所在项目的groupId<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>父pom所在项目的artifactId<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>父pom所在项目的版本号<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="标签解释"><a href="#标签解释" class="headerlink" title="标签解释"></a>标签解释</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>     </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>     </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 version。--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--被继承的父项目的构件标识符--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--被继承的父项目的全球唯一标识符--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--被继承的父项目的版本--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>/&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项 目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;/<span class="name">parent</span>&gt;</span>    </span><br><span class="line"> <span class="comment">&lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。--&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.erhuowang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erhuowang-maven2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!--项目的名称, Maven产生的文档用--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>erhuo-maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!--项目主页的URL, Maven产生的文档用--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://erhuowang.cn<span class="tag">&lt;/<span class="name">url</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!-- 项目的详细描述, Maven 产生的文档用。  当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>A maven project to study maven.<span class="tag">&lt;/<span class="name">description</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!--描述了这个项目构建环境中的前提条件。--&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--构建该项目或使用该插件所需要的Maven的最低版本--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">maven</span>/&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span>    </span><br><span class="line"> <span class="comment">&lt;!--项目名称和URL--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--项目名字，--&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>&gt;</span>erhuowang<span class="tag">&lt;/<span class="name">system</span>&gt;</span>     </span><br><span class="line">        <span class="comment">&lt;!--该项目使用的URL--&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://erhuowang.cn<span class="tag">&lt;/<span class="name">url</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!--项目持续集成信息--&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--持续集成系统的名字，例如continuum--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">system</span>/&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>/&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告）--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">notifiers</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--配置一种方式，当构建中断时，以该方式通知用户/开发者--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">notifier</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--传送通知的途径--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--发生错误时是否通知--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">sendOnError</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--构建失败时是否通知--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">sendOnFailure</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--构建成功时是否通知--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">sendOnSuccess</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--发生警告时是否通知--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">sendOnWarning</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--不赞成使用。通知发送到哪里--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--扩展配置项--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">notifier</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span>    </span><br><span class="line"> <span class="comment">&lt;!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--项目相关邮件列表信息--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。--&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">mailingList</span>&gt;</span>     </span><br><span class="line">         <span class="comment">&lt;!--邮件的名称--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建--&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">post</span>&gt;</span>chaibozhou@163.com<span class="tag">&lt;/<span class="name">post</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建--&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">subscribe</span>&gt;</span>chaibozhou@163.com<span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建--&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span>chaibozhou@163.com<span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--你可以浏览邮件信息的URL--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span>chaibozhou@163.com<span class="tag">&lt;/<span class="name">archive</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!--项目开发者列表--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span>     </span><br><span class="line">     <span class="comment">&lt;!--某个项目开发者的信息--&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span>     </span><br><span class="line">         <span class="comment">&lt;!--SCM里项目开发者的唯一标识符--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>HELLO WORLD<span class="tag">&lt;/<span class="name">id</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--项目开发者的全名--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>chaimm<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--项目开发者的email--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>chaibozhou@163.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--项目开发者的主页的URL--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>/&gt;</span>    </span><br><span class="line">            <span class="comment">&lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span>     </span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Project Manager<span class="tag">&lt;/<span class="name">role</span>&gt;</span>     </span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Architect<span class="tag">&lt;/<span class="name">role</span>&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span>    </span><br><span class="line">            <span class="comment">&lt;!--项目开发者所属组织--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">organization</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--项目开发者所属组织的URL--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>http://erhuowang.cn<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--项目开发者属性，如即时消息如何处理等--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span>     </span><br><span class="line">                <span class="tag">&lt;<span class="name">dept</span>&gt;</span>No<span class="tag">&lt;/<span class="name">dept</span>&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>    </span><br><span class="line">            <span class="comment">&lt;!--项目开发者所在时区， -11到12范围内的整数。--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span>&gt;</span>-5<span class="tag">&lt;/<span class="name">timezone</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!--项目的其他贡献者列表--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">contributors</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--项目的其他贡献者。参见developers/developer元素--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">contributor</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>/&gt;</span><span class="tag">&lt;<span class="name">email</span>/&gt;</span><span class="tag">&lt;<span class="name">url</span>/&gt;</span><span class="tag">&lt;<span class="name">organization</span>/&gt;</span><span class="tag">&lt;<span class="name">organizationUrl</span>/&gt;</span><span class="tag">&lt;<span class="name">roles</span>/&gt;</span><span class="tag">&lt;<span class="name">timezone</span>/&gt;</span><span class="tag">&lt;<span class="name">properties</span>/&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">contributor</span>&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;/<span class="name">contributors</span>&gt;</span>       </span><br><span class="line">    <span class="comment">&lt;!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。--&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span>    </span><br><span class="line">         <span class="comment">&lt;!--license用于法律上的名称--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache 2<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--官方的license正文页面的URL--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/erhuwoang/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--项目分发的主要方式：    </span></span><br><span class="line"><span class="comment">              repo，可以从Maven库下载    </span></span><br><span class="line"><span class="comment">              manual， 用户必须手动下载和安装依赖--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--关于license的补充信息--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">comments</span>&gt;</span>A business-friendly OSS license<span class="tag">&lt;/<span class="name">comments</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span>     </span><br><span class="line">        <span class="comment">&lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。--&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span>     </span><br><span class="line">            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">connection</span>&gt;</span>     </span><br><span class="line">        <span class="comment">&lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读--&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>     </span><br><span class="line">            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!--当前代码的标签，在开发阶段默认为HEAD--&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>/&gt;</span>           </span><br><span class="line">        <span class="comment">&lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。--&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://svn.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!--描述项目所属组织的各种属性。Maven产生的文档用--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span>     </span><br><span class="line">     <span class="comment">&lt;!--组织的全名--&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     </span><br><span class="line">        <span class="comment">&lt;!--组织主页的URL--&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.erhuowang.cn<span class="tag">&lt;/<span class="name">url</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--构建项目需要的信息--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">sourceDirectory</span>/&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">scriptSourceDirectory</span>/&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">testSourceDirectory</span>/&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--被编译过的应用程序class文件存放的目录。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">outputDirectory</span>/&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--被编译过的测试class文件存放的目录。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">testOutputDirectory</span>/&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--使用来自该项目的一系列构建扩展--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--描述使用到的构建扩展。--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">extension</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--构建扩展的groupId--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--构建扩展的artifactId--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--构建扩展的版本--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>/&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">extension</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">defaultGoal</span>/&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--这个元素描述了项目相关或测试相关的所有资源路径--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">resource</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">targetPath</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">filtering</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--描述存放资源的目录，该路径相对POM路径--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--包含的模式列表，例如**/*.xml.--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--排除的模式列表，例如**/*.xml--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">excludes</span>/&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">testResources</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">testResource</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">targetPath</span>/&gt;</span><span class="tag">&lt;<span class="name">filtering</span>/&gt;</span><span class="tag">&lt;<span class="name">directory</span>/&gt;</span><span class="tag">&lt;<span class="name">includes</span>/&gt;</span><span class="tag">&lt;<span class="name">excludes</span>/&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--构建产生的所有文件存放的目录--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">directory</span>/&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>/&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--当filtering开关打开时，使用到的过滤器属性文件列表--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">filters</span>/&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--使用的插件列表 。--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--plugin元素包含描述插件所需要的信息。--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--插件在仓库里的group ID--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--插件在仓库里的artifact ID--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--被使用的插件的版本（或版本范围）--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>/&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">extensions</span>/&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">executions</span>&gt;</span>    </span><br><span class="line">      <span class="comment">&lt;!--execution元素包含了插件执行需要的信息--&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">execution</span>&gt;</span>    </span><br><span class="line">       <span class="comment">&lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标--&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span>/&gt;</span>    </span><br><span class="line">       <span class="comment">&lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段--&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">phase</span>/&gt;</span>    </span><br><span class="line">       <span class="comment">&lt;!--配置的执行目标--&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">goals</span>/&gt;</span>    </span><br><span class="line">       <span class="comment">&lt;!--配置是否被传播到子POM--&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">inherited</span>/&gt;</span>    </span><br><span class="line">       <span class="comment">&lt;!--作为DOM对象的配置--&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;/<span class="name">execution</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">executions</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--项目引入插件所需要的额外依赖--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line">      <span class="comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">       ......    </span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>         </span><br><span class="line">     <span class="comment">&lt;!--任何配置是否被传播到子项目--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">inherited</span>/&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--作为DOM对象的配置--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--使用的插件列表--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span><span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span><span class="tag">&lt;<span class="name">version</span>/&gt;</span><span class="tag">&lt;<span class="name">extensions</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">execution</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>/&gt;</span><span class="tag">&lt;<span class="name">phase</span>/&gt;</span><span class="tag">&lt;<span class="name">goals</span>/&gt;</span><span class="tag">&lt;<span class="name">inherited</span>/&gt;</span><span class="tag">&lt;<span class="name">configuration</span>/&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">execution</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">      ......    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">goals</span>/&gt;</span><span class="tag">&lt;<span class="name">inherited</span>/&gt;</span><span class="tag">&lt;<span class="name">configuration</span>/&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span>    </span><br><span class="line"> <span class="comment">&lt;!--在列的项目构建profile，如果被激活，会修改构建处理--&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;<span class="name">profiles</span>&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--根据环境参数或命令行参数激活某个构建处理--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>/&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它    </span></span><br><span class="line"><span class="comment">   能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">activation</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--profile默认是否激活的标志--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">os</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统的名字--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统所属家族(如 &#x27;windows&#x27;)--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统体系结构 --&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统版本--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">os</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile就会被激活。如果值    </span></span><br><span class="line"><span class="comment">    字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--激活profile的属性的名称--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenVersion<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--激活profile的属性的值--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">value</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活    </span></span><br><span class="line"><span class="comment">    profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--如果指定的文件存在，则激活profile。--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">exists</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/<span class="tag">&lt;/<span class="name">exists</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--如果指定的文件不存在，则激活profile。--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">missing</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/<span class="tag">&lt;/<span class="name">missing</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">file</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">activation</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--构建项目所需要的信息。参见build元素--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultGoal</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">resource</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">targetPath</span>/&gt;</span><span class="tag">&lt;<span class="name">filtering</span>/&gt;</span><span class="tag">&lt;<span class="name">directory</span>/&gt;</span><span class="tag">&lt;<span class="name">includes</span>/&gt;</span><span class="tag">&lt;<span class="name">excludes</span>/&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">resource</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">testResources</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">testResource</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">targetPath</span>/&gt;</span><span class="tag">&lt;<span class="name">filtering</span>/&gt;</span><span class="tag">&lt;<span class="name">directory</span>/&gt;</span><span class="tag">&lt;<span class="name">includes</span>/&gt;</span><span class="tag">&lt;<span class="name">excludes</span>/&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>/&gt;</span><span class="tag">&lt;<span class="name">finalName</span>/&gt;</span><span class="tag">&lt;<span class="name">filters</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>    </span><br><span class="line">      <span class="comment">&lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span><span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span><span class="tag">&lt;<span class="name">version</span>/&gt;</span><span class="tag">&lt;<span class="name">extensions</span>/&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">executions</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span>    </span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>/&gt;</span><span class="tag">&lt;<span class="name">phase</span>/&gt;</span><span class="tag">&lt;<span class="name">goals</span>/&gt;</span><span class="tag">&lt;<span class="name">inherited</span>/&gt;</span><span class="tag">&lt;<span class="name">configuration</span>/&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;/<span class="name">executions</span>&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">         ......    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">goals</span>/&gt;</span><span class="tag">&lt;<span class="name">inherited</span>/&gt;</span><span class="tag">&lt;<span class="name">configuration</span>/&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span><span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span><span class="tag">&lt;<span class="name">version</span>/&gt;</span><span class="tag">&lt;<span class="name">extensions</span>/&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">execution</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>/&gt;</span><span class="tag">&lt;<span class="name">phase</span>/&gt;</span><span class="tag">&lt;<span class="name">goals</span>/&gt;</span><span class="tag">&lt;<span class="name">inherited</span>/&gt;</span><span class="tag">&lt;<span class="name">configuration</span>/&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;/<span class="name">execution</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line">       <span class="comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">        ......    </span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>/&gt;</span><span class="tag">&lt;<span class="name">inherited</span>/&gt;</span><span class="tag">&lt;<span class="name">configuration</span>/&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">modules</span>/&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--发现依赖和扩展的远程仓库列表。--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">repositories</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--参见repositories/repository元素--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">releases</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">releases</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>/&gt;</span><span class="tag">&lt;<span class="name">name</span>/&gt;</span><span class="tag">&lt;<span class="name">url</span>/&gt;</span><span class="tag">&lt;<span class="name">layout</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素--&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">releases</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">releases</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>/&gt;</span><span class="tag">&lt;<span class="name">name</span>/&gt;</span><span class="tag">&lt;<span class="name">url</span>/&gt;</span><span class="tag">&lt;<span class="name">layout</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">     ......    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--不赞成使用. 现在Maven忽略该元素.--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">reports</span>/&gt;</span>       </span><br><span class="line">   <span class="comment">&lt;!--该元素包括使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">reporting</span>&gt;</span>    </span><br><span class="line">    ......    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--参见dependencyManagement元素--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">      ......    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--参见distributionManagement元素--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span>    </span><br><span class="line">    ......    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--参见properties元素--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>/&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span>    </span><br><span class="line"> <span class="comment">&lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径--&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;<span class="name">modules</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--发现依赖和扩展的远程仓库列表。--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span>     </span><br><span class="line">     <span class="comment">&lt;!--包含需要连接到远程仓库的信息--&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span>    </span><br><span class="line">         <span class="comment">&lt;!--如何处理远程仓库里发布版本的下载--&gt;</span>    </span><br><span class="line">         <span class="tag">&lt;<span class="name">releases</span>&gt;</span>    </span><br><span class="line">          <span class="comment">&lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">releases</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-repository-proxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span>     </span><br><span class="line">   <span class="comment">&lt;!--远程仓库名称--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon-repository-proxy<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--远程仓库URL，按protocol://hostname/path形式--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.169:9999/repository/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span>               </span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span>    </span><br><span class="line">   ......    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--依赖的group ID--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--依赖的artifact ID--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-artifact<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， 尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span>    </span><br><span class="line">            <span class="comment">&lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span><span class="tag">&lt;/<span class="name">classifier</span>&gt;</span>    </span><br><span class="line">            <span class="comment">&lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。    </span></span><br><span class="line"><span class="comment">                - compile ：默认范围，用于编译      </span></span><br><span class="line"><span class="comment">                - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath      </span></span><br><span class="line"><span class="comment">                - runtime: 在执行时需要使用      </span></span><br><span class="line"><span class="comment">                - test:    用于test任务时使用      </span></span><br><span class="line"><span class="comment">                - system: 需要外在提供相应的元素。通过systemPath来取得      </span></span><br><span class="line"><span class="comment">                - systemPath: 仅用于范围为system。提供相应的路径      </span></span><br><span class="line"><span class="comment">                - optional:   当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用--&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>       </span><br><span class="line">            <span class="comment">&lt;!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span><span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>    </span><br><span class="line">             <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>     </span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>     </span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>     </span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span>       </span><br><span class="line">            <span class="comment">&lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。--&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--不赞成使用. 现在Maven忽略该元素.--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。--&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;<span class="name">reporting</span>&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">excludeDefaults</span>/&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">outputDirectory</span>/&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--使用的报表插件和他们的配置。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--plugin元素包含描述报表插件需要的信息--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--报表插件在仓库里的group ID--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--报表插件在仓库里的artifact ID--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--被使用的报表插件的版本（或版本范围）--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--任何配置是否被传播到子项目--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">inherited</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--报表插件的配置--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">reportSets</span>&gt;</span>    </span><br><span class="line">     <span class="comment">&lt;!--表示报表的一个集合，以及产生该集合的配置--&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">reportSet</span>&gt;</span>    </span><br><span class="line">      <span class="comment">&lt;!--报表集合的唯一标识符，POM继承时用到--&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>/&gt;</span>    </span><br><span class="line">      <span class="comment">&lt;!--产生报表集合时，被使用的报表的配置--&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>/&gt;</span>    </span><br><span class="line">      <span class="comment">&lt;!--配置是否被继承到子POMs--&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">inherited</span>/&gt;</span>    </span><br><span class="line">      <span class="comment">&lt;!--这个集合里使用到哪些报表--&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">reports</span>/&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">reportSet</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">reportSets</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span>    </span><br><span class="line"> <span class="comment">&lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。--&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    ......    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span>       </span><br><span class="line">    <span class="comment">&lt;!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。--&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!--部署项目产生的构件到远程仓库需要的信息--&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span>    </span><br><span class="line">         <span class="comment">&lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">uniqueVersion</span>/&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">id</span>&gt;</span>     </span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon maven2<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>file://$&#123;basedir&#125;/target/deploy<span class="tag">&lt;/<span class="name">url</span>&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>/&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素--&gt;</span>     </span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">uniqueVersion</span>/&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">id</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Banseon-maven2 Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span>     </span><br><span class="line">   <span class="tag">&lt;<span class="name">layout</span>/&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--部署项目的网站需要的信息--&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">site</span>&gt;</span>    </span><br><span class="line">         <span class="comment">&lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置--&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-site<span class="tag">&lt;/<span class="name">id</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--部署位置的名称--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>business api website<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!--部署位置的URL，按protocol://hostname/path形式--&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>     </span><br><span class="line">                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web      </span><br><span class="line">            <span class="tag">&lt;/<span class="name">url</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;/<span class="name">site</span>&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">downloadUrl</span>/&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">relocation</span>&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--构件新的group ID--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--构件新的artifact ID--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--构件新的版本号--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>/&gt;</span>    </span><br><span class="line">   <span class="comment">&lt;!--显示给用户的，关于移动的额外信息，例如原因。--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">message</span>/&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span>    </span><br><span class="line">  <span class="comment">&lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。--&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">status</span>/&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>/&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span>    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> 构建工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千千万万设计模式之单例模式</title>
      <link href="/post/faabc627-bd9c-11e9-b52a-878085b5c0f3/"/>
      <url>/post/faabc627-bd9c-11e9-b52a-878085b5c0f3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>这下好了，对象也要共享不让你new了。</p></blockquote><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>我们先不谈什么是单例模式，我想其实很多人其实最关心的是什么时候需要用到单例模式？使用单例模式之后有什么提升与益处？</p><p>首先我们知道单例单例，可以简单理解为单个实例，而实例化是指在面向对象的编程中，把用类创建对象的过程称为实例化。是将一个抽象的概念类，具体到该类实物的过程。</p><p>那么什么情况下会优先、或者强制使用单例模式创建实例呢：</p><ul><li>数据库连接池，<strong>注意：</strong> 这里的单例指的是数据库连接池对象，而不是单个连接对象，这点一定要分清。</li><li><code>Spring</code>中的<code>Bean</code>，获取实例的时候都是默认单例模式，所以多线程是要注意（<del>面试题警告⚠</del>）。</li><li><code>API</code>接口中的<code>token</code>、<code>id</code>的获取，比如百度AI文字识别的<code>accessToken</code>中的获取，一般该<code>token</code>有一定的有效期，需要自行管理，当失效时需重新获取的方式，采用单例模式就可以很好的节约资源。</li><li>多个子类想共享一个父类的线程池的业务场景，频繁创建<code>ThreadPool</code>应该是不合适的，其实这个时候<code>static</code>单例化<code>ThreadPool</code>，注入是比较好的选择（这个例子比较特殊，可能是设计问题高耦合，可以不看）。</li></ul><p>单例模式确保某个类只有一个实例，而且是自身创建唯一实例，提供一个全局访问的入口。网上的单例模式的写法大致就是3种：懒汉式单例模式、饿汉式单例模式、登记式单例模式：</p><ul><li>懒汉式单例模式：在类加载时不初始化。</li><li>饿汉式单例模式：在类加载时就完成了初始化，所以类加载比较慢，但获取对象的速度快。</li><li>登记式单例模式：它的单例在类被装载的时候就被实例化了，内部也算是饿汉式单例模式。</li></ul><p>登记式单例模式由于本人不太熟悉，所以在本文中只讲述前两种。</p><h1 id="Java类加载顺序"><a href="#Java类加载顺序" class="headerlink" title="Java类加载顺序"></a>Java类加载顺序</h1><p>为什么要叫饿汉式、懒汉式呢？饿汉式则可以想象成因为太饿了，在类加载时就迫不及待完成了实例化，但是如果从初始化到线程结束都没有使用过的，就是变成了资源浪费。这里需要拓展下Java类的加载机制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Initialization</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 类的初始化顺序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/30 10:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Initialization</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">IKun</span> <span class="variable">iKun</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IKun</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;非静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Initialization</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;top-静态函数&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Initialization</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;bottom-静态函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IKun</span>&#123;</span><br><span class="line"></span><br><span class="line">    IKun()&#123; System.out.println(<span class="string">&quot;静态变量&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/singleton1.png/wm" alt="Java类加载顺序"></p><p>从打印的结果可以看到Java类的加载顺序大致是：<br><code>静态成员/静态代码块</code> –&gt; <code>main方法</code> –&gt; <code>非静态成员/非静态代码块</code> –&gt; <code>构造器</code></p><h1 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h1><p>上面讲到了，饿汉式单例是在类加载就是内部实例化对象，并且不允许外部创建实例。饿汉式单例模式的实现也比较简单，记住无参构造器私有化，内部实例化对象，外部通过<code>static</code>方法获取对象。</p><p>我们都知道坤坤是一个对细节把控很有追求的人，从那段舞蹈的诸多细节就能够看出来。尤其是最后的白色吊带滑落，堪称经典之举，坤坤通过有意的小失误将前面表演精心铺垫的「舞王」设定迅速推翻，营造了一种反差萌拉近与粉丝的距离，白带异常的表现也让粉丝们感同身受。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/singleton1.gif" alt="白色吊带异常"></p><p>坤坤自从白色吊带表演大火🔥之后，淘宝厂商为了恰烂钱💰纷纷效仿推出「坤坤同款异常白色吊带」、「坤坤潮流异常背带」的爆款产品。谁知道厂商还没开始恰烂钱💰的时候，坤坤就机智的把「坤式白色吊带」和「白色吊带异常」申请了发明专利、外观设计专利、实用专利，将「坤式白色吊带」这个<code>商品</code>和「白色吊带异常」这个<code>艺术作品</code>的所有权把握在了自己手里。「白色吊带异常」的表演不允许外界直接模仿、抄袭，必须先向坤坤申请，支付一定费用才购买了「坤式白色吊带」<code>对象</code>的<code>licence</code>后才可以表演「白色吊带异常」，<strong>并且使用完后要进行归还</strong>，这样就能确保只有一个白色吊带在外部商演能够很好的锁定。孙哥烂钱💰都恰得没这么6嗷~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> EarlySingleton</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 饿汉式单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/30 10:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EarlySingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 独享的moment</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EarlySingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部实例化一个白色吊带对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">EarlySingleton</span> <span class="variable">suspenders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EarlySingleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局入口点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EarlySingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suspenders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 白带异常的演出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Suspenders <span class="title function_">slipping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Suspenders</span>(<span class="string">&quot;white&quot;</span>,<span class="string">&quot;白色吊带异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 坤坤申请专利了嗷</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Setter(value = AccessLevel.PUBLIC)</span></span><br><span class="line"><span class="meta">@Getter(value = AccessLevel.PUBLIC)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Suspenders</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> String action;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 向坤坤申请</span></span><br><span class="line">    <span class="type">EarlySingleton</span> <span class="variable">s</span> <span class="operator">=</span> EarlySingleton.getInstance();</span><br><span class="line">    assertNotNull(s);</span><br><span class="line">    <span class="comment">// 白色吊带异常演出</span></span><br><span class="line">    System.out.println(s.slipping());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/singleton2.png/wm" alt="共享白色吊带√"></p><p><strong>优点：</strong></p><ul><li>线程安全</li></ul><p><strong>缺点：</strong></p><ul><li>类初始化实例化对象后未被调用则是浪费资源的表现</li></ul><h1 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h1><p>坤坤虽然唱跳俱佳，但也耐不住是条懒狗🐶，只有等到电话、message、inbox连环催，他才开始发货。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LazilySingleton</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 懒汉式单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/30 15:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazilySingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同样的避免外部实例化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazilySingleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">LazilySingleton</span> <span class="variable">suspenders</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程不安全</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazilySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (suspenders == <span class="literal">null</span>) &#123;</span><br><span class="line">            suspenders = <span class="keyword">new</span> <span class="title class_">LazilySingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> suspenders;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>单例实例在第一次被使用时构建</li></ul><p><strong>缺点：</strong></p><ul><li>不加锁的话，存在线程安全问题，即使加了锁，对性能也产生了影响。</li></ul><p><strong>注：</strong> 为什么说懒汉式单例模式是线程不安全的呢，假如有两个客户<code>线程</code>准备购买「坤式白色吊带」和「白色吊带异常」进行商演，第一位客户提出申请，坤坤刚回复马上交付，另一位客户的聊天窗口弹了出来也问能马上交付吗？坤坤一急立马把「白色吊带」和「白色吊带异常」的<code>licence</code>的交付第二位客户，交付完之后坤坤想到第一位客户也在等待，于是又把新的「白色吊带」和<code>license</code>交付给了第一位客户。然而现在已经有两个<code>对象</code>游离在外了，坤坤表示头很大。</p><p>坤坤发现自己亲自处理不但没牌面，而且容易出事情，但是交给经纪人又不放心，思来想去坤坤还是决定把这项业务交给哥哥孙笑川打理，自己则脱离去做更纯粹的音乐去了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Singleton</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 静态内部类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/30 16:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把业务交给哥哥孙笑川打理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SunXiaoChuan</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">suspenders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SunXiaoChuan.suspenders;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>线程安全</li><li>单例实例在第一次被使用时构建</li></ul><p><strong>缺点：</strong></p><ul><li>暂无</li></ul><p>还是孙哥办事靠谱嗷，毕竟恰烂钱💰带师~</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千千万万设计模式之适配器模式</title>
      <link href="/post/faabc629-bd9c-11e9-b52a-878085b5c0f3/"/>
      <url>/post/faabc629-bd9c-11e9-b52a-878085b5c0f3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>模式千万条，生命就一条，可以下班了。</p></blockquote><p><em>本系列已经开源至GitHub，repository<a href="https://github.com/Matthew-Han/java-design-pattern">地址</a>。</em></p><p><em>最初只是为了做个人笔记，参考了前人的笔记和博客，在这里我用更接潮流、更接地气的例子来帮助加深理解记忆。</em></p><p><em>由于本人技术水平也有限，着重点在于思想的理解，若出现任何错误、不恰当内容，欢迎各位前来<a href="https://github.com/Matthew-Han/java-design-pattern/issues">issues</a>指正。</em></p><p><em>感谢任何分享、开源学习教程的前辈，正是有你们这一群乐于奉献的人才让整个生态变得生机勃勃、让这个行业日新月异。</em></p><h1 id="设计模式的思想"><a href="#设计模式的思想" class="headerlink" title="设计模式的思想"></a>设计模式的思想</h1><p><em>新开个系列，把前人写的设计模式好好地学习钻研下，这里做点笔记。这里参考的博文<a href="https://www.jianshu.com/p/43bfb4516dd8">地址</a></em></p><p>什么是设计模式？放在两年前的我，不但不了解它，也不会去重视它。我只在乎能够猥琐实现，程序运行不报错。但是在版本快速迭代、需求明天就改、框架稳定升级的现在，自己也写了不少代码，积累了一些经验和知识，在快速成长的过程中，愈发觉得优秀的开发工程师就是会比平庸的开发工程师在设计、建模的过程中去花更多时间去思考、去推理。<del>其实我觉得我也算是考虑问题比较全面、比较细致的人了（大雾</del>）。<br>这里又可以引申出面向对象和面向过程，优秀的开发工程师可以把面向过程的程序写得非常内聚、可扩展性好、具备一定的复用性；而平庸的程序员用面向对象的语言一样也能把程序写得松散随意、毫无抽象与建模、模块耦合严重、维护性差。而设计模式也是考究程序员对业务的建模能力，以及对架构的宏观掌握能力，面向对象来说，以对象模型为核心，丰富模型的内涵，扩展模型的外延，通过模型的行为组合去共同解决某一力问题，抽象的能力必不可少。<br>啥是面向对象？总结就是四大特性：封装、继承、多态、抽象。这里不细讲了，留到之后在总结一篇post吧。</p><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p>适配器模式简而言之就是一个类的转接口转换成客户希望的另外一个接口，主要作用就是兼容。举个例子：中国标准220伏特的电压，日本是110伏特的电压，iPhone的充电头是5伏1安（<del>万年没有快充，iPhone 4也是5伏1安</del>），220伏特的电压没法直接给iPhone充电，就需要一个电源适配器来连接两者，所以适配器模式就是讲<code>一个类的转接口转换成客户希望的另一个接口</code>。</p><p>在<code>Spring</code>的体现：<code>Spring AOP</code>模块<code>BeforeAdvice</code>、<code>AfterAdvice</code>、<code>ThrowsAdvice</code>三种通知类型的支持实际上是借助适配器模式来实现的， 这样的好处是使得框架允许用户向框架中加入自己想要支持的任何一种通知类型， 上述三种通知类型是<code>Spring AOP</code>模块定义的， 它们是<code>AOP</code>联盟定义的<code>Advice</code>的子类型。在<code>Spring</code>中 基本<code>adapter</code>结尾都是适配器~</p><h1 id="适配器的分类"><a href="#适配器的分类" class="headerlink" title="适配器的分类"></a>适配器的分类</h1><ul><li>类适配器 (通过引用适配者进行组合实现)</li><li>对象适配器 (通过继承适配者进行实现)</li><li>接口适配器 （通过抽象类来实现适配）</li></ul><p>前二者在实现上有些许区别，作用一样，第三个接口适配器差别较大。</p><h2 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h2><blockquote><p>原理：通过<code>继承</code>来实现适配器功能。</p></blockquote><p>在这里我就是拿两位德艺双馨的人民艺术家老师：坤坤和凡凡的业务能力用代码来解释类适配器模式。<br>大家都知道坤坤是一位练习时长2年半的个人练习生，喜欢唱跳rap篮球：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> KunKunService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 坤坤业务的能力</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/25 15:42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">KunKunService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 唱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lyric</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">singing</span><span class="params">(String lyric)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> music</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">dance</span><span class="params">(Music music)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">rap</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 虚假的篮球🏀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basketball</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">playBall</span><span class="params">(Basketball basketball)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> KunKunServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 坤坤练习生业务能力的展现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/25 15:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KunKunServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">KunKunService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">singing</span><span class="params">(String lyric)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lyric;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dance</span><span class="params">(Music music)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">rap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 坤坤皮球还是给个赞👍</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">playBall</span><span class="params">(Basketball basketball)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然我们的加拿带🇨🇦电鳗凡凡业务能力也⑧差。自带auto tone放电的男人，每次看完他的Live，手机电就满了（<del>据说凡凡打算成立凡电科技公司，主营移动充电业务</del>）。恰面🍜水平也很高，而且恰面一定要大碗的。当然了，这么优秀的蓝人还是有个弱点的，就是怕苏韵锦像个石头一样欠的钱不还。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> KrisService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 加拿带电鳗的业务水平</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/25 16:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">KrisService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 凡凡的充电计划√</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">autoTone</span><span class="params">(String lyric)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 苏⚡️韵⚡️锦⚡️，你⚡️这⚡️里⚡️欠⚡️我⚡️的⚡️用⚡️什⚡️么⚡️还⚡️？</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">repay</span><span class="params">(<span class="type">long</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * size一定要大，因为是大碗宽面!</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">eatNoodles</span><span class="params">(<span class="type">long</span> size)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 真正的篮球🏀 vs 虚假的篮球🏀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basketball</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">playBasketball</span><span class="params">(Basketball basketball)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> KrisServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> U R so bad girl !</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/25 16:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KrisServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">KrisService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * auto tone ⑧用麦克风就天然打开</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">autoTone</span><span class="params">(String lyric)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">freestyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        String[] str = lyric.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String c : str)&#123;</span><br><span class="line">            freestyle.append(c);</span><br><span class="line">            freestyle.append(<span class="string">&quot; ⚡ &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> String.valueOf(freestyle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">repay</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">eatNoodles</span><span class="params">(<span class="type">long</span> size)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">playBasketball</span><span class="params">(Basketball basketball)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一天坤坤觉得自己的成名作《鸡你太美》虽然灵幻动听，但是还是少了点什么味道。为了充电的他打开了pilipili看了凡凡的Live后恍然大悟，原来是少了auto tone！但是坤坤自身根本没有这种天赋，于是身为带明星的坤坤就打算偷学凡凡的绝技，打算在以后的唱歌中都加入这种带电的感觉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ClassKunKunAdapter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 坤の偷学</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/25 17:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassAdapterImpl</span> <span class="keyword">extends</span> <span class="title class_">KrisServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">KunKunService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">singing</span><span class="params">(String lyric)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.autoTone(lyric);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dance</span><span class="params">(Music music)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">rap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">playBall</span><span class="params">(Basketball basketball)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/adapter1-1.png/wm" alt="类适配器"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">singingOfClass</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">KunKunService</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassAdapterImpl</span>();</span><br><span class="line"></span><br><span class="line">    assertEquals(c.singing(<span class="string">&quot;鸡你太美!&quot;</span>),<span class="string">&quot;鸡 ⚡ 你 ⚡ 太 ⚡ 美 ⚡ ! ⚡ &quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(c.singing(<span class="string">&quot;鸡你太美!&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来测试下结果，坤坤<code>师承</code>凡凡，通过偷学凡凡的绝技成功的让自己的唱歌技巧上了几个鹿晗的level，成为young OG就是这么简单。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/adapter1-2.png/wm" alt="坤坤发电了吗"></p><p>但是我们也可以看到这种实现方式，需要将坤坤的所有业务能力全部覆写一遍，实属⑧够灵活，其实我们还有接口适配器模式。</p><h2 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h2><blockquote><p>原理：通过<code>组合</code>来实现适配器功能。</p></blockquote><p>通过将凡凡业务员初始化，<code>new</code>一个对象凡凡，让凡凡来帮忙使用auto tone，坤凡合体演绎鸡🐔你太美！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ObjectAdapterImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 对象适配器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/26 09:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectAdapterImpl</span> <span class="keyword">implements</span> <span class="title class_">KunKunService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> KrisService krisService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ObjectAdapterImpl</span><span class="params">(KrisService krisService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.krisService = krisService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">singing</span><span class="params">(String lyric)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> krisService.autoTone(lyric);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dance</span><span class="params">(Music music)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">rap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">playBall</span><span class="params">(Basketball basketball)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，坤坤在更♂衣室也来测试下效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">singingOfObject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">KrisService</span> <span class="variable">krisService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KrisServiceImpl</span>();</span><br><span class="line">    <span class="type">KunKunService</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectAdapterImpl</span>(krisService);</span><br><span class="line"></span><br><span class="line">    assertEquals(o.singing(<span class="string">&quot;鸡你太美~&quot;</span>),<span class="string">&quot;鸡 ⚡ 你 ⚡ 太 ⚡ 美 ⚡ ~ ⚡ &quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(o.singing(<span class="string">&quot;鸡你太美~&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/adapter2-1.png/wm" alt="对象适配器"></p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/adapter2-2.png/wm" alt="坤坤假唱实锤"></p><p>虽然是坤坤的舞台，但是却有加拿带🇨🇦电流声？假唱实锤！</p><h2 id="接口适配器模式"><a href="#接口适配器模式" class="headerlink" title="接口适配器模式"></a>接口适配器模式</h2><blockquote><p>通过<code>抽象类</code>来实现适配，这种适配方式有别于上面两种。</p></blockquote><p>上面两种实现方式，毫无例外的都覆写了坤坤的所有业务能力，略显笨重，那么适配器模式可以只将坤坤的一种或多种技能进行适配强化。<br>自从坤坤唱歌也能发电之后，坤坤成功的选上了NBA篮球带使，但是却被广大直男们怒喷。坤坤很抑郁啊，于是就去找了当年美国校队啦啦队的队长Chaoyue Yang，希望能够从幸运光环一身的她找到点帮助。Chaoyue妹妹耐心地和坤坤说，你现在被直男们喷还是因为把篮球🏀玩出皮球的感觉，实属弟弟，篮球技术还是要偷学凡凡嗷~<br>于是坤坤在一个与杰伦超话流量争顶的晚上，专门虚心去请教凡凡关于篮球技巧，顺便把auto tone升级到2.0。<br>凡凡见到坤坤没有丝毫意外，缓缓说道：你想要的一切，我都放在了抽象圣经<code>《AbstractAdapter》</code>里面了，自己去取需要的吧，别再来打扰我了，U R so bad girl！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> AbstractAdapter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象圣经</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/26 16:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAdapter</span> <span class="keyword">implements</span> <span class="title class_">KunKunService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">singing</span><span class="params">(String lyric)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">freestyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        String[] str = lyric.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String c : str)&#123;</span><br><span class="line">            freestyle.append(c);</span><br><span class="line">            <span class="comment">// 2.0 电力加强了</span></span><br><span class="line">            freestyle.append(<span class="string">&quot; ⚡⚡ &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(freestyle);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dance</span><span class="params">(Music music)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">rap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">playBall</span><span class="params">(Basketball basketball)</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> InterfaceAdapterImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 坤の学习</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/26 16:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceAdapterImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">singing</span><span class="params">(String lyric)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.singing(lyric);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">playBall</span><span class="params">(Basketball basketball)</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.playBall(basketball); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/adapter3-1.png/wm" alt="接口适配器"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">singingOfInterface</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">KunKunService</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterfaceAdapterImpl</span>();</span><br><span class="line"></span><br><span class="line">    assertEquals(i.singing(<span class="string">&quot;鸡你太美...&quot;</span>),<span class="string">&quot;鸡 ⚡⚡ 你 ⚡⚡ 太 ⚡⚡ 美 ⚡⚡ . ⚡⚡ . ⚡⚡ . ⚡⚡ &quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(i.singing(<span class="string">&quot;鸡你太美...&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playBallOfInterface</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">KunKunService</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterfaceAdapterImpl</span>();</span><br><span class="line"></span><br><span class="line">    assertTrue(i.playBall(<span class="keyword">new</span> <span class="title class_">Basketball</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/adapter3-2.png/wm" alt="2.0的auto tone 电力翻倍！"></p><p>坤坤通过研读抽象圣经<code>《AbstractAdapter》</code>后，不但学到了真正的篮球，还把auto tone成功升级到2.0，电力翻倍。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 适配器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quick Sort思想以及Java代码实现</title>
      <link href="/post/faabc620-bd9c-11e9-b52a-878085b5c0f3/"/>
      <url>/post/faabc620-bd9c-11e9-b52a-878085b5c0f3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="快速排序概要"><a href="#快速排序概要" class="headerlink" title="快速排序概要"></a>快速排序概要</h1><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/Quick%20Sort/quickSort.gif" alt="快速排序"></p><p>快排的三个步骤：</p><ul><li>选择基准：在待排序列中，按照某种方式挑出一个元素，作为 “基准”（pivot）。</li><li>分割操作：以该基准在序列中的实际位置，把序列分成两个子序列。此时，在基准左边的元素都比该基准小，在基准右边的元素都比基准大。</li><li>递归地对两个序列进行快速排序，直到序列为空或者只有一个元素。</li></ul><p>其实快排实现的核心思想就是分治和递归，接下来用大白话解释下快排的原理，用词和说明可能不是那么正确，但是能够先听懂它的实现，我觉得这更重要。</p><p>我们假设这样杂乱无序不重复的数组<code>[21, 5, 44, 63, 3]</code>，设定他的<code>基准pivot</code>为第一位<code>Array[0]</code>，则<code>pivot</code>就是<code>21</code>，当然不一定都是第一位，并且<code>low</code>指针指向最左边，<code>high</code>指针指向最后边。</p><p>当<code>low</code>指针指向的值大于<code>pivot</code>就赋值给<code>high</code>指针，若当前指向的值不大于<code>pivot</code>，则一直向右移动，直到两个指针重合或者找到比<code>pivot</code>大的值。</p><p><code>high</code>指针则反之，一直找寻比<code>pivot</code>小的值，找到则赋值给<code>low</code>指针，否则一直向左移动，直到两个指针重合或者找到比<code>pivot</code>小的值。</p><h1 id="快排原理解释"><a href="#快排原理解释" class="headerlink" title="快排原理解释"></a>快排原理解释</h1><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/Quick%20Sort/qs1.png" alt="待排序数组"></p><p><strong><code>high</code>指针先于<code>low</code>指针比较和移动</strong>，<code>high</code>指针所指向的<code>value</code>是<code>3</code>，比<code>pivot</code>小，则赋值给<code>low</code>指针所指向的<code>21</code>，并且<code>high</code>指针不动。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/Quick%20Sort/qs2.png/wm" alt="low指针指向的值已被改写"></p><p>这时，轮到<code>low</code>指针向右移动了。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/Quick%20Sort/qs3.png/wm" alt="low指针向右移动"></p><p>此时<code>low</code>指针向右移动发现比<code>pivot</code>小，则继续向右移动。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/Quick%20Sort/qs4.png/wm" alt="low指针向右移动"></p><p>这时候lei了，<code>low</code>指针指向的<code>44</code>比<code>pivot</code>大，辣么就赋值给<code>high</code>指针指向的<code>3</code>，并且<code>low</code>指针保持不动。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/Quick%20Sort/qs5.png/wm" alt="high指针改写low指针所指向的值"></p><p><code>high</code>指针向左移动。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/Quick%20Sort/qs6.png/wm" alt="high指针向左移动"></p><p>发现比<code>pivot</code>大，这继续向左移动。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/Quick%20Sort/qs7.png/wm" alt="两指针重合"></p><p>当两指针重合的时候，此时指向的<code>44</code>将会被<code>基准</code>值改写。</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/Quick%20Sort/qs8.png/wm" alt="44被改写"></p><p>这时候一轮分治就OJBK了。可以清楚地看到（<del>好像这个例子不是很清楚的看到，果然是<code>size</code>太短了吗</del>），在<code>基准</code>值的左边数组大小都是小于<code>基准</code>值的，而右边数组都是大于<code>基准</code>值。这个时候就体现了快排的分治思想，相当于从<code>基准</code>中切一刀，左边的数组单独去排序，右边的数组单独去排序。这时候就变成了<code>[3, 5]</code>和<code>[63, 44]</code>继续递归快速排序，所以说快排实现的核心思想就是分治和递归。</p><h1 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Matthew Han</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/21 17:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; <span class="keyword">implements</span> <span class="title class_">ISort</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] arr)</span> &#123;</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;arr = &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(T[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> right;</span><br><span class="line">        <span class="type">T</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j].compareTo(pivot) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j &amp;&amp; arr[j].compareTo(pivot) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i].compareTo(pivot) &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j &amp;&amp; arr[i].compareTo(pivot) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                arr[j] = arr[i];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            arr[i] = pivot;</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(arr, left, i - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, i + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意每次要判断i和k的大小，因为数组size是多少就会有多少次基准数归位，会不断地拆分成两对数组，最后变成2位，1位。</p><h1 id="快排的一些知识点和算法复杂度"><a href="#快排的一些知识点和算法复杂度" class="headerlink" title="快排的一些知识点和算法复杂度"></a>快排的一些知识点和算法复杂度</h1><ul><li>选取基准最怕的就是选到了最大值或者最小值，这样一轮就是只是把基准数移到了最边上。</li><li>从概率学上来说，基准数选不选择第一个，还是中间随机抽取一个对是否会选取到最大值或最小值都是没有任何影响的。<strong>但是</strong>存在<strong>数列完全逆序</strong>的情况，从中间选取基准数可以有效避免这种情况发生，若还是选择数列最左位当做基准数的话，就会变成最糟糕的情况，时间复杂度就会变成 $O(n^2)$。</li><li>所以快速排序的平均时间复杂度是 $O(nlogn)$，最坏情况下的时间复杂度是 $O(n^2)$。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云对象存储使用</title>
      <link href="/post/faabc624-bd9c-11e9-b52a-878085b5c0f3/"/>
      <url>/post/faabc624-bd9c-11e9-b52a-878085b5c0f3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p> 这两天僵住了，分配给我的项目是提前写完了，但是测试样例却不好弄，索性就划着，反而给了我很多时间去学习其他知识。</p></blockquote><h1 id="图床很有必要"><a href="#图床很有必要" class="headerlink" title="图床很有必要"></a>图床很有必要</h1><p>首先GayHub本来就不是很稳定，公司网络访问十分OK，回到家连<code>ping</code>都快<code>ping</code>不通了，<code>clone</code>个<code>repository</code>真的是玩一年，更别说编辑blog了，打开博客图片就加载不出来，家里好歹也是电信100Mbps的，网速应该没问题。像我这种对艺术与美都有追求的人，选的图片都是<del>色影师</del>实拍的高清原图，分辨率都是3K、4K级别的。自己的照片也是高分辨率，容量也不小，要是没有类似CDN之类或者云存储的话，以后blog变多怕是博客在哪里都打不开了，毕竟GayHub也不是用爱发电的。</p><p>辣么就选一个方案吧，网上推荐比较多的就是<code>sm.ms</code>、阿里云OSS和七牛了，七牛这个hape，还要身份证正反面实名认证，也没留身份证的照片就懒得搞了，阿里云这个B天天发邮件促销活动，就选择冲阿里云了。</p><p><code>对象存储</code>这个概念之前在带库升级的时候，各家方案和需求都有提及过，当时与百度云团队、IBM、Oracle厂商都有过交流，虽然我是完全不懂都是听个大概，但是概念和特点也略微了解了。不过这和使用这个存储服务没有什么关系，不用管底层照着阿里的文档用就vans了。</p><h1 id="开通服务"><a href="#开通服务" class="headerlink" title="开通服务"></a>开通服务</h1><p>猛冲成功后，点击创建一个<code>Bucket</code></p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/OSS%E4%BD%BF%E7%94%A8/OSS2.png/wm" alt="对新Bucket设置"></p><p>其中区域选择，网上说选择香港好像有免费额度，但是普遍反映这个成本极低，所以我就冲了华东1（杭州），读写权限这里要注意<br>对象存储OSS提供Bucket级别的权限访问控制。<br>Bucket目前有三种访问权限：<code>public-read-write</code>，<code>public-read</code>和<code>private</code>，它们的含义如下：</p><table><thead><tr><th align="left">权限值</th><th align="left">中文名称</th><th align="left">权限对访问者的限制</th></tr></thead><tbody><tr><td align="left">public-read-write</td><td align="left">公共读写</td><td align="left">任何人（包括匿名访问者）都可以对该存储空间内文件进行读写操作。<strong>警告：互联网上任何用户都可以对该 Bucket 内的文件进行访问，并且向该 Bucket 写入数据。这有可能造成您数据的外泄以及费用激增，若被人恶意写入违法信息还可能会侵害您的合法权益。除特殊场景外，不建议您配置公共读写权限。</strong></td></tr><tr><td align="left">public-read</td><td align="left">公共读，私有写</td><td align="left">只有该存储空间的拥有者可以对该存储空间内的文件进行写操作，任何人（包括匿名访问者）都可以对该存储空间中的文件进行读操作。<strong>警告 互联网上任何用户都可以对该 Bucket 内文件进行访问，这有可能造成您数据的外泄以及费用激增，请谨慎操作。</strong></td></tr><tr><td align="left">private</td><td align="left">私有读写</td><td align="left">只有该存储空间的拥有者可以对该存储空间内的文件进行读写操作，其他人无法访问该存储空间内的文件。</td></tr></tbody></table><p>如果设置成私有的话，阿里云没有警告信息，1️⃣0️⃣🐭安全行为，但是读需要鉴权、签名，并且访问有时效性，最大超时时间是18小时；如果设置成公共读私写的话，谁都可以进行读取，并且无超时，有一定的安全隐患；公共读写就8️⃣说了，1️⃣0️⃣🐭弟弟行为，难道是要空手套黄图？</p><p>这里我们的需求就是hexo博客存储图片，我选择了公读私写，因为选择全私有的话，貌似不能修改访问的超时机制在静态页面的博客中不好去授权访问，不如公开读取（反正我也8️⃣是冠希哥），反正这个选项在这里总是要给人用的啊！</p><h1 id="计费方式"><a href="#计费方式" class="headerlink" title="计费方式"></a>计费方式</h1><p><em><strong>注：该计费方式更新于Jul.29th,2019，实际情况请以阿里云对象存储官网为准，本文计费方式描述仅供参考。</strong></em></p><p>详细的计费方式建议直接去阿里云了解或咨询客服，根据反馈来说应该是比较低廉的（不开启CDN加速服务）。</p><p>这里强烈建议选择包年包月的方式：</p><ul><li><p>按量付费：按实际使用量*单价的方式计费，每小时统计前一小时的实际用量并从账户余额中扣除实际消费金额。例如，当前时间是 9:30，结算的是 8:00-9:00 产生的费用。</p></li><li><p>包年包月：预先购买指定资源包，之后使用资源时，扣除相应的额度。一般情况下，包年包月比按量付费更加优惠。资源包目前仅提供标准型存储包、归档型存储包、下行流量包、 回源流量包，可购买地域请参见购买对象存储OSS资源包。</p></li></ul><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/OSS%E4%BD%BF%E7%94%A8/OSS6.png/wm" alt="费用组成"></p><blockquote><p><strong>注意：</strong> OSS的所有收费项目都是单独计费的，例如：您在OSS 的存储空间内存放了100GB数据，会产生存储费用；若每天有不同的客户通过外网访问您的数据，则您还会额外产生请求费用和外网流出流量费用。</p></blockquote><p>简而言之就是如果你开通了包年包月服务，你实际产生的费用一般是由包年包月的服务费（数据存储、外网流出）+数据处理费用+请求费用。大头其实就是在数据存储和外网流出流量上，所以选择一个合适的套餐开通包年包月服务还是很有必要的。</p><h1 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h1><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/OSS%E4%BD%BF%E7%94%A8/OSS3.png/wm" alt="管理页面"></p><p>管理界面和百度网盘很像，虽然底层是对象存储，但是傻瓜管理界面还是树形结构，这种最简单才是最好用的。这里可以对单一对象进行相关设置（包括获取URL、读写权限，不展开），不过推荐还是使用一款官方application来可视化管理比较好，可以直接拖拽上传下载。GayHub地址：<a href="https://github.com/aliyun/oss-browser"><code>https://github.com/aliyun/oss-browser</code></a><br>其实这里应该是和HexoEditor搭配才是完美的，可惜HexoEditor只支持七牛、腾讯云，不支持阿里云OSS。HexoEditor是一款Markdown的开发工具，预览内容与Hexo生成页面内容高度相似（可以配置主题，虽然我失败了，我的主题比较特殊），并且HexoEditor对图床的支持也8️⃣错，就是不支持阿里云，如下图：<br><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/OSS%E4%BD%BF%E7%94%A8/OSS4.png/wm" alt="HexoEditor图床"><br><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/OSS%E4%BD%BF%E7%94%A8/OSS5.png/wm" alt="HexoEditor预览"><br>HexoEditor的GayHub地址：<a href="https://github.com/zhuzhuyule/HexoEditor"><code>https://github.com/zhuzhuyule/HexoEditor</code></a></p><h1 id="Hexo中使用"><a href="#Hexo中使用" class="headerlink" title="Hexo中使用"></a>Hexo中使用</h1><p>最后就可以在你的HexoEditor上编写Markdown博客辣，通过oss-browser进行备份，再次打开你的blog，应该会比原来快很多的吧！</p>]]></content>
      
      
      <categories>
          
          <category> 其他技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对象存储 </tag>
            
            <tag> 存储服务 </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger初体验</title>
      <link href="/post/faabc622-bd9c-11e9-b52a-878085b5c0f3/"/>
      <url>/post/faabc622-bd9c-11e9-b52a-878085b5c0f3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Swagger…现在好像又多了一层台味…</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><em><strong>以前刚接触到Swagger，不知道他还能导出成Word、PDF文档，就觉得Postman+文档够用了，现在觉得代码中集成这样的框架，在初期能够方便很多。</strong></em></p><ul><li>功能丰富 ：支持多种注解，自动生成接口文档界面，支持在界面测试API接口功能；</li><li>条理清晰 ：开发过程中花一点写注释的时间，就可以及时的更新API文档，省心省力；</li><li>整合简单 ：通过添加pom依赖和简单配置，内嵌于应用中就可同时发布API接口文档界面，不需要部署独立服务。</li></ul><h1 id="Swagger集成项目"><a href="#Swagger集成项目" class="headerlink" title="Swagger集成项目"></a>Swagger集成项目</h1><p>Swagger本身是一种规范，而SpringFox-Swagger是专注于Spring生态的实现，Spring-Swagger-UI则是对Swagger-UI的封装。</p><p>代码整整合也非常的简单，首先是pom引入：</p><h2 id="pom引入"><a href="#pom引入" class="headerlink" title="pom引入"></a>pom引入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.swagger2markup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger2markup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>swagger2markup</code>是用于Swagger导出PDF&#x2F;HTML的依赖，离线文档之后再更新，目前还有点问题。</p><p>在<code>application.properties</code>中加这么一句<code>spring.resources.static-locations=classpath:/static/</code>，不然swagger-ui.html这个页面会被拦截。</p><h2 id="Configuration注入"><a href="#Configuration注入" class="headerlink" title="Configuration注入"></a>Configuration注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SwaggerConfiguration</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/16 16:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 这是注意的代码</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.zrtg.ldapsync.common.action&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;ldap-sync接口文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;用于大院LDAP服务器同步无纸化办公组织架构&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;http://gitlab.zrtg.com/996team/ldap-sync&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中<code>basePackage</code>中的一般配置<code>controller</code>的路径，<code>paths</code>属性进行过滤，<code>apis</code>属性可以设置扫描包，或者通过注解的方式标识；通过<code>enable</code>属性，可以在<code>application-&#123;profile&#125;.properties</code>文件中设置相应值，主要用于控制生产环境不生成接口文档。另外还有<code>groupName()</code>进行分组，比如高级客户、<del>低端人口（雾）</del>之类的分组。</li><li><code>apiInfo</code>中包装了文档的<code>title</code>、<code>description</code>、<code>version</code>这些信息。</li></ul><p><strong>然后在Springboot的入口类中加上<code>@EnableSwagger2</code>表示开启Swagger2。</strong></p><p>完成这些步骤后，发现其实访问<code>https://localhost/swagger-ui.html</code>并没有swagger页面，原因是在所映射的地址在SpringBoot静态资源文件夹下找不到。所以需要定义一个拦截器来放行。</p><h2 id="实现WebMvcConfigurer"><a href="#实现WebMvcConfigurer" class="headerlink" title="实现WebMvcConfigurer"></a>实现WebMvcConfigurer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WebMvcConfiguration</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用于Swagger UI显示</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MatthewHan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/16 16:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;swagger-ui.html&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/templates/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/templates/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要重写<code>addResourceHandlers</code>方法即可，通过<code>addResourceHandler</code>添加映射路径，然后再通过<code>addResourceLocations</code>来指定路径。<code>addResourceLocations</code>指的是文件放置的目录，<code>addResoureHandler</code>指的是对外暴露的访问路径。</p><h2 id="在controller中集成注解"><a href="#在controller中集成注解" class="headerlink" title="在controller中集成注解"></a>在controller中集成注解</h2><table><thead><tr><th align="left">注解</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">@Api</td><td align="left">修饰整个类，描述Controller的作用</td></tr><tr><td align="left">@ApiOperation</td><td align="left">描述一个类的一个方法，或者说一个接口</td></tr><tr><td align="left">@ApiParam</td><td align="left">单个参数描述</td></tr><tr><td align="left">@ApiModel</td><td align="left">用对象来接收参数</td></tr><tr><td align="left">@ApiProperty</td><td align="left">用对象接收参数时，描述对象的一个字段</td></tr><tr><td align="left">@ApiResponse</td><td align="left">HTTP响应其中1个描述</td></tr><tr><td align="left">@ApiResponses</td><td align="left">HTTP响应整体描述</td></tr><tr><td align="left">@ApiIgnore</td><td align="left">使用该注解忽略这个API</td></tr><tr><td align="left">@ApiError</td><td align="left">发生错误返回的信息</td></tr><tr><td align="left">@ApiImplicitParam</td><td align="left">一个请求参数</td></tr><tr><td align="left">@ApiImplicitParams</td><td align="left">多个请求参数</td></tr></tbody></table><p>最后通过浏览器来访问<code>https://localhost/swagger-ui.html</code>如下图：</p><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/Swagger/Swagger2.png/wm" alt="Swagger-UI"></p><p>Method类型、相关描述、Example、StatusCode都会自动帮你生成。</p><h1 id="小问题记录"><a href="#小问题记录" class="headerlink" title="小问题记录"></a>小问题记录</h1><h2 id="注解问题"><a href="#注解问题" class="headerlink" title="注解问题"></a>注解问题</h2><p>直接在通过<code>@PathVariable</code>注解的参数在Swagger中用了<code>@ApiImplicitParam</code>，发现在页面中请求是有问题的，这个注解应该对应的是<code>func(@Param(&quot;arg&quot;) String arg)</code>方法，实际上正确的用法是<code>@ApiParam</code>。类似下图代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试</span></span><br><span class="line"><span class="comment">* 用于添加一个ou，例如：department，employee</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> ou</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;添加一个OU&quot;)</span></span><br><span class="line">    <span class="meta">@ApiParam(name = &quot;ou&quot;, value = &quot;组织单元&quot;, required = true)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add-ldap-ou/&#123;ou&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseResult&lt;String&gt; <span class="title function_">addLdapOu</span><span class="params">(<span class="meta">@PathVariable(&quot;ou&quot;)</span>String ou)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="与Shiro集成的问题"><a href="#与Shiro集成的问题" class="headerlink" title="与Shiro集成的问题"></a>与Shiro集成的问题</h2><p>通过无拦截测试总结了如下的资源路径是swagger在渲染页面时的必需。如果工程中包含了Shiro安全框架，需要对swagger进行放行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置拦截器</span></span><br><span class="line">Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// swagger放行</span></span><br><span class="line">filterChainDefinitionMap.put(<span class="string">&quot;/swagger-ui.html&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">filterChainDefinitionMap.put(<span class="string">&quot;/swagger-resources/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">filterChainDefinitionMap.put(<span class="string">&quot;/v2/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">filterChainDefinitionMap.put(<span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">filterChainDefinitionMap.put(<span class="string">&quot;/configuration/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br></pre></td></tr></table></figure><p>在你的Shiro配置类中添加如上路径即可。</p><h1 id="离线文档（后续更新）"><a href="#离线文档（后续更新）" class="headerlink" title="离线文档（后续更新）"></a>离线文档（后续更新）</h1>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入职浙江广电一年的感悟（真）</title>
      <link href="/post/faabc623-bd9c-11e9-b52a-878085b5c0f3/"/>
      <url>/post/faabc623-bd9c-11e9-b52a-878085b5c0f3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不正确，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4c109a855cbaa513e531028965b095d15796ecae778e3fbf9cd64ec9f75acb91">206abe22ace773edf1b1040aa193e075ef4e884ee5403c1134c997b4e44238bf165b9c2f433608956cacdd7c4e9fc6c0ac7114f2dbeceddbba1b4a368f49276e93ca0f595d5df7e79e2e298cae7b1bf3a9c107911baf21a19b4ab213b532be8e3cb1a55c144a35459fca2606c27c9ed0d9eda8732fcf9aecf0e4f10d6a1efbc80cfaf3f1c76dba93c7c198285f1126a16be47ef8a921d56dba466d3034c17703bd3a28ba10580ba062aff080c63e41e6ab12ea1730bc935f761701ec2e3f2dc5805ac16cc10f5c9fad6b1e259beaf88f743bc88df196ae5e454cad24c1b32c474ccf35cf3e01aa88be798ee1e7abd725676510239661ddb497f7b28e98c63866628795b707d166470594a5b5a875f066606f6262535e505e4925fdb4e0bab1cf96a01aa728b1c753dc33eee7592a7a4decfc79089a2caf8ca725c6422ca7f0090d1779c204af7c84432396aff3ddb15c2be9e69e90864a145c05dde2243b5a6b0f5955302e4a2c5953a2684cc071733f5ed206c3042fad5305a5942247051ae177c2788e46bbeea20b91d6f917f9e4ea0d9cbd25d29c9541463f8a427364a8b605e41267041602134c44f9a42c9793d057c3683c2e351b05afd66bba9b4e12b4680abeb031311608b2417bc41cfc893beb9022f66ef597ff8370adc23d23607952675937d32587a1569f1cbcbfe3deaeb535575c4520b3521e4813a374ce0f4ff69079a998efae7fff753c467bbaf92178a28a45ffda2bd91109ab315307b412244cb38f9888a4098bea714cfba22799080b51c215831daffd8807e2c624282587c496e72f5c56e0e39bb2af3afef451a83eaff71a00d81de71d9655212e306bc1f113874f41199410e1e0d2bca209e3a874805533ef098c0de5e84881ec535c134a13af2d9b2ba3c2db9f03755322aa3bb9a3dc916f7ccaa9500704beaa584104abd4666ac814c444ceeeb20ab0fe928241204c8a0d60c64d62f21ffd6231d66a3341e8a433a5b4c66676be7fff2f7f8fed77892dc4d2547599e0e640586c82d1f6ce1573fb3db60767012044979f2adecd6519f1ce8f301383064de1be6100121aa85034cddbf7d691f78bcef9708a105fc63decfc17e4a22430a2b206c0edfc702cef69356ba9d800ced6e32ac4797d1c6475fafbab82dd6d920666d4236376cfc869e7fecb8df1e07e7f9b36d1ee7f5f7b8125b8117403a16052e94df598571d8e19efd79ecc26d6e6f4609c82d18557a194bb585ea078d66891641b554118df5fce29f9da1a6b2b45159d360b10700efb8bcac1c432a3acec80300e21e31c9de5eba9b1ae8f483ef5d88dd41136eea02657c381133d325f4e54b7e158b9c0f17f882bd8c1590c382a2c90ad82f68f3cb03ce1a42fdb07fd087a3f3d29b9399199850aaa6b27ab67792a8b2a4629cae8e11873138cd40bdf7a53c803ae619287ff0a2041cffa272f9d789351743dbb3ddd4ff6f08c19e1ed166c931c7865</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">965</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轨迹 </tag>
            
            <tag> 职业 </tag>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro学习一</title>
      <link href="/post/faabc626-bd9c-11e9-b52a-878085b5c0f3/"/>
      <url>/post/faabc626-bd9c-11e9-b52a-878085b5c0f3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>新的公司让我去熟悉下Shiro框架,公司的项目的权限管理都是基于Shiro写的,照着前辈们的blog学习了一番，这里做点个人学习记录。</p><h1 id="Shiro的整体架构图"><a href="#Shiro的整体架构图" class="headerlink" title="Shiro的整体架构图"></a>Shiro的整体架构图</h1><div style=center><p><img src="https://hexo-espada.oss-cn-hangzhou.aliyuncs.com/Espada/blog_pictures/Shiro%E5%AD%A6%E4%B9%A0%E4%B8%80/shiro.png" alt="Shiro架构图"></p></div><br><h1 id="首先是Shiro的几个组件"><a href="#首先是Shiro的几个组件" class="headerlink" title="首先是Shiro的几个组件"></a>首先是Shiro的几个组件</h1><ul><li><strong>SecurityManager</strong><br> 即所有Subject的管理者，这是Shiro框架的核心组件，可以把他看做是一个Shiro框架的全局管理组件，用于调度各种Shiro框架的服务。</li><li><strong>Authenticator</strong><br> 认证器，登入登出，对“Who are you？”进行核实。通常涉及用户名和密码。</li><li><strong>Authorizer</strong><br>授权器，赋予主体有哪些权限，身份验证通过后，由这个组件对登录人员进行访问控制的筛查，比如“who can do what”， 或者“who can do which actions”。Shiro 采用“基于 Realm”的方法，即用户（又称 Subject）、用户组、角色和 permission 的聚合体。</li><li><strong>Session Manager</strong><br>这个组件保证了异构客户端的访问，配置简单。它是基于POJO&#x2F;J2SE的，不跟任何的客户端或者协议绑定。</li><li><strong>Subject</strong><br>即当前用户，在权限管理的应用程序里往往需要知道谁能够操作什么，谁拥有操作该程序的权利，shiro中则需要通过Subject来提供基础的当前用户信息，Subject 不仅仅代表某个用户，也可以是第三方进程、后台帐户（Daemon Account）或其他类似事物。</li><li><strong>Realms</strong><br>Realms也就是域，是用户的信息认证器和用户的权限人证器，我们需要自己来实现Realms来自定义的管理我们自己系统内部的权限规则。</li></ul><h1 id="通过ini文件来自定义Realm"><a href="#通过ini文件来自定义Realm" class="headerlink" title="通过ini文件来自定义Realm"></a>通过ini文件来自定义Realm</h1><p><strong>Maven依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>shiro.ini</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Users and their (optional) assigned roles</span></span><br><span class="line"><span class="comment"># username = password, role1, role2, ..., roleN</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="section">[users]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用户名(登陆账号)是root,密码是123,角色是admin管理员</span></span><br><span class="line"></span><br><span class="line"><span class="attr">root</span> = <span class="number">123</span>,admin</span><br><span class="line"><span class="attr">user001</span> = <span class="number">123</span>,productManager</span><br><span class="line"><span class="attr">user002</span> = <span class="number">123</span>,orderManager</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Roles with assigned permissions</span></span><br><span class="line"><span class="comment"># roleName = perm1, perm2, ..., permN</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#admin管理员权限拉满,什么都能做</span></span><br><span class="line"><span class="attr">admin</span> = *</span><br><span class="line"></span><br><span class="line"><span class="comment">#产品经理只能做产品的管理</span></span><br><span class="line"><span class="attr">productManager</span> = addProduct,deleteProduct,editProduct,listProduct</span><br><span class="line"></span><br><span class="line"><span class="comment">#订单管理员只能做订单的管理</span></span><br><span class="line"><span class="attr">orderManager</span> = addOrder,deleteOrder,editOrder,listOrder</span><br></pre></td></tr></table></figure><h3 id="这里分配了三种角色各自拥有不同的权限"><a href="#这里分配了三种角色各自拥有不同的权限" class="headerlink" title="这里分配了三种角色各自拥有不同的权限"></a>这里分配了三种角色各自拥有不同的权限</h3><ul><li><p><strong>admin</strong>   </p><ul><li>拥有所有权限</li></ul></li><li><p><strong>productManager</strong>   </p><ul><li>addProduct</li><li>   deleteProduct</li><li>editProduct</li><li>   listProduct</li></ul></li><li><p><strong>orderManager</strong></p><ul><li>addOrder</li><li>deleteOrder</li><li>editOrder</li><li>listOrder</li></ul></li></ul><p><strong>Tutorial .java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shiro;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Factory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by MatthewHan on 2018.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tutorial</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Tutorial.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//step1.使用了IniSecurityManagerFactory类读取ini文件</span></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> <span class="title class_">IniSecurityManagerFactory</span>(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//step2.解析ini文件，返回一个Securitymanager对象，对象含有配置信息</span></span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> factory.getInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//step3.</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前使用的用户</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">currentUser</span>  <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//获取Session信息</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> currentUser.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;oneKey&quot;</span>,<span class="string">&quot;aValue&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String)session.getAttribute(<span class="string">&quot;oneKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(value.equals(<span class="string">&quot;trueValue&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            log.info(<span class="string">&quot;值正确！[&quot;</span>+ value +<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            log.info(<span class="string">&quot;value有错误哦！您的value：[&quot;</span>+ value+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        log.info(<span class="string">&quot;\n**********************是否登陆成功*********************\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//登陆后的当前用户，这样我们就可以检查角色和权限：</span></span><br><span class="line">        <span class="keyword">if</span>(!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;user001&quot;</span>, password = <span class="string">&quot;1123&quot;</span>;</span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line">            token.setRememberMe(<span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentUser.login(token);<span class="comment">//登陆</span></span><br><span class="line">                log.info(<span class="string">&quot;你居然登陆上了,牛逼&quot;</span>);</span><br><span class="line">                log.info(<span class="string">&quot;\n**********************打印这些登陆用户的信息*********************\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">                <span class="comment">//打印这些登陆用户的信息</span></span><br><span class="line">                log.info(<span class="string">&quot;用户[&quot;</span> + currentUser.getPrincipal() + <span class="string">&quot;] 登陆成功！&quot;</span>);</span><br><span class="line">    </span><br><span class="line">                <span class="comment">//测试一个role</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">roleName</span> <span class="operator">=</span> <span class="string">&quot;productManager&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (currentUser.hasRole(roleName)) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;这个角色：[&quot;</span> + roleName + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">                    log.info(<span class="string">&quot;emmmm,mere mortal!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                log.info(<span class="string">&quot;\n**********************测试不同类型的权限*********************\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">                <span class="comment">//测试不同类型的权限</span></span><br><span class="line">                <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;addProduct&quot;</span>)) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;您可以对产品进行管理&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;你不配使用&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">    </span><br><span class="line">                <span class="comment">//part2</span></span><br><span class="line">                <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;addOrder&quot;</span>)) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;您可以对订单系统进行管理&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    log.info(<span class="string">&quot;抱歉，你不配管理订单系统&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;没有这个用户名：&quot;</span> + token.getPrincipal());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;这个账号&quot;</span> + token.getPrincipal() + <span class="string">&quot;的密码是错的啦,try again?&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;这个用户&quot;</span> + token.getPrincipal() + <span class="string">&quot;已被封锁&quot;</span> + <span class="string">&quot;请联系管理员解锁&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;发生了一些未知的情况，请联系管理员！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户登出</span></span><br><span class="line">        currentUser.logout();</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试类Tutorial,通过<code>UsernamePasswordToken</code>创建的<code>token</code>对象来让<code>Subject</code>(当前对象)进行登陆验证,认证通过后,可以用<code>getPrincipal()</code>这个方法来获取当前对象的用户名.</p><div align=center><p><strong>角色相关验证方法</strong></p><table><thead><tr><th>Subject方法</th><th>描述</th></tr></thead><tbody><tr><td>hasRole(String roleName)</td><td>当用户拥有指定角色时，返回true</td></tr><tr><td>hasRoles(List<String> roleNames)</td><td>按照列表顺序返回相应的一个boolean值数组</td></tr><tr><td>hasAllRoles(Collection<String> roleNames)</td><td>如果用户拥有所有指定角色时，返回true</td></tr></tbody></table></br><table><thead><tr><th>Subject方法</th><th>描述</th></tr></thead><tbody><tr><td>checkRole(String roleName)</td><td>断言用户是否拥有指定角色</td></tr><tr><td>checkRoles(Collection<String> roleNames)</td><td>断言用户是否拥有所有指定角色</td></tr><tr><td>checkRoles(String… roleNames)</td><td>对上一方法的方法重载</td></tr></tbody></table><p><strong>权限相关验证方法</strong></p><table><thead><tr><th>Subject方法</th><th>说明</th></tr></thead><tbody><tr><td>checkPermission(Permission p)</td><td>断言用户是否拥有制定权限</td></tr><tr><td>checkPermission(String perm)</td><td>断言用户是否拥有制定权限</td></tr><tr><td>checkPermissions(Collection<Permission> perms)</td><td>断言用户是否拥有所有指定权限</td></tr><tr><td>checkPermissions(String… perms)</td><td>断言用户是否拥有所有指定权限</td></tr></tbody></table></br><table><thead><tr><th>Subject方法</th><th>描述</th></tr></thead><tbody><tr><td>isPermitted(Permission p)</td><td>Subject拥有制定权限时，返回true</td></tr><tr><td>isPermitted(List<Permission> perms)</td><td>返回对应权限的boolean数组</td></tr><tr><td>isPermittedAll(Collection<Permission> perms)</td><td>Subject拥有所有制定权限时，返回true</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-ldap</title>
      <link href="/post/faabc621-bd9c-11e9-b52a-878085b5c0f3/"/>
      <url>/post/faabc621-bd9c-11e9-b52a-878085b5c0f3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>经过了这么多年，集团内的各种系统紊乱复杂，结构数据互相同步，而LDAP服务器内的组织架构早已没人维护。现有需求需要无纸化办公的组织架构数据增量同步到LDAP服务器中。</p><p>简单记录下遇到并解决的问题和方法，万一以后又要维护了呢。</p><h1 id="LDAP基本概念"><a href="#LDAP基本概念" class="headerlink" title="LDAP基本概念"></a>LDAP基本概念</h1><p><strong>LDAP采用目录树的模型，下面是一些概念的解释：</strong></p><ol><li><p>目录树：在一个目录服务系统中，整个目录信息集可以表示为一个目录信息树，树中的每个节点是一个条目。</p></li><li><p>条目：每个条目就是一条记录，每个条目有自己的唯一可区别的名称（DN）。</p></li><li><p>对象类：与某个实体类型对应的一组属性，对象类是可以继承的，这样父类的必须属性也会被继承下来。</p></li><li><p>属性：描述条目的某个方面的信息，一个属性由一个属性类型和一个或多个属性值组成，属性有必须属性和非必须属性。</p></li></ol><table><thead><tr><th align="center">名词</th><th align="left">全称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">dc</td><td align="left">Domain Component</td><td align="left">域名的部分，其格式是将完整的域名分成几部分，如域名为<code>example.com</code>变成<code>dc=example,dc=com</code>（一条记录的所属位置）。</td></tr><tr><td align="center">ou</td><td align="left">Organization Unit</td><td align="left">组织单元，组织单元可以包含多种多个对象（entry），如组织单元名为<code>employee</code>，则<code>ou=employee</code>，那么<code>employee</code>下会有一大堆白给饭桶、精工骨干和划水健将这些实体。</td></tr><tr><td align="center">cn</td><td align="left">Common Name</td><td align="left">公共名称，如<code>hmc999</code>（一条记录的名称），则<code>cn=hmc999</code>，该条目可以在<code>ou=employee</code>下。</td></tr><tr><td align="center">sn</td><td align="left">Surname</td><td align="left">一般用来表达姓，如”韩”。</td></tr><tr><td align="center">dn</td><td align="left">Distinguished Name</td><td align="left">那上面的例子来说，对于<code>hmc999</code>这个实体的定位就是<code>cn=hmc999,ou=employee,dc=example,dc=com</code>，当然可能还会有国家、其他多级。</td></tr></tbody></table><h1 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h1><p>SpringProject已经集成了LDAP组件，直接pom引入即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-ldap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过使用Spring LDAP类AttributesMapper和LdapTemplate可以很好地减少传统方式的代码量。<br>首先我们可以通过AttributesMapper先构建一个实体，用来收集结果，简单样例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoAttributeMapper</span> <span class="keyword">implements</span> <span class="title class_">AttributesMapper</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将单个Attributes转成单个对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> attrs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NamingException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">mapFromAttributes</span><span class="params">(Attributes attrs)</span> <span class="keyword">throws</span> javax.naming.NamingException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">DemoModel</span> <span class="variable">demoModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DemoModel</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过attr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (attrs.get(xxx.name()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        demoModel.setXxx(attrs.get(xxx.name()).get().toString());</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> demoModel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写config类，LDAP服务配置在开发环境的<code>application-dev.properties</code>中，通过注解<code>@Value</code>注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> LdapTemplate ldapTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.ldap.urls&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.ldap.base&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String base;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.ldap.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.ldap.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LdapContextSource <span class="title function_">contextSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">LdapContextSource</span> <span class="variable">contextSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LdapContextSource</span>();</span><br><span class="line">        Map&lt;String, Object&gt; config = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    </span><br><span class="line">        contextSource.setUrl(url);</span><br><span class="line">        contextSource.setBase(base);</span><br><span class="line">        contextSource.setUserDn(userName);</span><br><span class="line">        contextSource.setPassword(passWord);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//  解决乱码的关键一句</span></span><br><span class="line">        config.put(<span class="string">&quot;java.naming.ldap.attributes.binary&quot;</span>, <span class="string">&quot;objectGUID&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        contextSource.setPooled(<span class="literal">true</span>);</span><br><span class="line">        contextSource.setBaseEnvironmentProperties(config);</span><br><span class="line">        log.info(<span class="string">&quot; [ MatthewHan ] : LDAP-Config启动 &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> contextSource;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LdapTemplate <span class="title function_">ldapTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == ldapTemplate) &#123;</span><br><span class="line">            ldapTemplate = <span class="keyword">new</span> <span class="title class_">LdapTemplate</span>(contextSource());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ldapTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h1><p>接着就是<code>Ldaptemplate</code>的方法用来增删改查，详细的懒得展开了，有几个点需要注意下：</p><ul><li><code>Ldaptemplate</code>需要动态生成DN便于增删改查，因为很多操作都是基于构建baseDN，自己需要更是实际业务情况，编写工具类用于baseDN的生成。</li><li>更新操作方法<code>rebind()</code>，其实是先解绑当前实体，在重新绑定，如果该实体存在下级实体，就会throw错误，所以在不确定条目结构时，可以使用<code>ModifyAttributes</code>类来处理。</li><li>因为LDAP是树状结构模型，所以在绑定与解绑过程中，一定要注意它是否存在上下级关系，比如在<code>ou=department</code>下存在顶级部门、次级部门和下级部门，<code>deId=003001</code>是<code>deId=003</code>的子部门，如果要解绑整个部门（包括子部门）那么就不能使用<code>unbind()</code>直接解绑<code>deId=003</code>这个实体，但是可以先解绑最下级部门，再一级一级往上解绑。绑定也是一样的原理，先绑定最上级部门，然后再绑定其下级、最下级部门。<del>题外话：讲道理应该有可以直接解绑该实体以及他的全部子实体吧！但是我好像没找到。。</del></li><li>遗留的一个问题，害怕会在项目中会引发墨菲定律的风险，已知一个实体的一个属性<code>deId=003001</code>，包括<code>ou=employee</code>，他的实际DN为<code>deId=003001,deId=003,ou=department...</code>，从DN中我们知道他是属于<code>deId=003</code>的子实体，但是可以通过配置<code>AndFilter</code>配置过滤器，从而使用<code>Ldaptemplate</code>的<code>search</code>方法去定位该实体，却不知道他的DN。。我在Ldaptemplate中未找到一个method，这是个未解决的问题。关于LDAP的内容，整个互联网上也不是太多，社区也不够活跃，希望以后能够知道答案。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring-ldap </tag>
            
            <tag> ldap </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
